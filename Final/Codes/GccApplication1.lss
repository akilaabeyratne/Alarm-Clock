
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005b8  00800100  00004dc2  00004e56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004dc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008006b8  008006b8  0000540e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000540e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000546c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  000054ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d25  00000000  00000000  00005754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000972  00000000  00000000  0000b479  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b7c  00000000  00000000  0000bdeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000084c  00000000  00000000  0000e968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a4b  00000000  00000000  0000f1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000428f  00000000  00000000  0000fbff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  00013e8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__ctors_end>
       4:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
       8:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
       c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      10:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      14:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      18:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      1c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      20:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      24:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      28:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      2c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      30:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      34:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      38:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      3c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      40:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      44:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      48:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      4c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      50:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      54:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      58:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      5c:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      60:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      64:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__bad_interrupt>
      68:	45 0a       	sbc	r4, r21
      6a:	4c 0a       	sbc	r4, r28
      6c:	5c 0a       	sbc	r5, r28
      6e:	6c 0a       	sbc	r6, r28
      70:	7c 0a       	sbc	r7, r28
      72:	8c 0a       	sbc	r8, r28
      74:	9c 0a       	sbc	r9, r28
      76:	ff 0d       	add	r31, r15
      78:	06 0e       	add	r0, r22
      7a:	1a 0e       	add	r1, r26
      7c:	2e 0e       	add	r2, r30
      7e:	42 0e       	add	r4, r18
      80:	56 0e       	add	r5, r22
      82:	6a 0e       	add	r6, r26
      84:	07 12       	cpse	r0, r23
      86:	0e 12       	cpse	r0, r30
      88:	2b 12       	cpse	r2, r27
      8a:	48 12       	cpse	r4, r24
      8c:	65 12       	cpse	r6, r21
      8e:	82 12       	cpse	r8, r18
      90:	9f 12       	cpse	r9, r31
      92:	c5 19       	sub	r28, r5
      94:	cc 19       	sub	r28, r12
      96:	dc 19       	sub	r29, r12
      98:	ec 19       	sub	r30, r12
      9a:	fc 19       	sub	r31, r12
      9c:	0c 1a       	sub	r0, r28
      9e:	1c 1a       	sub	r1, r28
      a0:	2c 1a       	sub	r2, r28

000000a2 <__trampolines_end>:
      a2:	93 02       	muls	r25, r19
      a4:	10 00       	.word	0x0010	; ????
      a6:	6e 02       	muls	r22, r30
      a8:	10 00       	.word	0x0010	; ????
      aa:	93 02       	muls	r25, r19
      ac:	10 00       	.word	0x0010	; ????
      ae:	6e 02       	muls	r22, r30
      b0:	10 00       	.word	0x0010	; ????
      b2:	93 02       	muls	r25, r19
      b4:	10 00       	.word	0x0010	; ????
      b6:	ee 01       	movw	r28, r28
      b8:	10 00       	.word	0x0010	; ????
      ba:	4b 02       	muls	r20, r27
      bc:	10 00       	.word	0x0010	; ????
      be:	0b 02       	muls	r16, r27
      c0:	10 00       	.word	0x0010	; ????
      c2:	b8 01       	movw	r22, r16
      c4:	f8 ff       	.word	0xfff8	; ????
      c6:	06 01       	movw	r0, r12
      c8:	10 00       	.word	0x0010	; ????
      ca:	4a 01       	movw	r8, r20
      cc:	10 00       	.word	0x0010	; ????
      ce:	b8 01       	movw	r22, r16
      d0:	10 00       	.word	0x0010	; ????
      d2:	ee 01       	movw	r28, r28
      d4:	f8 ff       	.word	0xfff8	; ????
      d6:	4a 01       	movw	r8, r20
      d8:	10 00       	.word	0x0010	; ????
      da:	9f 01       	movw	r18, r30
      dc:	10 00       	.word	0x0010	; ????
      de:	ee 01       	movw	r28, r28
      e0:	10 00       	.word	0x0010	; ????
      e2:	0b 02       	muls	r16, r27
      e4:	08 00       	.word	0x0008	; ????
      e6:	00 00       	nop
      e8:	10 00       	.word	0x0010	; ????
      ea:	4a 01       	movw	r8, r20
      ec:	10 00       	.word	0x0010	; ????
      ee:	93 02       	muls	r25, r19
      f0:	10 00       	.word	0x0010	; ????
      f2:	6e 02       	muls	r22, r30
      f4:	10 00       	.word	0x0010	; ????
      f6:	93 02       	muls	r25, r19
      f8:	10 00       	.word	0x0010	; ????
      fa:	6e 02       	muls	r22, r30
      fc:	10 00       	.word	0x0010	; ????
      fe:	93 02       	muls	r25, r19
     100:	10 00       	.word	0x0010	; ????
     102:	ee 01       	movw	r28, r28
     104:	10 00       	.word	0x0010	; ????
     106:	4b 02       	muls	r20, r27
     108:	10 00       	.word	0x0010	; ????
     10a:	0b 02       	muls	r16, r27
     10c:	10 00       	.word	0x0010	; ????
     10e:	b8 01       	movw	r22, r16
     110:	f8 ff       	.word	0xfff8	; ????
     112:	06 01       	movw	r0, r12
     114:	10 00       	.word	0x0010	; ????
     116:	4a 01       	movw	r8, r20
     118:	10 00       	.word	0x0010	; ????
     11a:	b8 01       	movw	r22, r16
     11c:	10 00       	.word	0x0010	; ????
     11e:	ee 01       	movw	r28, r28
     120:	f8 ff       	.word	0xfff8	; ????
     122:	4a 01       	movw	r8, r20
     124:	10 00       	.word	0x0010	; ????
     126:	0b 02       	muls	r16, r27
     128:	10 00       	.word	0x0010	; ????
     12a:	ee 01       	movw	r28, r28
     12c:	10 00       	.word	0x0010	; ????
     12e:	b8 01       	movw	r22, r16
     130:	04 00       	.word	0x0004	; ????
     132:	00 00       	nop
     134:	08 00       	.word	0x0008	; ????
     136:	93 02       	muls	r25, r19
     138:	10 00       	.word	0x0010	; ????
     13a:	6e 02       	muls	r22, r30
     13c:	10 00       	.word	0x0010	; ????
     13e:	93 02       	muls	r25, r19
     140:	10 00       	.word	0x0010	; ????
     142:	6e 02       	muls	r22, r30
     144:	10 00       	.word	0x0010	; ????
     146:	93 02       	muls	r25, r19
     148:	10 00       	.word	0x0010	; ????
     14a:	ee 01       	movw	r28, r28
     14c:	10 00       	.word	0x0010	; ????
     14e:	4b 02       	muls	r20, r27
     150:	10 00       	.word	0x0010	; ????
     152:	0b 02       	muls	r16, r27
     154:	10 00       	.word	0x0010	; ????
     156:	b8 01       	movw	r22, r16
     158:	f8 ff       	.word	0xfff8	; ????
     15a:	06 01       	movw	r0, r12
     15c:	10 00       	.word	0x0010	; ????
     15e:	4a 01       	movw	r8, r20
     160:	10 00       	.word	0x0010	; ????
     162:	b8 01       	movw	r22, r16
     164:	10 00       	.word	0x0010	; ????
     166:	ee 01       	movw	r28, r28
     168:	f8 ff       	.word	0xfff8	; ????
     16a:	4a 01       	movw	r8, r20
     16c:	10 00       	.word	0x0010	; ????
     16e:	9f 01       	movw	r18, r30
     170:	10 00       	.word	0x0010	; ????
     172:	ee 01       	movw	r28, r28
     174:	10 00       	.word	0x0010	; ????
     176:	0b 02       	muls	r16, r27
     178:	08 00       	.word	0x0008	; ????
     17a:	00 00       	nop
     17c:	10 00       	.word	0x0010	; ????
     17e:	4a 01       	movw	r8, r20
     180:	10 00       	.word	0x0010	; ????
     182:	93 02       	muls	r25, r19
     184:	10 00       	.word	0x0010	; ????
     186:	6e 02       	muls	r22, r30
     188:	10 00       	.word	0x0010	; ????
     18a:	93 02       	muls	r25, r19
     18c:	10 00       	.word	0x0010	; ????
     18e:	6e 02       	muls	r22, r30
     190:	10 00       	.word	0x0010	; ????
     192:	93 02       	muls	r25, r19
     194:	10 00       	.word	0x0010	; ????
     196:	ee 01       	movw	r28, r28
     198:	10 00       	.word	0x0010	; ????
     19a:	4b 02       	muls	r20, r27
     19c:	10 00       	.word	0x0010	; ????
     19e:	0b 02       	muls	r16, r27
     1a0:	10 00       	.word	0x0010	; ????
     1a2:	b8 01       	movw	r22, r16
     1a4:	f8 ff       	.word	0xfff8	; ????
     1a6:	06 01       	movw	r0, r12
     1a8:	10 00       	.word	0x0010	; ????
     1aa:	4a 01       	movw	r8, r20
     1ac:	10 00       	.word	0x0010	; ????
     1ae:	b8 01       	movw	r22, r16
     1b0:	10 00       	.word	0x0010	; ????
     1b2:	ee 01       	movw	r28, r28
     1b4:	f8 ff       	.word	0xfff8	; ????
     1b6:	4a 01       	movw	r8, r20
     1b8:	10 00       	.word	0x0010	; ????
     1ba:	0b 02       	muls	r16, r27
     1bc:	10 00       	.word	0x0010	; ????
     1be:	ee 01       	movw	r28, r28
     1c0:	10 00       	.word	0x0010	; ????
     1c2:	b8 01       	movw	r22, r16
     1c4:	08 00       	.word	0x0008	; ????
     1c6:	00 00       	nop
     1c8:	10 00       	.word	0x0010	; ????
     1ca:	ee 01       	movw	r28, r28
     1cc:	10 00       	.word	0x0010	; ????
     1ce:	0b 02       	muls	r16, r27
     1d0:	10 00       	.word	0x0010	; ????
     1d2:	4b 02       	muls	r20, r27
     1d4:	10 00       	.word	0x0010	; ????
     1d6:	93 02       	muls	r25, r19
     1d8:	f8 ff       	.word	0xfff8	; ????
     1da:	88 01       	movw	r16, r16
     1dc:	10 00       	.word	0x0010	; ????
     1de:	ba 02       	muls	r27, r26
     1e0:	10 00       	.word	0x0010	; ????
     1e2:	93 02       	muls	r25, r19
     1e4:	10 00       	.word	0x0010	; ????
     1e6:	4b 02       	muls	r20, r27
     1e8:	f8 ff       	.word	0xfff8	; ????
     1ea:	5d 01       	movw	r10, r26
     1ec:	10 00       	.word	0x0010	; ????
     1ee:	93 02       	muls	r25, r19
     1f0:	10 00       	.word	0x0010	; ????
     1f2:	4b 02       	muls	r20, r27
     1f4:	10 00       	.word	0x0010	; ????
     1f6:	0b 02       	muls	r16, r27
     1f8:	f8 ff       	.word	0xfff8	; ????
     1fa:	4a 01       	movw	r8, r20
     1fc:	10 00       	.word	0x0010	; ????
     1fe:	4b 02       	muls	r20, r27
     200:	10 00       	.word	0x0010	; ????
     202:	0b 02       	muls	r16, r27
     204:	10 00       	.word	0x0010	; ????
     206:	ee 01       	movw	r28, r28
     208:	08 00       	.word	0x0008	; ????
     20a:	00 00       	nop
     20c:	10 00       	.word	0x0010	; ????
     20e:	4a 01       	movw	r8, r20
     210:	10 00       	.word	0x0010	; ????
     212:	93 02       	muls	r25, r19
     214:	10 00       	.word	0x0010	; ????
     216:	00 00       	nop
     218:	10 00       	.word	0x0010	; ????
     21a:	00 00       	nop
     21c:	10 00       	.word	0x0010	; ????
     21e:	93 02       	muls	r25, r19
     220:	10 00       	.word	0x0010	; ????
     222:	27 05       	cpc	r18, r7
     224:	10 00       	.word	0x0010	; ????
     226:	00 00       	nop
     228:	10 00       	.word	0x0010	; ????
     22a:	00 00       	nop
     22c:	10 00       	.word	0x0010	; ????
     22e:	6e 02       	muls	r22, r30
     230:	10 00       	.word	0x0010	; ????
     232:	93 02       	muls	r25, r19
     234:	10 00       	.word	0x0010	; ????
     236:	00 00       	nop
     238:	10 00       	.word	0x0010	; ????
     23a:	00 00       	nop
     23c:	10 00       	.word	0x0010	; ????
     23e:	6e 02       	muls	r22, r30
     240:	10 00       	.word	0x0010	; ????
     242:	93 02       	muls	r25, r19
     244:	10 00       	.word	0x0010	; ????
     246:	6e 02       	muls	r22, r30
     248:	10 00       	.word	0x0010	; ????
     24a:	93 02       	muls	r25, r19
     24c:	10 00       	.word	0x0010	; ????
     24e:	6e 02       	muls	r22, r30
     250:	10 00       	.word	0x0010	; ????
     252:	93 02       	muls	r25, r19
     254:	10 00       	.word	0x0010	; ????
     256:	ee 01       	movw	r28, r28
     258:	10 00       	.word	0x0010	; ????
     25a:	4b 02       	muls	r20, r27
     25c:	10 00       	.word	0x0010	; ????
     25e:	0b 02       	muls	r16, r27
     260:	10 00       	.word	0x0010	; ????
     262:	b8 01       	movw	r22, r16
     264:	08 00       	.word	0x0008	; ????
     266:	00 00       	nop
     268:	10 00       	.word	0x0010	; ????
     26a:	06 01       	movw	r0, r12
     26c:	10 00       	.word	0x0010	; ????
     26e:	4a 01       	movw	r8, r20
     270:	10 00       	.word	0x0010	; ????
     272:	b8 01       	movw	r22, r16
     274:	10 00       	.word	0x0010	; ????
     276:	ee 01       	movw	r28, r28
     278:	08 00       	.word	0x0008	; ????
     27a:	00 00       	nop
     27c:	10 00       	.word	0x0010	; ????
     27e:	4a 01       	movw	r8, r20
     280:	10 00       	.word	0x0010	; ????
     282:	9f 01       	movw	r18, r30
     284:	10 00       	.word	0x0010	; ????
     286:	ee 01       	movw	r28, r28
     288:	10 00       	.word	0x0010	; ????
     28a:	0b 02       	muls	r16, r27
     28c:	08 00       	.word	0x0008	; ????
     28e:	00 00       	nop
     290:	10 00       	.word	0x0010	; ????
     292:	4a 01       	movw	r8, r20
     294:	10 00       	.word	0x0010	; ????
     296:	93 02       	muls	r25, r19
     298:	10 00       	.word	0x0010	; ????
     29a:	6e 02       	muls	r22, r30
     29c:	10 00       	.word	0x0010	; ????
     29e:	93 02       	muls	r25, r19
     2a0:	10 00       	.word	0x0010	; ????
     2a2:	6e 02       	muls	r22, r30
     2a4:	10 00       	.word	0x0010	; ????
     2a6:	93 02       	muls	r25, r19
     2a8:	10 00       	.word	0x0010	; ????
     2aa:	ee 01       	movw	r28, r28
     2ac:	10 00       	.word	0x0010	; ????
     2ae:	4b 02       	muls	r20, r27
     2b0:	10 00       	.word	0x0010	; ????
     2b2:	0b 02       	muls	r16, r27
     2b4:	10 00       	.word	0x0010	; ????
     2b6:	b8 01       	movw	r22, r16
     2b8:	08 00       	.word	0x0008	; ????
     2ba:	00 00       	nop
     2bc:	10 00       	.word	0x0010	; ????
     2be:	06 01       	movw	r0, r12
     2c0:	10 00       	.word	0x0010	; ????
     2c2:	4a 01       	movw	r8, r20
     2c4:	10 00       	.word	0x0010	; ????
     2c6:	b8 01       	movw	r22, r16
     2c8:	10 00       	.word	0x0010	; ????
     2ca:	ee 01       	movw	r28, r28
     2cc:	08 00       	.word	0x0008	; ????
     2ce:	00 00       	nop
     2d0:	10 00       	.word	0x0010	; ????
     2d2:	4a 01       	movw	r8, r20
     2d4:	10 00       	.word	0x0010	; ????
     2d6:	0b 02       	muls	r16, r27
     2d8:	10 00       	.word	0x0010	; ????
     2da:	ee 01       	movw	r28, r28
     2dc:	10 00       	.word	0x0010	; ????
     2de:	b8 01       	movw	r22, r16
     2e0:	08 00       	.word	0x0008	; ????
     2e2:	00 00       	nop
     2e4:	10 00       	.word	0x0010	; ????
     2e6:	ee 01       	movw	r28, r28
     2e8:	10 00       	.word	0x0010	; ????
     2ea:	0b 02       	muls	r16, r27
     2ec:	10 00       	.word	0x0010	; ????
     2ee:	4b 02       	muls	r20, r27
     2f0:	10 00       	.word	0x0010	; ????
     2f2:	93 02       	muls	r25, r19
     2f4:	f8 ff       	.word	0xfff8	; ????
     2f6:	88 01       	movw	r16, r16
     2f8:	10 00       	.word	0x0010	; ????
     2fa:	ba 02       	muls	r27, r26
     2fc:	10 00       	.word	0x0010	; ????
     2fe:	93 02       	muls	r25, r19
     300:	10 00       	.word	0x0010	; ????
     302:	4b 02       	muls	r20, r27
     304:	f8 ff       	.word	0xfff8	; ????
     306:	5d 01       	movw	r10, r26
     308:	10 00       	.word	0x0010	; ????
     30a:	93 02       	muls	r25, r19
     30c:	10 00       	.word	0x0010	; ????
     30e:	4b 02       	muls	r20, r27
     310:	10 00       	.word	0x0010	; ????
     312:	0b 02       	muls	r16, r27
     314:	f8 ff       	.word	0xfff8	; ????
     316:	4a 01       	movw	r8, r20
     318:	10 00       	.word	0x0010	; ????
     31a:	4b 02       	muls	r20, r27
     31c:	10 00       	.word	0x0010	; ????
     31e:	0b 02       	muls	r16, r27
     320:	10 00       	.word	0x0010	; ????
     322:	ee 01       	movw	r28, r28
     324:	08 00       	.word	0x0008	; ????
     326:	00 00       	nop
     328:	10 00       	.word	0x0010	; ????
     32a:	4a 01       	movw	r8, r20
     32c:	10 00       	.word	0x0010	; ????
     32e:	93 02       	muls	r25, r19
     330:	10 00       	.word	0x0010	; ????
     332:	00 00       	nop
     334:	10 00       	.word	0x0010	; ????
     336:	00 00       	nop
     338:	10 00       	.word	0x0010	; ????
     33a:	93 02       	muls	r25, r19
     33c:	10 00       	.word	0x0010	; ????
     33e:	27 05       	cpc	r18, r7
     340:	10 00       	.word	0x0010	; ????
     342:	00 00       	nop
     344:	10 00       	.word	0x0010	; ????
     346:	00 00       	nop
     348:	10 00       	.word	0x0010	; ????
     34a:	6e 02       	muls	r22, r30
     34c:	10 00       	.word	0x0010	; ????
     34e:	93 02       	muls	r25, r19
     350:	10 00       	.word	0x0010	; ????
     352:	00 00       	nop
     354:	10 00       	.word	0x0010	; ????
     356:	00 00       	nop
     358:	10 00       	.word	0x0010	; ????
     35a:	6e 02       	muls	r22, r30
     35c:	10 00       	.word	0x0010	; ????
     35e:	93 02       	muls	r25, r19
     360:	10 00       	.word	0x0010	; ????
     362:	6e 02       	muls	r22, r30
     364:	10 00       	.word	0x0010	; ????
     366:	93 02       	muls	r25, r19
     368:	10 00       	.word	0x0010	; ????
     36a:	6e 02       	muls	r22, r30
     36c:	10 00       	.word	0x0010	; ????
     36e:	93 02       	muls	r25, r19
     370:	10 00       	.word	0x0010	; ????
     372:	ee 01       	movw	r28, r28
     374:	10 00       	.word	0x0010	; ????
     376:	4b 02       	muls	r20, r27
     378:	10 00       	.word	0x0010	; ????
     37a:	0b 02       	muls	r16, r27
     37c:	10 00       	.word	0x0010	; ????
     37e:	b8 01       	movw	r22, r16
     380:	08 00       	.word	0x0008	; ????
     382:	00 00       	nop
     384:	10 00       	.word	0x0010	; ????
     386:	06 01       	movw	r0, r12
     388:	10 00       	.word	0x0010	; ????
     38a:	4a 01       	movw	r8, r20
     38c:	10 00       	.word	0x0010	; ????
     38e:	b8 01       	movw	r22, r16
     390:	10 00       	.word	0x0010	; ????
     392:	ee 01       	movw	r28, r28
     394:	08 00       	.word	0x0008	; ????
     396:	00 00       	nop
     398:	10 00       	.word	0x0010	; ????
     39a:	4a 01       	movw	r8, r20
     39c:	10 00       	.word	0x0010	; ????
     39e:	9f 01       	movw	r18, r30
     3a0:	10 00       	.word	0x0010	; ????
     3a2:	ee 01       	movw	r28, r28
     3a4:	10 00       	.word	0x0010	; ????
     3a6:	0b 02       	muls	r16, r27
     3a8:	08 00       	.word	0x0008	; ????
     3aa:	00 00       	nop
     3ac:	10 00       	.word	0x0010	; ????
     3ae:	4a 01       	movw	r8, r20
     3b0:	10 00       	.word	0x0010	; ????
     3b2:	93 02       	muls	r25, r19
     3b4:	10 00       	.word	0x0010	; ????
     3b6:	6e 02       	muls	r22, r30
     3b8:	10 00       	.word	0x0010	; ????
     3ba:	93 02       	muls	r25, r19
     3bc:	10 00       	.word	0x0010	; ????
     3be:	6e 02       	muls	r22, r30
     3c0:	10 00       	.word	0x0010	; ????
     3c2:	93 02       	muls	r25, r19
     3c4:	10 00       	.word	0x0010	; ????
     3c6:	ee 01       	movw	r28, r28
     3c8:	10 00       	.word	0x0010	; ????
     3ca:	4b 02       	muls	r20, r27
     3cc:	10 00       	.word	0x0010	; ????
     3ce:	0b 02       	muls	r16, r27
     3d0:	10 00       	.word	0x0010	; ????
     3d2:	b8 01       	movw	r22, r16
     3d4:	08 00       	.word	0x0008	; ????
     3d6:	00 00       	nop
     3d8:	10 00       	.word	0x0010	; ????
     3da:	06 01       	movw	r0, r12
     3dc:	10 00       	.word	0x0010	; ????
     3de:	4a 01       	movw	r8, r20
     3e0:	10 00       	.word	0x0010	; ????
     3e2:	b8 01       	movw	r22, r16
     3e4:	10 00       	.word	0x0010	; ????
     3e6:	ee 01       	movw	r28, r28
     3e8:	08 00       	.word	0x0008	; ????
     3ea:	00 00       	nop
     3ec:	10 00       	.word	0x0010	; ????
     3ee:	4a 01       	movw	r8, r20
     3f0:	10 00       	.word	0x0010	; ????
     3f2:	0b 02       	muls	r16, r27
     3f4:	10 00       	.word	0x0010	; ????
     3f6:	ee 01       	movw	r28, r28
     3f8:	10 00       	.word	0x0010	; ????
     3fa:	b8 01       	movw	r22, r16
     3fc:	08 00       	.word	0x0008	; ????
     3fe:	00 00       	nop
     400:	10 00       	.word	0x0010	; ????
     402:	0b 02       	muls	r16, r27
     404:	10 00       	.word	0x0010	; ????
     406:	0b 02       	muls	r16, r27
     408:	10 00       	.word	0x0010	; ????
     40a:	0b 02       	muls	r16, r27
     40c:	10 00       	.word	0x0010	; ????
     40e:	0b 02       	muls	r16, r27
     410:	04 00       	.word	0x0004	; ????
     412:	ba 02       	muls	r27, r26
     414:	f0 ff       	sbrs	r31, 0
     416:	93 02       	muls	r25, r19
     418:	20 00       	.word	0x0020	; ????
     41a:	93 02       	muls	r25, r19
     41c:	08 00       	.word	0x0008	; ????
     41e:	4b 02       	muls	r20, r27
     420:	08 00       	.word	0x0008	; ????
     422:	a4 03       	fmuls	r18, r20
     424:	f0 ff       	sbrs	r31, 0
     426:	70 03       	mulsu	r23, r16
     428:	20 00       	.word	0x0020	; ????
     42a:	70 03       	mulsu	r23, r16
     42c:	10 00       	.word	0x0010	; ????
     42e:	10 03       	mulsu	r17, r16
     430:	10 00       	.word	0x0010	; ????
     432:	ba 02       	muls	r27, r26
     434:	10 00       	.word	0x0010	; ????
     436:	93 02       	muls	r25, r19
     438:	10 00       	.word	0x0010	; ????
     43a:	4b 02       	muls	r20, r27
     43c:	10 00       	.word	0x0010	; ????
     43e:	0b 02       	muls	r16, r27
     440:	10 00       	.word	0x0010	; ????
     442:	d2 01       	movw	r26, r4
     444:	08 00       	.word	0x0008	; ????
     446:	b8 01       	movw	r22, r16
     448:	08 00       	.word	0x0008	; ????
     44a:	b8 01       	movw	r22, r16
     44c:	20 00       	.word	0x0020	; ????
     44e:	88 01       	movw	r16, r16
     450:	20 00       	.word	0x0020	; ????
     452:	b8 01       	movw	r22, r16
     454:	20 00       	.word	0x0020	; ????
     456:	ee 01       	movw	r28, r28
     458:	20 00       	.word	0x0020	; ????
     45a:	0b 02       	muls	r16, r27
     45c:	04 00       	.word	0x0004	; ????
     45e:	4b 02       	muls	r20, r27
     460:	10 00       	.word	0x0010	; ????
     462:	6e 02       	muls	r22, r30
     464:	10 00       	.word	0x0010	; ????
     466:	93 02       	muls	r25, r19
     468:	f8 ff       	.word	0xfff8	; ????
     46a:	93 02       	muls	r25, r19
     46c:	10 00       	.word	0x0010	; ????
     46e:	ba 02       	muls	r27, r26
     470:	10 00       	.word	0x0010	; ????
     472:	b8 01       	movw	r22, r16
     474:	10 00       	.word	0x0010	; ????
     476:	0b 02       	muls	r16, r27
     478:	04 00       	.word	0x0004	; ????
     47a:	4b 02       	muls	r20, r27
     47c:	f0 ff       	sbrs	r31, 0
     47e:	ee 01       	movw	r28, r28
     480:	20 00       	.word	0x0020	; ????
     482:	0b 02       	muls	r16, r27
     484:	20 00       	.word	0x0020	; ????
     486:	10 03       	mulsu	r17, r16
     488:	20 00       	.word	0x0020	; ????
     48a:	88 01       	movw	r16, r16
     48c:	20 00       	.word	0x0020	; ????
     48e:	10 03       	mulsu	r17, r16
     490:	20 00       	.word	0x0020	; ????
     492:	b8 01       	movw	r22, r16
     494:	20 00       	.word	0x0020	; ????
     496:	10 03       	mulsu	r17, r16
     498:	20 00       	.word	0x0020	; ????
     49a:	ee 01       	movw	r28, r28
     49c:	20 00       	.word	0x0020	; ????
     49e:	10 03       	mulsu	r17, r16
     4a0:	20 00       	.word	0x0020	; ????
     4a2:	0b 02       	muls	r16, r27
     4a4:	20 00       	.word	0x0020	; ????
     4a6:	10 03       	mulsu	r17, r16
     4a8:	20 00       	.word	0x0020	; ????
     4aa:	4b 02       	muls	r20, r27
     4ac:	20 00       	.word	0x0020	; ????
     4ae:	10 03       	mulsu	r17, r16
     4b0:	20 00       	.word	0x0020	; ????
     4b2:	93 02       	muls	r25, r19
     4b4:	20 00       	.word	0x0020	; ????
     4b6:	10 03       	mulsu	r17, r16
     4b8:	20 00       	.word	0x0020	; ????
     4ba:	17 04       	cpc	r1, r7
     4bc:	20 00       	.word	0x0020	; ????
     4be:	dc 03       	fmulsu	r21, r20
     4c0:	20 00       	.word	0x0020	; ????
     4c2:	70 03       	mulsu	r23, r16
     4c4:	20 00       	.word	0x0020	; ????
     4c6:	10 03       	mulsu	r17, r16
     4c8:	20 00       	.word	0x0020	; ????
     4ca:	ba 02       	muls	r27, r26
     4cc:	20 00       	.word	0x0020	; ????
     4ce:	93 02       	muls	r25, r19
     4d0:	20 00       	.word	0x0020	; ????
     4d2:	4b 02       	muls	r20, r27
     4d4:	20 00       	.word	0x0020	; ????
     4d6:	10 03       	mulsu	r17, r16
     4d8:	20 00       	.word	0x0020	; ????
     4da:	ba 02       	muls	r27, r26
     4dc:	20 00       	.word	0x0020	; ????
     4de:	4b 02       	muls	r20, r27
     4e0:	20 00       	.word	0x0020	; ????
     4e2:	0b 02       	muls	r16, r27
     4e4:	20 00       	.word	0x0020	; ????
     4e6:	10 03       	mulsu	r17, r16
     4e8:	20 00       	.word	0x0020	; ????
     4ea:	88 01       	movw	r16, r16
     4ec:	20 00       	.word	0x0020	; ????
     4ee:	10 03       	mulsu	r17, r16
     4f0:	20 00       	.word	0x0020	; ????
     4f2:	b8 01       	movw	r22, r16
     4f4:	20 00       	.word	0x0020	; ????
     4f6:	10 03       	mulsu	r17, r16
     4f8:	20 00       	.word	0x0020	; ????
     4fa:	ee 01       	movw	r28, r28
     4fc:	20 00       	.word	0x0020	; ????
     4fe:	10 03       	mulsu	r17, r16
     500:	20 00       	.word	0x0020	; ????
     502:	0b 02       	muls	r16, r27
     504:	20 00       	.word	0x0020	; ????
     506:	10 03       	mulsu	r17, r16
     508:	20 00       	.word	0x0020	; ????
     50a:	4b 02       	muls	r20, r27
     50c:	20 00       	.word	0x0020	; ????
     50e:	10 03       	mulsu	r17, r16
     510:	20 00       	.word	0x0020	; ????
     512:	93 02       	muls	r25, r19
     514:	20 00       	.word	0x0020	; ????
     516:	10 03       	mulsu	r17, r16
     518:	20 00       	.word	0x0020	; ????
     51a:	17 04       	cpc	r1, r7
     51c:	20 00       	.word	0x0020	; ????
     51e:	dc 03       	fmulsu	r21, r20
     520:	20 00       	.word	0x0020	; ????
     522:	70 03       	mulsu	r23, r16
     524:	20 00       	.word	0x0020	; ????
     526:	10 03       	mulsu	r17, r16
     528:	20 00       	.word	0x0020	; ????
     52a:	ba 02       	muls	r27, r26
     52c:	20 00       	.word	0x0020	; ????
     52e:	93 02       	muls	r25, r19
     530:	20 00       	.word	0x0020	; ????
     532:	4b 02       	muls	r20, r27
     534:	20 00       	.word	0x0020	; ????
     536:	10 03       	mulsu	r17, r16
     538:	20 00       	.word	0x0020	; ????
     53a:	ba 02       	muls	r27, r26
     53c:	20 00       	.word	0x0020	; ????
     53e:	4b 02       	muls	r20, r27
     540:	20 00       	.word	0x0020	; ????
     542:	93 02       	muls	r25, r19
     544:	20 00       	.word	0x0020	; ????
     546:	ba 02       	muls	r27, r26
     548:	20 00       	.word	0x0020	; ????
     54a:	93 02       	muls	r25, r19
     54c:	20 00       	.word	0x0020	; ????
     54e:	6e 02       	muls	r22, r30
     550:	20 00       	.word	0x0020	; ????
     552:	93 02       	muls	r25, r19
     554:	20 00       	.word	0x0020	; ????
     556:	ee 01       	movw	r28, r28
     558:	20 00       	.word	0x0020	; ????
     55a:	93 02       	muls	r25, r19
     55c:	20 00       	.word	0x0020	; ????
     55e:	6e 02       	muls	r22, r30
     560:	20 00       	.word	0x0020	; ????
     562:	93 02       	muls	r25, r19
     564:	20 00       	.word	0x0020	; ????
     566:	ee 01       	movw	r28, r28
     568:	20 00       	.word	0x0020	; ????
     56a:	93 02       	muls	r25, r19
     56c:	20 00       	.word	0x0020	; ????
     56e:	6e 02       	muls	r22, r30
     570:	20 00       	.word	0x0020	; ????
     572:	93 02       	muls	r25, r19
     574:	f8 ff       	.word	0xfff8	; ????
     576:	ee 01       	movw	r28, r28
     578:	10 00       	.word	0x0010	; ????
     57a:	93 02       	muls	r25, r19
     57c:	10 00       	.word	0x0010	; ????
     57e:	6e 02       	muls	r22, r30
     580:	10 00       	.word	0x0010	; ????
     582:	93 02       	muls	r25, r19
     584:	f8 ff       	.word	0xfff8	; ????
     586:	ee 01       	movw	r28, r28
     588:	10 00       	.word	0x0010	; ????
     58a:	93 02       	muls	r25, r19
     58c:	10 00       	.word	0x0010	; ????
     58e:	00 00       	nop
     590:	10 00       	.word	0x0010	; ????
     592:	00 00       	nop
     594:	10 00       	.word	0x0010	; ????
     596:	6e 02       	muls	r22, r30
     598:	10 00       	.word	0x0010	; ????
     59a:	93 02       	muls	r25, r19
     59c:	10 00       	.word	0x0010	; ????
     59e:	00 00       	nop
     5a0:	10 00       	.word	0x0010	; ????
     5a2:	00 00       	nop
     5a4:	10 00       	.word	0x0010	; ????
     5a6:	6e 02       	muls	r22, r30
     5a8:	10 00       	.word	0x0010	; ????
     5aa:	93 02       	muls	r25, r19
     5ac:	10 00       	.word	0x0010	; ????
     5ae:	6e 02       	muls	r22, r30
     5b0:	10 00       	.word	0x0010	; ????
     5b2:	93 02       	muls	r25, r19
     5b4:	10 00       	.word	0x0010	; ????
     5b6:	ee 01       	movw	r28, r28
     5b8:	10 00       	.word	0x0010	; ????
     5ba:	4b 02       	muls	r20, r27
     5bc:	10 00       	.word	0x0010	; ????
     5be:	0b 02       	muls	r16, r27
     5c0:	10 00       	.word	0x0010	; ????
     5c2:	b8 01       	movw	r22, r16
     5c4:	08 00       	.word	0x0008	; ????
     5c6:	00 00       	nop
     5c8:	10 00       	.word	0x0010	; ????
     5ca:	06 01       	movw	r0, r12
     5cc:	10 00       	.word	0x0010	; ????
     5ce:	4a 01       	movw	r8, r20
     5d0:	10 00       	.word	0x0010	; ????
     5d2:	b8 01       	movw	r22, r16
     5d4:	10 00       	.word	0x0010	; ????
     5d6:	ee 01       	movw	r28, r28
     5d8:	08 00       	.word	0x0008	; ????
     5da:	00 00       	nop
     5dc:	10 00       	.word	0x0010	; ????
     5de:	4a 01       	movw	r8, r20
     5e0:	10 00       	.word	0x0010	; ????
     5e2:	9f 01       	movw	r18, r30
     5e4:	10 00       	.word	0x0010	; ????
     5e6:	ee 01       	movw	r28, r28
     5e8:	10 00       	.word	0x0010	; ????
     5ea:	0b 02       	muls	r16, r27
     5ec:	08 00       	.word	0x0008	; ????
     5ee:	00 00       	nop
     5f0:	10 00       	.word	0x0010	; ????
     5f2:	4a 01       	movw	r8, r20
     5f4:	10 00       	.word	0x0010	; ????
     5f6:	93 02       	muls	r25, r19
     5f8:	10 00       	.word	0x0010	; ????
     5fa:	6e 02       	muls	r22, r30
     5fc:	10 00       	.word	0x0010	; ????
     5fe:	93 02       	muls	r25, r19
     600:	10 00       	.word	0x0010	; ????
     602:	6e 02       	muls	r22, r30
     604:	10 00       	.word	0x0010	; ????
     606:	93 02       	muls	r25, r19
     608:	10 00       	.word	0x0010	; ????
     60a:	ee 01       	movw	r28, r28
     60c:	10 00       	.word	0x0010	; ????
     60e:	4b 02       	muls	r20, r27
     610:	10 00       	.word	0x0010	; ????
     612:	0b 02       	muls	r16, r27
     614:	10 00       	.word	0x0010	; ????
     616:	b8 01       	movw	r22, r16
     618:	08 00       	.word	0x0008	; ????
     61a:	00 00       	nop
     61c:	10 00       	.word	0x0010	; ????
     61e:	06 01       	movw	r0, r12
     620:	10 00       	.word	0x0010	; ????
     622:	4a 01       	movw	r8, r20
     624:	10 00       	.word	0x0010	; ????
     626:	b8 01       	movw	r22, r16
     628:	10 00       	.word	0x0010	; ????
     62a:	ee 01       	movw	r28, r28
     62c:	08 00       	.word	0x0008	; ????
     62e:	00 00       	nop
     630:	10 00       	.word	0x0010	; ????
     632:	4a 01       	movw	r8, r20
     634:	10 00       	.word	0x0010	; ????
     636:	0b 02       	muls	r16, r27
     638:	10 00       	.word	0x0010	; ????
     63a:	ee 01       	movw	r28, r28
     63c:	10 00       	.word	0x0010	; ????
     63e:	b8 01       	movw	r22, r16
     640:	08 00       	.word	0x0008	; ????
     642:	00 00       	nop
     644:	10 00       	.word	0x0010	; ????
     646:	ee 01       	movw	r28, r28
     648:	10 00       	.word	0x0010	; ????
     64a:	0b 02       	muls	r16, r27
     64c:	10 00       	.word	0x0010	; ????
     64e:	4b 02       	muls	r20, r27
     650:	10 00       	.word	0x0010	; ????
     652:	93 02       	muls	r25, r19
     654:	f8 ff       	.word	0xfff8	; ????
     656:	88 01       	movw	r16, r16
     658:	10 00       	.word	0x0010	; ????
     65a:	ba 02       	muls	r27, r26
     65c:	10 00       	.word	0x0010	; ????
     65e:	93 02       	muls	r25, r19
     660:	10 00       	.word	0x0010	; ????
     662:	4b 02       	muls	r20, r27
     664:	f8 ff       	.word	0xfff8	; ????
     666:	5d 01       	movw	r10, r26
     668:	10 00       	.word	0x0010	; ????
     66a:	93 02       	muls	r25, r19
     66c:	10 00       	.word	0x0010	; ????
     66e:	4b 02       	muls	r20, r27
     670:	10 00       	.word	0x0010	; ????
     672:	0b 02       	muls	r16, r27
     674:	f8 ff       	.word	0xfff8	; ????
     676:	4a 01       	movw	r8, r20
     678:	10 00       	.word	0x0010	; ????
     67a:	4b 02       	muls	r20, r27
     67c:	10 00       	.word	0x0010	; ????
     67e:	0b 02       	muls	r16, r27
     680:	10 00       	.word	0x0010	; ????
     682:	ee 01       	movw	r28, r28
     684:	08 00       	.word	0x0008	; ????
     686:	00 00       	nop
     688:	10 00       	.word	0x0010	; ????
     68a:	4a 01       	movw	r8, r20
     68c:	10 00       	.word	0x0010	; ????
     68e:	93 02       	muls	r25, r19
     690:	10 00       	.word	0x0010	; ????
     692:	00 00       	nop
     694:	10 00       	.word	0x0010	; ????
     696:	00 00       	nop
     698:	10 00       	.word	0x0010	; ????
     69a:	93 02       	muls	r25, r19
     69c:	10 00       	.word	0x0010	; ????
     69e:	27 05       	cpc	r18, r7
     6a0:	10 00       	.word	0x0010	; ????
     6a2:	00 00       	nop
     6a4:	10 00       	.word	0x0010	; ????
     6a6:	00 00       	nop
     6a8:	10 00       	.word	0x0010	; ????
     6aa:	6e 02       	muls	r22, r30
     6ac:	10 00       	.word	0x0010	; ????
     6ae:	93 02       	muls	r25, r19
     6b0:	10 00       	.word	0x0010	; ????
     6b2:	00 00       	nop
     6b4:	10 00       	.word	0x0010	; ????
     6b6:	00 00       	nop
     6b8:	10 00       	.word	0x0010	; ????
     6ba:	6e 02       	muls	r22, r30
     6bc:	10 00       	.word	0x0010	; ????
     6be:	93 02       	muls	r25, r19
     6c0:	10 00       	.word	0x0010	; ????
     6c2:	4b 02       	muls	r20, r27
     6c4:	10 00       	.word	0x0010	; ????
     6c6:	93 02       	muls	r25, r19
     6c8:	10 00       	.word	0x0010	; ????
     6ca:	6e 02       	muls	r22, r30
     6cc:	10 00       	.word	0x0010	; ????
     6ce:	93 02       	muls	r25, r19
     6d0:	10 00       	.word	0x0010	; ????
     6d2:	ee 01       	movw	r28, r28
     6d4:	10 00       	.word	0x0010	; ????
     6d6:	4b 02       	muls	r20, r27
     6d8:	10 00       	.word	0x0010	; ????
     6da:	0b 02       	muls	r16, r27
     6dc:	10 00       	.word	0x0010	; ????
     6de:	b8 01       	movw	r22, r16
     6e0:	08 00       	.word	0x0008	; ????
     6e2:	00 00       	nop
     6e4:	10 00       	.word	0x0010	; ????
     6e6:	06 01       	movw	r0, r12
     6e8:	10 00       	.word	0x0010	; ????
     6ea:	4a 01       	movw	r8, r20
     6ec:	10 00       	.word	0x0010	; ????
     6ee:	b8 01       	movw	r22, r16
     6f0:	10 00       	.word	0x0010	; ????
     6f2:	ee 01       	movw	r28, r28
     6f4:	08 00       	.word	0x0008	; ????
     6f6:	00 00       	nop
     6f8:	10 00       	.word	0x0010	; ????
     6fa:	4a 01       	movw	r8, r20
     6fc:	10 00       	.word	0x0010	; ????
     6fe:	9f 01       	movw	r18, r30
     700:	10 00       	.word	0x0010	; ????
     702:	ee 01       	movw	r28, r28
     704:	10 00       	.word	0x0010	; ????
     706:	0b 02       	muls	r16, r27
     708:	08 00       	.word	0x0008	; ????
     70a:	00 00       	nop
     70c:	10 00       	.word	0x0010	; ????
     70e:	4a 01       	movw	r8, r20
     710:	10 00       	.word	0x0010	; ????
     712:	93 02       	muls	r25, r19
     714:	10 00       	.word	0x0010	; ????
     716:	6e 02       	muls	r22, r30
     718:	10 00       	.word	0x0010	; ????
     71a:	93 02       	muls	r25, r19
     71c:	10 00       	.word	0x0010	; ????
     71e:	6e 02       	muls	r22, r30
     720:	10 00       	.word	0x0010	; ????
     722:	93 02       	muls	r25, r19
     724:	10 00       	.word	0x0010	; ????
     726:	ee 01       	movw	r28, r28
     728:	10 00       	.word	0x0010	; ????
     72a:	4b 02       	muls	r20, r27
     72c:	10 00       	.word	0x0010	; ????
     72e:	0b 02       	muls	r16, r27
     730:	10 00       	.word	0x0010	; ????
     732:	b8 01       	movw	r22, r16
     734:	08 00       	.word	0x0008	; ????
     736:	00 00       	nop
     738:	10 00       	.word	0x0010	; ????
     73a:	06 01       	movw	r0, r12
     73c:	10 00       	.word	0x0010	; ????
     73e:	4a 01       	movw	r8, r20
     740:	10 00       	.word	0x0010	; ????
     742:	b8 01       	movw	r22, r16
     744:	10 00       	.word	0x0010	; ????
     746:	ee 01       	movw	r28, r28
     748:	08 00       	.word	0x0008	; ????
     74a:	00 00       	nop
     74c:	10 00       	.word	0x0010	; ????
     74e:	4a 01       	movw	r8, r20
     750:	10 00       	.word	0x0010	; ????
     752:	0b 02       	muls	r16, r27
     754:	10 00       	.word	0x0010	; ????
     756:	ee 01       	movw	r28, r28
     758:	10 00       	.word	0x0010	; ????
     75a:	b8 01       	movw	r22, r16
     75c:	08 00       	.word	0x0008	; ????
     75e:	00 00       	nop
     760:	10 00       	.word	0x0010	; ????
     762:	00 00       	nop
     764:	10 00       	.word	0x0010	; ????
     766:	00 00       	nop
     768:	08 00       	.word	0x0008	; ????
     76a:	2a 02       	muls	r18, r26
     76c:	fc ff       	.word	0xfffc	; ????
     76e:	4b 02       	muls	r20, r27
     770:	04 00       	.word	0x0004	; ????
     772:	93 02       	muls	r25, r19
     774:	10 00       	.word	0x0010	; ????
     776:	ba 02       	muls	r27, r26
     778:	10 00       	.word	0x0010	; ????
     77a:	ba 02       	muls	r27, r26
     77c:	04 00       	.word	0x0004	; ????
     77e:	ba 02       	muls	r27, r26
     780:	08 00       	.word	0x0008	; ????
     782:	93 02       	muls	r25, r19
     784:	fc ff       	.word	0xfffc	; ????
     786:	4b 02       	muls	r20, r27
     788:	04 00       	.word	0x0004	; ????
     78a:	0b 02       	muls	r16, r27
     78c:	10 00       	.word	0x0010	; ????
     78e:	ee 01       	movw	r28, r28
     790:	10 00       	.word	0x0010	; ????
     792:	b8 01       	movw	r22, r16
     794:	04 00       	.word	0x0004	; ????
     796:	b8 01       	movw	r22, r16
     798:	08 00       	.word	0x0008	; ????
     79a:	b8 01       	movw	r22, r16
     79c:	08 00       	.word	0x0008	; ????
     79e:	0b 02       	muls	r16, r27
     7a0:	08 00       	.word	0x0008	; ????
     7a2:	ee 01       	movw	r28, r28
     7a4:	08 00       	.word	0x0008	; ????
     7a6:	b8 01       	movw	r22, r16
     7a8:	fc ff       	.word	0xfffc	; ????
     7aa:	2a 02       	muls	r18, r26
     7ac:	fc ff       	.word	0xfffc	; ????
     7ae:	4b 02       	muls	r20, r27
     7b0:	04 00       	.word	0x0004	; ????
     7b2:	93 02       	muls	r25, r19
     7b4:	10 00       	.word	0x0010	; ????
     7b6:	ba 02       	muls	r27, r26
     7b8:	10 00       	.word	0x0010	; ????
     7ba:	ba 02       	muls	r27, r26
     7bc:	04 00       	.word	0x0004	; ????
     7be:	ba 02       	muls	r27, r26
     7c0:	08 00       	.word	0x0008	; ????
     7c2:	ba 02       	muls	r27, r26
     7c4:	fc ff       	.word	0xfffc	; ????
     7c6:	6e 02       	muls	r22, r30
     7c8:	04 00       	.word	0x0004	; ????
     7ca:	4b 02       	muls	r20, r27
     7cc:	10 00       	.word	0x0010	; ????
     7ce:	0b 02       	muls	r16, r27
     7d0:	10 00       	.word	0x0010	; ????
     7d2:	d2 01       	movw	r26, r4
     7d4:	04 00       	.word	0x0004	; ????
     7d6:	b8 01       	movw	r22, r16
     7d8:	08 00       	.word	0x0008	; ????
     7da:	9f 01       	movw	r18, r30
     7dc:	04 00       	.word	0x0004	; ????
     7de:	88 01       	movw	r16, r16
     7e0:	08 00       	.word	0x0008	; ????
     7e2:	b8 01       	movw	r22, r16
     7e4:	fc ff       	.word	0xfffc	; ????
     7e6:	ee 01       	movw	r28, r28
     7e8:	04 00       	.word	0x0004	; ????
     7ea:	00 00       	nop
     7ec:	08 00       	.word	0x0008	; ????
     7ee:	dc 00       	.word	0x00dc	; ????
     7f0:	e0 ff       	sbrs	r30, 0
     7f2:	06 01       	movw	r0, r12
     7f4:	e0 ff       	sbrs	r30, 0
     7f6:	4a 01       	movw	r8, r20
     7f8:	e0 ff       	sbrs	r30, 0
     7fa:	b8 01       	movw	r22, r16
     7fc:	e0 ff       	sbrs	r30, 0
     7fe:	0b 02       	muls	r16, r27
     800:	e0 ff       	sbrs	r30, 0
     802:	93 02       	muls	r25, r19
     804:	e0 ff       	sbrs	r30, 0
     806:	4b 02       	muls	r20, r27
     808:	e0 ff       	sbrs	r30, 0
     80a:	0b 02       	muls	r16, r27
     80c:	e0 ff       	sbrs	r30, 0
     80e:	ee 01       	movw	r28, r28
     810:	e0 ff       	sbrs	r30, 0
     812:	b8 01       	movw	r22, r16
     814:	e0 ff       	sbrs	r30, 0
     816:	0b 02       	muls	r16, r27
     818:	e0 ff       	sbrs	r30, 0
     81a:	93 02       	muls	r25, r19
     81c:	e0 ff       	sbrs	r30, 0
     81e:	70 03       	mulsu	r23, r16
     820:	e0 ff       	sbrs	r30, 0
     822:	17 04       	cpc	r1, r7
     824:	e0 ff       	sbrs	r30, 0
     826:	27 05       	cpc	r18, r7
     828:	e0 ff       	sbrs	r30, 0
     82a:	97 04       	cpc	r9, r7
     82c:	e0 ff       	sbrs	r30, 0
     82e:	17 04       	cpc	r1, r7
     830:	e0 ff       	sbrs	r30, 0
     832:	dc 03       	fmulsu	r21, r20
     834:	e0 ff       	sbrs	r30, 0
     836:	b8 01       	movw	r22, r16
     838:	e0 ff       	sbrs	r30, 0
     83a:	0b 02       	muls	r16, r27
     83c:	e0 ff       	sbrs	r30, 0
     83e:	93 02       	muls	r25, r19
     840:	e0 ff       	sbrs	r30, 0
     842:	70 03       	mulsu	r23, r16
     844:	e0 ff       	sbrs	r30, 0
     846:	17 04       	cpc	r1, r7
     848:	e0 ff       	sbrs	r30, 0
     84a:	27 05       	cpc	r18, r7
     84c:	e0 ff       	sbrs	r30, 0
     84e:	97 04       	cpc	r9, r7
     850:	e0 ff       	sbrs	r30, 0
     852:	17 04       	cpc	r1, r7
     854:	e0 ff       	sbrs	r30, 0
     856:	dc 03       	fmulsu	r21, r20
     858:	e0 ff       	sbrs	r30, 0
     85a:	a4 03       	fmuls	r18, r20
     85c:	e0 ff       	sbrs	r30, 0
     85e:	70 03       	mulsu	r23, r16
     860:	e0 ff       	sbrs	r30, 0
     862:	3f 03       	fmul	r19, r23
     864:	e0 ff       	sbrs	r30, 0
     866:	10 03       	mulsu	r17, r16
     868:	e0 ff       	sbrs	r30, 0
     86a:	e4 02       	muls	r30, r20
     86c:	e0 ff       	sbrs	r30, 0
     86e:	ba 02       	muls	r27, r26
     870:	e0 ff       	sbrs	r30, 0
     872:	93 02       	muls	r25, r19
     874:	e0 ff       	sbrs	r30, 0
     876:	6e 02       	muls	r22, r30
     878:	e0 ff       	sbrs	r30, 0
     87a:	4b 02       	muls	r20, r27
     87c:	e0 ff       	sbrs	r30, 0
     87e:	2a 02       	muls	r18, r26
     880:	e0 ff       	sbrs	r30, 0
     882:	0b 02       	muls	r16, r27
     884:	e0 ff       	sbrs	r30, 0
     886:	ee 01       	movw	r28, r28
     888:	e0 ff       	sbrs	r30, 0
     88a:	d2 01       	movw	r26, r4
     88c:	e0 ff       	sbrs	r30, 0
     88e:	b8 01       	movw	r22, r16
     890:	e0 ff       	sbrs	r30, 0
     892:	9f 01       	movw	r18, r30
     894:	e0 ff       	sbrs	r30, 0
     896:	88 01       	movw	r16, r16
     898:	e0 ff       	sbrs	r30, 0
     89a:	72 01       	movw	r14, r4
     89c:	e0 ff       	sbrs	r30, 0
     89e:	5d 01       	movw	r10, r26
     8a0:	e0 ff       	sbrs	r30, 0
     8a2:	4a 01       	movw	r8, r20
     8a4:	10 00       	.word	0x0010	; ????
     8a6:	6e 02       	muls	r22, r30
     8a8:	10 00       	.word	0x0010	; ????
     8aa:	93 02       	muls	r25, r19
     8ac:	10 00       	.word	0x0010	; ????
     8ae:	ee 01       	movw	r28, r28
     8b0:	10 00       	.word	0x0010	; ????
     8b2:	4b 02       	muls	r20, r27
     8b4:	10 00       	.word	0x0010	; ????
     8b6:	0b 02       	muls	r16, r27
     8b8:	10 00       	.word	0x0010	; ????
     8ba:	b8 01       	movw	r22, r16
     8bc:	f8 ff       	.word	0xfff8	; ????
     8be:	06 01       	movw	r0, r12
     8c0:	10 00       	.word	0x0010	; ????
     8c2:	4a 01       	movw	r8, r20
     8c4:	10 00       	.word	0x0010	; ????
     8c6:	b8 01       	movw	r22, r16
     8c8:	10 00       	.word	0x0010	; ????
     8ca:	ee 01       	movw	r28, r28
     8cc:	f8 ff       	.word	0xfff8	; ????
     8ce:	4a 01       	movw	r8, r20
     8d0:	10 00       	.word	0x0010	; ????
     8d2:	9f 01       	movw	r18, r30
     8d4:	10 00       	.word	0x0010	; ????
     8d6:	ee 01       	movw	r28, r28
     8d8:	10 00       	.word	0x0010	; ????
     8da:	0b 02       	muls	r16, r27
     8dc:	08 00       	.word	0x0008	; ????
     8de:	00 00       	nop
     8e0:	10 00       	.word	0x0010	; ????
     8e2:	4a 01       	movw	r8, r20
     8e4:	10 00       	.word	0x0010	; ????
     8e6:	93 02       	muls	r25, r19
     8e8:	10 00       	.word	0x0010	; ????
     8ea:	6e 02       	muls	r22, r30
     8ec:	10 00       	.word	0x0010	; ????
     8ee:	93 02       	muls	r25, r19
     8f0:	10 00       	.word	0x0010	; ????
     8f2:	6e 02       	muls	r22, r30
     8f4:	10 00       	.word	0x0010	; ????
     8f6:	93 02       	muls	r25, r19
     8f8:	10 00       	.word	0x0010	; ????
     8fa:	ee 01       	movw	r28, r28
     8fc:	10 00       	.word	0x0010	; ????
     8fe:	4b 02       	muls	r20, r27
     900:	10 00       	.word	0x0010	; ????
     902:	0b 02       	muls	r16, r27
     904:	10 00       	.word	0x0010	; ????
     906:	b8 01       	movw	r22, r16
     908:	f8 ff       	.word	0xfff8	; ????
     90a:	06 01       	movw	r0, r12
     90c:	10 00       	.word	0x0010	; ????
     90e:	4a 01       	movw	r8, r20
     910:	10 00       	.word	0x0010	; ????
     912:	b8 01       	movw	r22, r16
     914:	10 00       	.word	0x0010	; ????
     916:	ee 01       	movw	r28, r28
     918:	f8 ff       	.word	0xfff8	; ????
     91a:	4a 01       	movw	r8, r20
     91c:	10 00       	.word	0x0010	; ????
     91e:	0b 02       	muls	r16, r27
     920:	10 00       	.word	0x0010	; ????
     922:	ee 01       	movw	r28, r28
     924:	10 00       	.word	0x0010	; ????
     926:	b8 01       	movw	r22, r16
     928:	f8 ff       	.word	0xfff8	; ????
     92a:	00 00       	nop
     92c:	f8 ff       	.word	0xfff8	; ????
     92e:	00 00       	nop
     930:	f8 ff       	.word	0xfff8	; ????
     932:	88 01       	movw	r16, r16
     934:	10 00       	.word	0x0010	; ????
     936:	ba 02       	muls	r27, r26
     938:	10 00       	.word	0x0010	; ????
     93a:	93 02       	muls	r25, r19
     93c:	10 00       	.word	0x0010	; ????
     93e:	4b 02       	muls	r20, r27
     940:	04 00       	.word	0x0004	; ????
     942:	00 00       	nop
     944:	08 00       	.word	0x0008	; ????
     946:	00 00       	nop
     948:	f8 ff       	.word	0xfff8	; ????
     94a:	4a 01       	movw	r8, r20
     94c:	10 00       	.word	0x0010	; ????
     94e:	4b 02       	muls	r20, r27
     950:	10 00       	.word	0x0010	; ????
     952:	0b 02       	muls	r16, r27
     954:	10 00       	.word	0x0010	; ????
     956:	ee 01       	movw	r28, r28
     958:	f8 ff       	.word	0xfff8	; ????
     95a:	4a 01       	movw	r8, r20
     95c:	10 00       	.word	0x0010	; ????
     95e:	93 02       	muls	r25, r19
     960:	08 00       	.word	0x0008	; ????
     962:	93 02       	muls	r25, r19
     964:	08 00       	.word	0x0008	; ????
     966:	27 05       	cpc	r18, r7
     968:	f8 ff       	.word	0xfff8	; ????
     96a:	6e 02       	muls	r22, r30
     96c:	10 00       	.word	0x0010	; ????
     96e:	93 02       	muls	r25, r19
     970:	10 00       	.word	0x0010	; ????
     972:	00 00       	nop
     974:	10 00       	.word	0x0010	; ????
     976:	00 00       	nop
     978:	10 00       	.word	0x0010	; ????
     97a:	6e 02       	muls	r22, r30
     97c:	10 00       	.word	0x0010	; ????
     97e:	93 02       	muls	r25, r19
     980:	10 00       	.word	0x0010	; ????
     982:	6e 02       	muls	r22, r30
     984:	10 00       	.word	0x0010	; ????
     986:	93 02       	muls	r25, r19
     988:	10 00       	.word	0x0010	; ????
     98a:	6e 02       	muls	r22, r30
     98c:	10 00       	.word	0x0010	; ????
     98e:	93 02       	muls	r25, r19
     990:	10 00       	.word	0x0010	; ????
     992:	ee 01       	movw	r28, r28
     994:	10 00       	.word	0x0010	; ????
     996:	4b 02       	muls	r20, r27
     998:	10 00       	.word	0x0010	; ????
     99a:	0b 02       	muls	r16, r27
     99c:	10 00       	.word	0x0010	; ????
     99e:	b8 01       	movw	r22, r16
     9a0:	f8 ff       	.word	0xfff8	; ????
     9a2:	06 01       	movw	r0, r12
     9a4:	10 00       	.word	0x0010	; ????
     9a6:	4a 01       	movw	r8, r20
     9a8:	10 00       	.word	0x0010	; ????
     9aa:	b8 01       	movw	r22, r16
     9ac:	10 00       	.word	0x0010	; ????
     9ae:	ee 01       	movw	r28, r28
     9b0:	f8 ff       	.word	0xfff8	; ????
     9b2:	4a 01       	movw	r8, r20
     9b4:	10 00       	.word	0x0010	; ????
     9b6:	9f 01       	movw	r18, r30
     9b8:	10 00       	.word	0x0010	; ????
     9ba:	ee 01       	movw	r28, r28
     9bc:	10 00       	.word	0x0010	; ????
     9be:	0b 02       	muls	r16, r27
     9c0:	08 00       	.word	0x0008	; ????
     9c2:	00 00       	nop
     9c4:	10 00       	.word	0x0010	; ????
     9c6:	4a 01       	movw	r8, r20
     9c8:	10 00       	.word	0x0010	; ????
     9ca:	93 02       	muls	r25, r19
     9cc:	10 00       	.word	0x0010	; ????
     9ce:	6e 02       	muls	r22, r30
     9d0:	10 00       	.word	0x0010	; ????
     9d2:	93 02       	muls	r25, r19
     9d4:	10 00       	.word	0x0010	; ????
     9d6:	6e 02       	muls	r22, r30
     9d8:	10 00       	.word	0x0010	; ????
     9da:	93 02       	muls	r25, r19
     9dc:	10 00       	.word	0x0010	; ????
     9de:	ee 01       	movw	r28, r28
     9e0:	10 00       	.word	0x0010	; ????
     9e2:	4b 02       	muls	r20, r27
     9e4:	10 00       	.word	0x0010	; ????
     9e6:	0b 02       	muls	r16, r27
     9e8:	10 00       	.word	0x0010	; ????
     9ea:	b8 01       	movw	r22, r16
     9ec:	f8 ff       	.word	0xfff8	; ????
     9ee:	06 01       	movw	r0, r12
     9f0:	10 00       	.word	0x0010	; ????
     9f2:	4a 01       	movw	r8, r20
     9f4:	10 00       	.word	0x0010	; ????
     9f6:	b8 01       	movw	r22, r16
     9f8:	10 00       	.word	0x0010	; ????
     9fa:	ee 01       	movw	r28, r28
     9fc:	f8 ff       	.word	0xfff8	; ????
     9fe:	4a 01       	movw	r8, r20
     a00:	10 00       	.word	0x0010	; ????
     a02:	0b 02       	muls	r16, r27
     a04:	10 00       	.word	0x0010	; ????
     a06:	ee 01       	movw	r28, r28
     a08:	10 00       	.word	0x0010	; ????
     a0a:	b8 01       	movw	r22, r16
     a0c:	fc ff       	.word	0xfffc	; ????

00000a0e <pcs_durations>:
     a0e:	7d 00 7d 00 fa 00 7d 00 7d 00 7d 00 7d 00 fa 00     }.}...}.}.}.}...
     a1e:	7d 00 7d 00 7d 00 7d 00 fa 00 7d 00 7d 00 7d 00     }.}.}.}...}.}.}.
     a2e:	7d 00 77 01 7d 00 7d 00 7d 00 fa 00 7d 00 7d 00     }.w.}.}.}...}.}.
     a3e:	7d 00 7d 00 fa 00 7d 00 7d 00 7d 00 7d 00 fa 00     }.}...}.}.}.}...
     a4e:	7d 00 7d 00 7d 00 7d 00 77 01 7d 00 7d 00 7d 00     }.}.}.}.w.}.}.}.
     a5e:	fa 00 7d 00 7d 00 7d 00 7d 00 fa 00 7d 00 7d 00     ..}.}.}.}...}.}.
     a6e:	7d 00 7d 00 fa 00 7d 00 7d 00 7d 00 7d 00 7d 00     }.}...}.}.}.}.}.
     a7e:	fa 00 7d 00 7d 00 7d 00 fa 00 7d 00 7d 00 fa 00     ..}.}.}...}.}...
     a8e:	7d 00 fa 00 7d 00 7d 00 7d 00 fa 00 7d 00 7d 00     }...}.}.}...}.}.
     a9e:	7d 00 7d 00 77 01 77 01 fa 00 7d 00 7d 00 7d 00     }.}.w.w...}.}.}.
     aae:	fa 00 7d 00 7d 00 7d 00 7d 00 fa 00 7d 00 7d 00     ..}.}.}.}...}.}.
     abe:	7d 00 7d 00 77 01 7d 00 7d 00 7d 00 fa 00 7d 00     }.}.w.}.}.}...}.
     ace:	7d 00 7d 00 7d 00 fa 00 7d 00 7d 00 7d 00 7d 00     }.}.}...}.}.}.}.
     ade:	fa 00 7d 00 7d 00 7d 00 7d 00 77 01 7d 00 7d 00     ..}.}.}.}.w.}.}.
     aee:	7d 00 fa 00 7d 00 7d 00 7d 00 7d 00 fa 00 7d 00     }...}.}.}.}...}.
     afe:	7d 00 7d 00 7d 00 fa 00 7d 00 7d 00 7d 00 7d 00     }.}.}...}.}.}.}.
     b0e:	7d 00 fa 00 7d 00 7d 00 7d 00 fa 00 7d 00 7d 00     }...}.}.}...}.}.
     b1e:	fa 00 7d 00 fa 00 7d 00 7d 00 7d 00 fa 00 7d 00     ..}...}.}.}...}.
     b2e:	7d 00 7d 00 7d 00 77 01 77 01 fa 00 7d 00 77 01     }.}.}.w.w...}.w.
     b3e:	fa 00 7d 00 77 01 7d 00 7d 00 7d 00 7d 00 7d 00     ..}.w.}.}.}.}.}.
     b4e:	7d 00 7d 00 7d 00 77 01 fa 00 7d 00 77 01 fa 00     }.}.}.w...}.w...
     b5e:	7d 00 77 01 7d 00 7d 00 7d 00 7d 00 7d 00 f4 01     }.w.}.}.}.}.}...
     b6e:	fa 00 7d 00 77 01 fa 00 7d 00 77 01 7d 00 7d 00     ..}.w...}.w.}.}.
     b7e:	7d 00 7d 00 7d 00 7d 00 7d 00 7d 00 77 01 fa 00     }.}.}.}.}.}.w...
     b8e:	7d 00 77 01 fa 00 7d 00 77 01 7d 00 7d 00 7d 00     }.w...}.w.}.}.}.
     b9e:	7d 00 7d 00 f4 01                                   }.}...

00000ba4 <pcs_notes>:
     ba4:	4a 01 88 01 b8 01 b8 01 00 00 b8 01 ee 01 0b 02     J...............
     bb4:	0b 02 00 00 0b 02 4b 02 ee 01 ee 01 00 00 b8 01     ......K.........
     bc4:	88 01 b8 01 00 00 4a 01 88 01 b8 01 b8 01 00 00     ......J.........
     bd4:	b8 01 ee 01 0b 02 0b 02 00 00 0b 02 4b 02 ee 01     ............K...
     be4:	ee 01 00 00 b8 01 88 01 b8 01 00 00 4a 01 88 01     ............J...
     bf4:	b8 01 b8 01 00 00 b8 01 0b 02 4b 02 4b 02 00 00     ..........K.K...
     c04:	4b 02 93 02 ba 02 ba 02 00 00 93 02 4b 02 93 02     K...........K...
     c14:	b8 01 00 00 b8 01 ee 01 0b 02 0b 02 00 00 4b 02     ..............K.
     c24:	93 02 b8 01 00 00 b8 01 0b 02 ee 01 ee 01 00 00     ................
     c34:	0b 02 b8 01 ee 01 00 00 b8 01 b8 01 b8 01 ee 01     ................
     c44:	0b 02 0b 02 00 00 0b 02 4b 02 ee 01 ee 01 00 00     ........K.......
     c54:	b8 01 88 01 b8 01 00 00 4a 01 88 01 b8 01 b8 01     ........J.......
     c64:	00 00 b8 01 ee 01 0b 02 0b 02 00 00 0b 02 4b 02     ..............K.
     c74:	ee 01 ee 01 00 00 b8 01 88 01 b8 01 00 00 4a 01     ..............J.
     c84:	88 01 b8 01 b8 01 00 00 b8 01 0b 02 4b 02 4b 02     ............K.K.
     c94:	00 00 4b 02 93 02 ba 02 ba 02 00 00 93 02 4b 02     ..K...........K.
     ca4:	93 02 b8 01 00 00 b8 01 ee 01 0b 02 0b 02 00 00     ................
     cb4:	4b 02 93 02 b8 01 00 00 b8 01 0b 02 ee 01 ee 01     K...............
     cc4:	00 00 0b 02 b8 01 ee 01 00 00 93 02 00 00 00 00     ................
     cd4:	ba 02 00 00 00 00 93 02 93 02 00 00 10 03 00 00     ................
     ce4:	93 02 4b 02 00 00 00 00 4b 02 00 00 00 00 0b 02     ..K.....K.......
     cf4:	00 00 00 00 ee 01 0b 02 00 00 ee 01 00 00 b8 01     ................
     d04:	93 02 00 00 00 00 ba 02 00 00 00 00 93 02 93 02     ................
     d14:	00 00 10 03 00 00 93 02 4b 02 00 00 00 00 4b 02     ........K.....K.
     d24:	00 00 00 00 0b 02 00 00 00 00 ee 01 0b 02 00 00     ................
     d34:	ee 01 00 00 b8 01                                   ......

00000d3a <turtis_melody>:
     d3a:	93 02 04 00 ee 01 08 00 0b 02 08 00 4b 02 04 00     ............K...
     d4a:	0b 02 08 00 ee 01 08 00 b8 01 04 00 b8 01 08 00     ................
     d5a:	0b 02 08 00 93 02 04 00 4b 02 08 00 0b 02 08 00     ........K.......
     d6a:	ee 01 fc ff 0b 02 08 00 4b 02 04 00 93 02 04 00     ........K.......
     d7a:	0b 02 04 00 b8 01 04 00 b8 01 08 00 b8 01 04 00     ................
     d8a:	ee 01 08 00 0b 02 08 00 4b 02 fc ff ba 02 08 00     ........K.......
     d9a:	70 03 04 00 10 03 08 00 ba 02 08 00 93 02 fc ff     p...............
     daa:	0b 02 08 00 93 02 04 00 4b 02 08 00 0b 02 08 00     ........K.......
     dba:	ee 01 04 00 ee 01 08 00 0b 02 08 00 4b 02 04 00     ............K...
     dca:	93 02 04 00 0b 02 04 00 b8 01 04 00 b8 01 04 00     ................
     dda:	00 00 04 00 93 02 04 00 ee 01 08 00 0b 02 08 00     ................
     dea:	4b 02 04 00 0b 02 08 00 ee 01 08 00 b8 01 04 00     K...............
     dfa:	b8 01 08 00 0b 02 08 00 93 02 04 00 4b 02 08 00     ............K...
     e0a:	0b 02 08 00 ee 01 fc ff 0b 02 08 00 4b 02 04 00     ............K...
     e1a:	93 02 04 00 0b 02 04 00 b8 01 04 00 b8 01 08 00     ................
     e2a:	b8 01 04 00 ee 01 08 00 0b 02 08 00 4b 02 fc ff     ............K...
     e3a:	ba 02 08 00 70 03 04 00 10 03 08 00 ba 02 08 00     ....p...........
     e4a:	93 02 fc ff 0b 02 08 00 93 02 04 00 4b 02 08 00     ............K...
     e5a:	0b 02 08 00 ee 01 04 00 ee 01 08 00 0b 02 08 00     ................
     e6a:	4b 02 04 00 93 02 04 00 0b 02 04 00 b8 01 04 00     K...............
     e7a:	b8 01 04 00 00 00 04 00 93 02 02 00 0b 02 02 00     ................
     e8a:	4b 02 02 00 ee 01 02 00 0b 02 02 00 b8 01 02 00     K...............
     e9a:	9f 01 02 00 ee 01 04 00 00 00 08 00 93 02 02 00     ................
     eaa:	0b 02 02 00 4b 02 02 00 ee 01 02 00 0b 02 04 00     ....K...........
     eba:	93 02 04 00 70 03 02 00 3f 03 02 00                 ....p...?...

00000ec6 <pink_melody>:
     ec6:	00 00 02 00 00 00 04 00 00 00 08 00 37 01 08 00     ............7...
     ed6:	4a 01 fc ff 00 00 08 00 72 01 08 00 88 01 fc ff     J.......r.......
     ee6:	00 00 08 00 37 01 08 00 4a 01 f8 ff 72 01 08 00     ....7...J...r...
     ef6:	88 01 f8 ff 0b 02 08 00 ee 01 f8 ff 4a 01 08 00     ............J...
     f06:	88 01 f8 ff ee 01 08 00 d2 01 02 00 b8 01 f0 ff     ................
     f16:	88 01 f0 ff 4a 01 f0 ff 26 01 f0 ff 4a 01 02 00     ....J...&...J...
     f26:	00 00 04 00 00 00 08 00 37 01 04 00 4a 01 fc ff     ........7...J...
     f36:	00 00 08 00 72 01 08 00 88 01 fc ff 00 00 08 00     ....r...........
     f46:	37 01 08 00 4a 01 f8 ff 72 01 08 00 88 01 f8 ff     7...J...r.......
     f56:	0b 02 08 00 ee 01 f8 ff 88 01 08 00 ee 01 f8 ff     ................
     f66:	93 02 08 00 6e 02 01 00 4b 02 02 00 00 00 04 00     ....n...K.......
     f76:	00 00 08 00 37 01 08 00 4a 01 fc ff 00 00 08 00     ....7...J.......
     f86:	72 01 08 00 88 01 fc ff 00 00 08 00 37 01 08 00     r...........7...
     f96:	4a 01 f8 ff 72 01 08 00 88 01 f8 ff 0b 02 08 00     J...r...........
     fa6:	ee 01 f8 ff 4a 01 08 00 88 01 f8 ff ee 01 08 00     ....J...........
     fb6:	d2 01 02 00 b8 01 f0 ff 88 01 f0 ff 4a 01 f0 ff     ............J...
     fc6:	26 01 f0 ff 4a 01 fc ff 00 00 04 00 00 00 04 00     &...J...........
     fd6:	93 02 f8 ff 4b 02 08 00 ee 01 f8 ff b8 01 08 00     ....K...........
     fe6:	88 01 f8 ff 4a 01 f8 ff d2 01 10 00 b8 01 f8 ff     ....J...........
     ff6:	d2 01 10 00 b8 01 f8 ff d2 01 10 00 b8 01 f8 ff     ................
    1006:	d2 01 10 00 b8 01 f8 ff 88 01 f0 ff 4a 01 f0 ff     ............J...
    1016:	26 01 f0 ff 4a 01 10 00 4a 01 10 00 4a 01 02 00     &...J...J...J...

00001026 <got_melody>:
    1026:	88 01 08 00 06 01 08 00 37 01 10 00 5d 01 10 00     ........7...]...
    1036:	88 01 08 00 06 01 08 00 37 01 10 00 5d 01 10 00     ........7...]...
    1046:	88 01 08 00 06 01 08 00 37 01 10 00 5d 01 10 00     ........7...]...
    1056:	88 01 08 00 06 01 08 00 37 01 10 00 5d 01 10 00     ........7...]...
    1066:	88 01 08 00 06 01 08 00 4a 01 10 00 5d 01 10 00     ........J...]...
    1076:	88 01 08 00 06 01 08 00 4a 01 10 00 5d 01 10 00     ........J...]...
    1086:	88 01 08 00 06 01 08 00 4a 01 10 00 5d 01 10 00     ........J...]...
    1096:	88 01 08 00 06 01 08 00 4a 01 10 00 5d 01 10 00     ........J...]...
    10a6:	88 01 fc ff 06 01 fc ff 37 01 10 00 5d 01 10 00     ........7...]...
    10b6:	88 01 04 00 06 01 04 00 37 01 10 00 5d 01 10 00     ........7...]...
    10c6:	26 01 ff ff 5d 01 fc ff e9 00 fc ff 37 01 10 00     &...].......7...
    10d6:	26 01 10 00 5d 01 04 00 e9 00 fc ff 37 01 10 00     &...].......7...
    10e6:	26 01 10 00 06 01 ff ff 88 01 fc ff 06 01 fc ff     &...............
    10f6:	37 01 10 00 5d 01 10 00 88 01 04 00 06 01 04 00     7...]...........
    1106:	37 01 10 00 5d 01 10 00 26 01 ff ff 5d 01 fc ff     7...]...&...]...
    1116:	e9 00 fc ff 37 01 10 00 26 01 10 00 5d 01 04 00     ....7...&...]...
    1126:	e9 00 fc ff 37 01 10 00 26 01 10 00 06 01 ff ff     ....7...&.......
    1136:	88 01 fc ff 06 01 fc ff 37 01 10 00 5d 01 10 00     ........7...]...
    1146:	88 01 04 00 06 01 04 00 37 01 10 00 5d 01 10 00     ........7...]...
    1156:	26 01 fe ff 5d 01 fc ff e9 00 fc ff 26 01 f8 ff     &...].......&...
    1166:	37 01 f8 ff 26 01 f8 ff e9 00 f8 ff 06 01 ff ff     7...&...........
    1176:	0b 02 fe ff d2 01 fe ff 06 01 fe ff 88 01 fe ff     ................
    1186:	37 01 fe ff 37 01 fc ff 5d 01 fc ff 88 01 ff ff     7...7...].......
    1196:	0b 02 fe ff d2 01 fe ff 06 01 fe ff 88 01 fe ff     ................
    11a6:	37 01 fe ff 37 01 fc ff 26 01 fc ff 0b 02 08 00     7...7...&.......
    11b6:	88 01 08 00 9f 01 10 00 d2 01 10 00 0b 02 08 00     ................
    11c6:	88 01 08 00 9f 01 10 00 d2 01 10 00 0b 02 08 00     ................
    11d6:	88 01 08 00 9f 01 10 00 d2 01 10 00 0b 02 08 00     ................
    11e6:	88 01 08 00 9f 01 10 00 d2 01 10 00 00 00 04 00     ................
    11f6:	3f 03 10 00 a4 03 10 00 17 04 08 00 10 03 08 00     ?...............
    1206:	3f 03 10 00 a4 03 10 00 17 04 08 00 10 03 10 00     ?...............
    1216:	3f 03 10 00 a4 03 10 00 17 04 08 00 10 03 08 00     ?...............
    1226:	3f 03 10 00 a4 03 10 00                             ?.......

0000122e <Days_month>:
    122e:	1f 1c 1f 1e 1f 1e 1f 1f 1e 1f 1e 1f                 ............

0000123a <__ctors_end>:
    123a:	11 24       	eor	r1, r1
    123c:	1f be       	out	0x3f, r1	; 63
    123e:	cf ef       	ldi	r28, 0xFF	; 255
    1240:	d8 e0       	ldi	r29, 0x08	; 8
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	cd bf       	out	0x3d, r28	; 61

00001246 <__do_copy_data>:
    1246:	16 e0       	ldi	r17, 0x06	; 6
    1248:	a0 e0       	ldi	r26, 0x00	; 0
    124a:	b1 e0       	ldi	r27, 0x01	; 1
    124c:	e2 ec       	ldi	r30, 0xC2	; 194
    124e:	fd e4       	ldi	r31, 0x4D	; 77
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <__do_copy_data+0x10>
    1252:	05 90       	lpm	r0, Z+
    1254:	0d 92       	st	X+, r0
    1256:	a8 3b       	cpi	r26, 0xB8	; 184
    1258:	b1 07       	cpc	r27, r17
    125a:	d9 f7       	brne	.-10     	; 0x1252 <__do_copy_data+0xc>

0000125c <__do_clear_bss>:
    125c:	26 e0       	ldi	r18, 0x06	; 6
    125e:	a8 eb       	ldi	r26, 0xB8	; 184
    1260:	b6 e0       	ldi	r27, 0x06	; 6
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <.do_clear_bss_start>

00001264 <.do_clear_bss_loop>:
    1264:	1d 92       	st	X+, r1

00001266 <.do_clear_bss_start>:
    1266:	a4 3c       	cpi	r26, 0xC4	; 196
    1268:	b2 07       	cpc	r27, r18
    126a:	e1 f7       	brne	.-8      	; 0x1264 <.do_clear_bss_loop>
    126c:	0e 94 c7 20 	call	0x418e	; 0x418e <main>
    1270:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <_exit>

00001274 <__bad_interrupt>:
    1274:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001278 <BCD_2_DEC>:
}

//Transforming binary coded value to decimal

static uint8_t BCD_2_DEC(uint8_t val) {
	return val - 6 * (val >> 4);
    1278:	98 2f       	mov	r25, r24
    127a:	92 95       	swap	r25
    127c:	9f 70       	andi	r25, 0x0F	; 15
    127e:	29 2f       	mov	r18, r25
    1280:	22 0f       	add	r18, r18
    1282:	92 0f       	add	r25, r18
    1284:	29 2f       	mov	r18, r25
    1286:	22 0f       	add	r18, r18
}
    1288:	82 1b       	sub	r24, r18
    128a:	08 95       	ret

0000128c <Date2Day>:
const uint8_t Days_month [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

//get number of days 

static uint16_t Date2Day(uint8_t y, uint8_t m, uint8_t d) {
	uint16_t days = d;
    128c:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 1; i < m; ++i)
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	08 c0       	rjmp	.+16     	; 0x12a2 <Date2Day+0x16>
		days += pgm_read_byte(Days_month + i - 1);
    1292:	e9 2f       	mov	r30, r25
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	e3 5d       	subi	r30, 0xD3	; 211
    1298:	fd 4e       	sbci	r31, 0xED	; 237
    129a:	e4 91       	lpm	r30, Z
    129c:	4e 0f       	add	r20, r30
    129e:	51 1d       	adc	r21, r1

//get number of days 

static uint16_t Date2Day(uint8_t y, uint8_t m, uint8_t d) {
	uint16_t days = d;
	for (uint8_t i = 1; i < m; ++i)
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	96 17       	cp	r25, r22
    12a4:	b0 f3       	brcs	.-20     	; 0x1292 <Date2Day+0x6>
		days += pgm_read_byte(Days_month + i - 1);
	if (m > 2 && y % 4 == 0)
    12a6:	63 30       	cpi	r22, 0x03	; 3
    12a8:	28 f0       	brcs	.+10     	; 0x12b4 <Date2Day+0x28>
    12aa:	98 2f       	mov	r25, r24
    12ac:	93 70       	andi	r25, 0x03	; 3
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <Date2Day+0x28>
		++days;
    12b0:	4f 5f       	subi	r20, 0xFF	; 255
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
	return days + 365 * y + (y + 3) / 4 - 1;
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	6d e6       	ldi	r22, 0x6D	; 109
    12ba:	71 e0       	ldi	r23, 0x01	; 1
    12bc:	26 9f       	mul	r18, r22
    12be:	c0 01       	movw	r24, r0
    12c0:	27 9f       	mul	r18, r23
    12c2:	90 0d       	add	r25, r0
    12c4:	36 9f       	mul	r19, r22
    12c6:	90 0d       	add	r25, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	48 0f       	add	r20, r24
    12cc:	59 1f       	adc	r21, r25
    12ce:	2d 5f       	subi	r18, 0xFD	; 253
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	c9 01       	movw	r24, r18
    12d4:	99 23       	and	r25, r25
    12d6:	0c f4       	brge	.+2      	; 0x12da <Date2Day+0x4e>
    12d8:	03 96       	adiw	r24, 0x03	; 3
    12da:	95 95       	asr	r25
    12dc:	87 95       	ror	r24
    12de:	95 95       	asr	r25
    12e0:	87 95       	ror	r24
    12e2:	84 0f       	add	r24, r20
    12e4:	95 1f       	adc	r25, r21

}
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	08 95       	ret

000012ea <LCD_Command>:
			/* Define Enable signal pin */


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0b11000011) | ((cmnd & 0xF0)>>2); /* sending upper nibble */
    12ea:	45 b1       	in	r20, 0x05	; 5
    12ec:	98 2f       	mov	r25, r24
    12ee:	90 7f       	andi	r25, 0xF0	; 240
    12f0:	29 2f       	mov	r18, r25
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	35 95       	asr	r19
    12f6:	27 95       	ror	r18
    12f8:	35 95       	asr	r19
    12fa:	27 95       	ror	r18
    12fc:	94 2f       	mov	r25, r20
    12fe:	93 7c       	andi	r25, 0xC3	; 195
    1300:	29 2b       	or	r18, r25
    1302:	25 b9       	out	0x05, r18	; 5
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
    1304:	95 b1       	in	r25, 0x05	; 5
    1306:	9e 7f       	andi	r25, 0xFE	; 254
    1308:	95 b9       	out	0x05, r25	; 5
	LCD_Port |= (1<<EN);		/* Enable pulse */
    130a:	95 b1       	in	r25, 0x05	; 5
    130c:	92 60       	ori	r25, 0x02	; 2
    130e:	95 b9       	out	0x05, r25	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1310:	25 e0       	ldi	r18, 0x05	; 5
    1312:	92 2f       	mov	r25, r18
    1314:	9a 95       	dec	r25
    1316:	f1 f7       	brne	.-4      	; 0x1314 <LCD_Command+0x2a>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1318:	95 b1       	in	r25, 0x05	; 5
    131a:	9d 7f       	andi	r25, 0xFD	; 253
    131c:	95 b9       	out	0x05, r25	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    131e:	e0 e2       	ldi	r30, 0x20	; 32
    1320:	f3 e0       	ldi	r31, 0x03	; 3
    1322:	31 97       	sbiw	r30, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <LCD_Command+0x38>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0b11000011) | ((cmnd & 0x0F)<<2);  /* sending lower nibble */
    1326:	35 b1       	in	r19, 0x05	; 5
    1328:	8f 70       	andi	r24, 0x0F	; 15
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	93 2f       	mov	r25, r19
    1336:	93 7c       	andi	r25, 0xC3	; 195
    1338:	89 2b       	or	r24, r25
    133a:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
    133c:	85 b1       	in	r24, 0x05	; 5
    133e:	82 60       	ori	r24, 0x02	; 2
    1340:	85 b9       	out	0x05, r24	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1342:	82 2f       	mov	r24, r18
    1344:	8a 95       	dec	r24
    1346:	f1 f7       	brne	.-4      	; 0x1344 <LCD_Command+0x5a>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1348:	85 b1       	in	r24, 0x05	; 5
    134a:	8d 7f       	andi	r24, 0xFD	; 253
    134c:	85 b9       	out	0x05, r24	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    134e:	80 e4       	ldi	r24, 0x40	; 64
    1350:	9f e1       	ldi	r25, 0x1F	; 31
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	f1 f7       	brne	.-4      	; 0x1352 <LCD_Command+0x68>
    1356:	08 95       	ret

00001358 <LCD_Char>:
}


void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0b11000011) | ((data & 0xF0)>>2); /* sending upper nibble */
    1358:	45 b1       	in	r20, 0x05	; 5
    135a:	98 2f       	mov	r25, r24
    135c:	90 7f       	andi	r25, 0xF0	; 240
    135e:	29 2f       	mov	r18, r25
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	35 95       	asr	r19
    1364:	27 95       	ror	r18
    1366:	35 95       	asr	r19
    1368:	27 95       	ror	r18
    136a:	94 2f       	mov	r25, r20
    136c:	93 7c       	andi	r25, 0xC3	; 195
    136e:	29 2b       	or	r18, r25
    1370:	25 b9       	out	0x05, r18	; 5
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    1372:	95 b1       	in	r25, 0x05	; 5
    1374:	91 60       	ori	r25, 0x01	; 1
    1376:	95 b9       	out	0x05, r25	; 5
	LCD_Port|= (1<<EN);
    1378:	95 b1       	in	r25, 0x05	; 5
    137a:	92 60       	ori	r25, 0x02	; 2
    137c:	95 b9       	out	0x05, r25	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    137e:	25 e0       	ldi	r18, 0x05	; 5
    1380:	92 2f       	mov	r25, r18
    1382:	9a 95       	dec	r25
    1384:	f1 f7       	brne	.-4      	; 0x1382 <LCD_Char+0x2a>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1386:	95 b1       	in	r25, 0x05	; 5
    1388:	9d 7f       	andi	r25, 0xFD	; 253
    138a:	95 b9       	out	0x05, r25	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    138c:	e0 e2       	ldi	r30, 0x20	; 32
    138e:	f3 e0       	ldi	r31, 0x03	; 3
    1390:	31 97       	sbiw	r30, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_Char+0x38>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0b11000011) | ((data & 0x0F)<<2); /* sending lower nibble */
    1394:	35 b1       	in	r19, 0x05	; 5
    1396:	8f 70       	andi	r24, 0x0F	; 15
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	93 2f       	mov	r25, r19
    13a4:	93 7c       	andi	r25, 0xC3	; 195
    13a6:	89 2b       	or	r24, r25
    13a8:	85 b9       	out	0x05, r24	; 5
	LCD_Port |= (1<<EN);
    13aa:	85 b1       	in	r24, 0x05	; 5
    13ac:	82 60       	ori	r24, 0x02	; 2
    13ae:	85 b9       	out	0x05, r24	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13b0:	82 2f       	mov	r24, r18
    13b2:	8a 95       	dec	r24
    13b4:	f1 f7       	brne	.-4      	; 0x13b2 <LCD_Char+0x5a>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    13b6:	85 b1       	in	r24, 0x05	; 5
    13b8:	8d 7f       	andi	r24, 0xFD	; 253
    13ba:	85 b9       	out	0x05, r24	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13bc:	80 e4       	ldi	r24, 0x40	; 64
    13be:	9f e1       	ldi	r25, 0x1F	; 31
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <LCD_Char+0x68>
    13c4:	08 95       	ret

000013c6 <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	84 b9       	out	0x04, r24	; 4
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	05 c0       	rjmp	.+10     	; 0x13da <LCD_Init+0x14>
    13d0:	e0 e9       	ldi	r30, 0x90	; 144
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	31 97       	sbiw	r30, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <LCD_Init+0xe>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	c9 f7       	brne	.-14     	; 0x13d0 <LCD_Init+0xa>
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    13de:	82 e0       	ldi	r24, 0x02	; 2
    13e0:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    13e4:	88 e2       	ldi	r24, 0x28	; 40
    13e6:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    13ea:	8c e0       	ldi	r24, 0x0C	; 12
    13ec:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    13f0:	86 e0       	ldi	r24, 0x06	; 6
    13f2:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
    13f6:	80 e4       	ldi	r24, 0x40	; 64
    13f8:	9f e1       	ldi	r25, 0x1F	; 31
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <LCD_Init+0x34>
    13fe:	08 95       	ret

00001400 <LCD_String>:
	_delay_ms(2);
}


void LCD_String (char *str)		/* Send string to LCD function */
{
    1400:	0f 93       	push	r16
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    140a:	c0 e0       	ldi	r28, 0x00	; 0
    140c:	d0 e0       	ldi	r29, 0x00	; 0
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
    1410:	0e 94 ac 09 	call	0x1358	; 0x1358 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    1414:	21 96       	adiw	r28, 0x01	; 1
    1416:	f8 01       	movw	r30, r16
    1418:	ec 0f       	add	r30, r28
    141a:	fd 1f       	adc	r31, r29
    141c:	80 81       	ld	r24, Z
    141e:	81 11       	cpse	r24, r1
    1420:	f7 cf       	rjmp	.-18     	; 0x1410 <LCD_String+0x10>
	{
		LCD_Char (str[i]);
	}
}
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	08 95       	ret

0000142c <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
    1432:	81 11       	cpse	r24, r1
    1434:	08 c0       	rjmp	.+16     	; 0x1446 <LCD_String_xy+0x1a>
    1436:	60 31       	cpi	r22, 0x10	; 16
    1438:	30 f4       	brcc	.+12     	; 0x1446 <LCD_String_xy+0x1a>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    143a:	86 2f       	mov	r24, r22
    143c:	8f 70       	andi	r24, 0x0F	; 15
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
    1444:	09 c0       	rjmp	.+18     	; 0x1458 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	39 f4       	brne	.+14     	; 0x1458 <LCD_String_xy+0x2c>
    144a:	60 31       	cpi	r22, 0x10	; 16
    144c:	28 f4       	brcc	.+10     	; 0x1458 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    144e:	86 2f       	mov	r24, r22
    1450:	8f 70       	andi	r24, 0x0F	; 15
    1452:	80 6c       	ori	r24, 0xC0	; 192
    1454:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    1458:	ce 01       	movw	r24, r28
    145a:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	//_delay_ms(2);		/* Clear display */
	LCD_Command (0x80);		/* Cursor at home position */
    146a:	80 e8       	ldi	r24, 0x80	; 128
    146c:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
    1470:	08 95       	ret

00001472 <update_Tone_Menu>:
int Alarm_tone =1;
//bool sub_menu_action = true;


void update_Tone_Menu(){
	switch(Tone_Menu){
    1472:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <Tone_Menu>
    1476:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <Tone_Menu+0x1>
    147a:	e7 30       	cpi	r30, 0x07	; 7
    147c:	f1 05       	cpc	r31, r1
    147e:	08 f0       	brcs	.+2      	; 0x1482 <update_Tone_Menu+0x10>
    1480:	61 c0       	rjmp	.+194    	; 0x1544 <update_Tone_Menu+0xd2>
    1482:	ec 5c       	subi	r30, 0xCC	; 204
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <__tablejump2__>
		case 0:
		Tone_Menu = 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <Tone_Menu+0x1>
    1492:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Tone_Menu>
		break;
    1496:	08 95       	ret
		case 1:							//initial display state
		LCD_Init();
    1498:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    149c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String(">> Pirates Theme");
    14a0:	86 e4       	ldi	r24, 0x46	; 70
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    14a8:	80 ec       	ldi	r24, 0xC0	; 192
    14aa:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String("   Game Thrones");
    14ae:	87 e5       	ldi	r24, 0x57	; 87
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    14b6:	08 95       	ret
		case 2:							//2nd display state
		LCD_Init();
    14b8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    14bc:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("   Pirates Theme");
    14c0:	87 e6       	ldi	r24, 0x67	; 103
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    14c8:	80 ec       	ldi	r24, 0xC0	; 192
    14ca:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(">> Game Thrones");
    14ce:	88 e7       	ldi	r24, 0x78	; 120
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    14d6:	08 95       	ret
		case 3:							//Third display state
		LCD_Init();
    14d8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    14dc:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String(">> Fur Elise");
    14e0:	88 e8       	ldi	r24, 0x88	; 136
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    14e8:	80 ec       	ldi	r24, 0xC0	; 192
    14ea:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String("   P.Panther");
    14ee:	85 e9       	ldi	r24, 0x95	; 149
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    14f6:	08 95       	ret
		case 4:							//fourth display state
		LCD_Init();
    14f8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    14fc:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("   Fur Elise");
    1500:	82 ea       	ldi	r24, 0xA2	; 162
    1502:	91 e0       	ldi	r25, 0x01	; 1
    1504:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    1508:	80 ec       	ldi	r24, 0xC0	; 192
    150a:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(">> P.Panther");
    150e:	8f ea       	ldi	r24, 0xAF	; 175
    1510:	91 e0       	ldi	r25, 0x01	; 1
    1512:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    1516:	08 95       	ret
		case 5:
		LCD_Init();
    1518:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    151c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("   P.Panther");
    1520:	85 e9       	ldi	r24, 0x95	; 149
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);                 //5th display
    1528:	80 ec       	ldi	r24, 0xC0	; 192
    152a:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(">> Turtis");  
    152e:	8c eb       	ldi	r24, 0xBC	; 188
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    1536:	08 95       	ret
		case 6:
		Alarm_Menu = 4;
    1538:	84 e0       	ldi	r24, 0x04	; 4
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <Alarm_Menu+0x1>
    1540:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Alarm_Menu>
    1544:	08 95       	ret

00001546 <LCD_Print>:


#ifndef STRING_H_
#define STRING_H_

void LCD_Print(int year,int month, int day , int hour ,int minute ,int second){
    1546:	8f 92       	push	r8
    1548:	9f 92       	push	r9
    154a:	af 92       	push	r10
    154c:	bf 92       	push	r11
    154e:	cf 92       	push	r12
    1550:	df 92       	push	r13
    1552:	ef 92       	push	r14
    1554:	ff 92       	push	r15
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	a8 97       	sbiw	r28, 0x28	; 40
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	6b 01       	movw	r12, r22
    1570:	5a 01       	movw	r10, r20
int year1 = 2000 + year ;
    1572:	80 53       	subi	r24, 0x30	; 48
    1574:	98 4f       	sbci	r25, 0xF8	; 248
    1576:	4c 01       	movw	r8, r24
char A[20];
char B[20];
char C[20];

if (minute<10 && second <10 && hour<10){
    1578:	0a 30       	cpi	r16, 0x0A	; 10
    157a:	11 05       	cpc	r17, r1
    157c:	ec f4       	brge	.+58     	; 0x15b8 <LCD_Print+0x72>
    157e:	8a e0       	ldi	r24, 0x0A	; 10
    1580:	e8 16       	cp	r14, r24
    1582:	f1 04       	cpc	r15, r1
    1584:	cc f4       	brge	.+50     	; 0x15b8 <LCD_Print+0x72>
    1586:	2a 30       	cpi	r18, 0x0A	; 10
    1588:	31 05       	cpc	r19, r1
    158a:	b4 f4       	brge	.+44     	; 0x15b8 <LCD_Print+0x72>
	sprintf(A,"TIME: 0%d:0%d:0%d  ",hour,minute,second);
    158c:	ff 92       	push	r15
    158e:	ef 92       	push	r14
    1590:	1f 93       	push	r17
    1592:	0f 93       	push	r16
    1594:	3f 93       	push	r19
    1596:	2f 93       	push	r18
    1598:	86 ec       	ldi	r24, 0xC6	; 198
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	9f 93       	push	r25
    159e:	8f 93       	push	r24
    15a0:	ce 01       	movw	r24, r28
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	9f 93       	push	r25
    15a6:	8f 93       	push	r24
    15a8:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
int year1 = 2000 + year ;
char A[20];
char B[20];
char C[20];

if (minute<10 && second <10 && hour<10){
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	b7 c0       	rjmp	.+366    	; 0x1726 <LCD_Print+0x1e0>
	sprintf(A,"TIME: 0%d:0%d:0%d  ",hour,minute,second);
}else if (hour<10 && minute<10){
    15b8:	2a 30       	cpi	r18, 0x0A	; 10
    15ba:	31 05       	cpc	r19, r1
    15bc:	cc f4       	brge	.+50     	; 0x15f0 <LCD_Print+0xaa>
    15be:	0a 30       	cpi	r16, 0x0A	; 10
    15c0:	11 05       	cpc	r17, r1
    15c2:	b4 f4       	brge	.+44     	; 0x15f0 <LCD_Print+0xaa>
	sprintf(A,"TIME: 0%d:0%d:%d  ",hour,minute,second);
    15c4:	ff 92       	push	r15
    15c6:	ef 92       	push	r14
    15c8:	1f 93       	push	r17
    15ca:	0f 93       	push	r16
    15cc:	3f 93       	push	r19
    15ce:	2f 93       	push	r18
    15d0:	8a ed       	ldi	r24, 0xDA	; 218
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	9f 93       	push	r25
    15d6:	8f 93       	push	r24
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	9f 93       	push	r25
    15de:	8f 93       	push	r24
    15e0:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
char B[20];
char C[20];

if (minute<10 && second <10 && hour<10){
	sprintf(A,"TIME: 0%d:0%d:0%d  ",hour,minute,second);
}else if (hour<10 && minute<10){
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	9b c0       	rjmp	.+310    	; 0x1726 <LCD_Print+0x1e0>
	sprintf(A,"TIME: 0%d:0%d:%d  ",hour,minute,second);
}else if (hour<10 && second<10){
    15f0:	2a 30       	cpi	r18, 0x0A	; 10
    15f2:	31 05       	cpc	r19, r1
    15f4:	d4 f4       	brge	.+52     	; 0x162a <LCD_Print+0xe4>
    15f6:	9a e0       	ldi	r25, 0x0A	; 10
    15f8:	e9 16       	cp	r14, r25
    15fa:	f1 04       	cpc	r15, r1
    15fc:	b4 f4       	brge	.+44     	; 0x162a <LCD_Print+0xe4>
	sprintf(A,"TIME: 0%d:%d:0%d  ",hour,minute,second);
    15fe:	ff 92       	push	r15
    1600:	ef 92       	push	r14
    1602:	1f 93       	push	r17
    1604:	0f 93       	push	r16
    1606:	3f 93       	push	r19
    1608:	2f 93       	push	r18
    160a:	8d ee       	ldi	r24, 0xED	; 237
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	9f 93       	push	r25
    1610:	8f 93       	push	r24
    1612:	ce 01       	movw	r24, r28
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	9f 93       	push	r25
    1618:	8f 93       	push	r24
    161a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>

if (minute<10 && second <10 && hour<10){
	sprintf(A,"TIME: 0%d:0%d:0%d  ",hour,minute,second);
}else if (hour<10 && minute<10){
	sprintf(A,"TIME: 0%d:0%d:%d  ",hour,minute,second);
}else if (hour<10 && second<10){
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	7e c0       	rjmp	.+252    	; 0x1726 <LCD_Print+0x1e0>
	sprintf(A,"TIME: 0%d:%d:0%d  ",hour,minute,second);
}else if (minute<10 && second<10){
    162a:	0a 30       	cpi	r16, 0x0A	; 10
    162c:	11 05       	cpc	r17, r1
    162e:	d4 f4       	brge	.+52     	; 0x1664 <LCD_Print+0x11e>
    1630:	9a e0       	ldi	r25, 0x0A	; 10
    1632:	e9 16       	cp	r14, r25
    1634:	f1 04       	cpc	r15, r1
    1636:	b4 f4       	brge	.+44     	; 0x1664 <LCD_Print+0x11e>
	sprintf(A,"TIME: %d:0%d:0%d  ",hour,minute,second);
    1638:	ff 92       	push	r15
    163a:	ef 92       	push	r14
    163c:	1f 93       	push	r17
    163e:	0f 93       	push	r16
    1640:	3f 93       	push	r19
    1642:	2f 93       	push	r18
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	92 e0       	ldi	r25, 0x02	; 2
    1648:	9f 93       	push	r25
    164a:	8f 93       	push	r24
    164c:	ce 01       	movw	r24, r28
    164e:	01 96       	adiw	r24, 0x01	; 1
    1650:	9f 93       	push	r25
    1652:	8f 93       	push	r24
    1654:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
	sprintf(A,"TIME: 0%d:0%d:0%d  ",hour,minute,second);
}else if (hour<10 && minute<10){
	sprintf(A,"TIME: 0%d:0%d:%d  ",hour,minute,second);
}else if (hour<10 && second<10){
	sprintf(A,"TIME: 0%d:%d:0%d  ",hour,minute,second);
}else if (minute<10 && second<10){
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	61 c0       	rjmp	.+194    	; 0x1726 <LCD_Print+0x1e0>
	sprintf(A,"TIME: %d:0%d:0%d  ",hour,minute,second);
}else if (minute<10){
    1664:	0a 30       	cpi	r16, 0x0A	; 10
    1666:	11 05       	cpc	r17, r1
    1668:	b4 f4       	brge	.+44     	; 0x1696 <LCD_Print+0x150>
    sprintf(A,"TIME: %d:0%d:%d  ",hour,minute,second);
    166a:	ff 92       	push	r15
    166c:	ef 92       	push	r14
    166e:	1f 93       	push	r17
    1670:	0f 93       	push	r16
    1672:	3f 93       	push	r19
    1674:	2f 93       	push	r18
    1676:	83 e1       	ldi	r24, 0x13	; 19
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	9f 93       	push	r25
    167c:	8f 93       	push	r24
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	9f 93       	push	r25
    1684:	8f 93       	push	r24
    1686:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	48 c0       	rjmp	.+144    	; 0x1726 <LCD_Print+0x1e0>
}else if (second<10){
    1696:	9a e0       	ldi	r25, 0x0A	; 10
    1698:	e9 16       	cp	r14, r25
    169a:	f1 04       	cpc	r15, r1
    169c:	b4 f4       	brge	.+44     	; 0x16ca <LCD_Print+0x184>
    sprintf(A,"TIME: %d:%d:0%d  ",hour,minute,second);
    169e:	ff 92       	push	r15
    16a0:	ef 92       	push	r14
    16a2:	1f 93       	push	r17
    16a4:	0f 93       	push	r16
    16a6:	3f 93       	push	r19
    16a8:	2f 93       	push	r18
    16aa:	85 e2       	ldi	r24, 0x25	; 37
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	9f 93       	push	r25
    16b0:	8f 93       	push	r24
    16b2:	ce 01       	movw	r24, r28
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	9f 93       	push	r25
    16b8:	8f 93       	push	r24
    16ba:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	2e c0       	rjmp	.+92     	; 0x1726 <LCD_Print+0x1e0>
}else if (hour<10){
    16ca:	2a 30       	cpi	r18, 0x0A	; 10
    16cc:	31 05       	cpc	r19, r1
    16ce:	b4 f4       	brge	.+44     	; 0x16fc <LCD_Print+0x1b6>
    sprintf(A,"TIME: 0%d:%d:%d  ",hour,minute,second);
    16d0:	ff 92       	push	r15
    16d2:	ef 92       	push	r14
    16d4:	1f 93       	push	r17
    16d6:	0f 93       	push	r16
    16d8:	3f 93       	push	r19
    16da:	2f 93       	push	r18
    16dc:	87 e3       	ldi	r24, 0x37	; 55
    16de:	92 e0       	ldi	r25, 0x02	; 2
    16e0:	9f 93       	push	r25
    16e2:	8f 93       	push	r24
    16e4:	ce 01       	movw	r24, r28
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	9f 93       	push	r25
    16ea:	8f 93       	push	r24
    16ec:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	15 c0       	rjmp	.+42     	; 0x1726 <LCD_Print+0x1e0>
}else{
    sprintf(A,"TIME: %d:%d:%d  ",hour,minute,second);
    16fc:	ff 92       	push	r15
    16fe:	ef 92       	push	r14
    1700:	1f 93       	push	r17
    1702:	0f 93       	push	r16
    1704:	3f 93       	push	r19
    1706:	2f 93       	push	r18
    1708:	89 e4       	ldi	r24, 0x49	; 73
    170a:	92 e0       	ldi	r25, 0x02	; 2
    170c:	9f 93       	push	r25
    170e:	8f 93       	push	r24
    1710:	ce 01       	movw	r24, r28
    1712:	01 96       	adiw	r24, 0x01	; 1
    1714:	9f 93       	push	r25
    1716:	8f 93       	push	r24
    1718:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
}


if (month<10 && day <10){
    1726:	9a e0       	ldi	r25, 0x0A	; 10
    1728:	c9 16       	cp	r12, r25
    172a:	d1 04       	cpc	r13, r1
    172c:	d4 f4       	brge	.+52     	; 0x1762 <LCD_Print+0x21c>
    172e:	8a e0       	ldi	r24, 0x0A	; 10
    1730:	a8 16       	cp	r10, r24
    1732:	b1 04       	cpc	r11, r1
    1734:	b4 f4       	brge	.+44     	; 0x1762 <LCD_Print+0x21c>
	sprintf(B,"DATE: %d/0%d/0%d ",year1,month,day);
    1736:	bf 92       	push	r11
    1738:	af 92       	push	r10
    173a:	df 92       	push	r13
    173c:	cf 92       	push	r12
    173e:	9f 92       	push	r9
    1740:	8f 92       	push	r8
    1742:	8a e5       	ldi	r24, 0x5A	; 90
    1744:	92 e0       	ldi	r25, 0x02	; 2
    1746:	9f 93       	push	r25
    1748:	8f 93       	push	r24
    174a:	ce 01       	movw	r24, r28
    174c:	45 96       	adiw	r24, 0x15	; 21
    174e:	9f 93       	push	r25
    1750:	8f 93       	push	r24
    1752:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
}else{
    sprintf(A,"TIME: %d:%d:%d  ",hour,minute,second);
}


if (month<10 && day <10){
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	49 c0       	rjmp	.+146    	; 0x17f4 <LCD_Print+0x2ae>
	sprintf(B,"DATE: %d/0%d/0%d ",year1,month,day);
	}else if (month<10){
    1762:	9a e0       	ldi	r25, 0x0A	; 10
    1764:	c9 16       	cp	r12, r25
    1766:	d1 04       	cpc	r13, r1
    1768:	b4 f4       	brge	.+44     	; 0x1796 <LCD_Print+0x250>
	sprintf(B,"DATE: %d/0%d/%d ",year1,month,day);
    176a:	bf 92       	push	r11
    176c:	af 92       	push	r10
    176e:	df 92       	push	r13
    1770:	cf 92       	push	r12
    1772:	9f 92       	push	r9
    1774:	8f 92       	push	r8
    1776:	8c e6       	ldi	r24, 0x6C	; 108
    1778:	92 e0       	ldi	r25, 0x02	; 2
    177a:	9f 93       	push	r25
    177c:	8f 93       	push	r24
    177e:	ce 01       	movw	r24, r28
    1780:	45 96       	adiw	r24, 0x15	; 21
    1782:	9f 93       	push	r25
    1784:	8f 93       	push	r24
    1786:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	2f c0       	rjmp	.+94     	; 0x17f4 <LCD_Print+0x2ae>
	}else if (day<10){
    1796:	9a e0       	ldi	r25, 0x0A	; 10
    1798:	a9 16       	cp	r10, r25
    179a:	b1 04       	cpc	r11, r1
    179c:	b4 f4       	brge	.+44     	; 0x17ca <LCD_Print+0x284>
	sprintf(B,"DATE: %d/%d/0%d ",year1,month,day);
    179e:	bf 92       	push	r11
    17a0:	af 92       	push	r10
    17a2:	df 92       	push	r13
    17a4:	cf 92       	push	r12
    17a6:	9f 92       	push	r9
    17a8:	8f 92       	push	r8
    17aa:	8d e7       	ldi	r24, 0x7D	; 125
    17ac:	92 e0       	ldi	r25, 0x02	; 2
    17ae:	9f 93       	push	r25
    17b0:	8f 93       	push	r24
    17b2:	ce 01       	movw	r24, r28
    17b4:	45 96       	adiw	r24, 0x15	; 21
    17b6:	9f 93       	push	r25
    17b8:	8f 93       	push	r24
    17ba:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	f8 94       	cli
    17c2:	de bf       	out	0x3e, r29	; 62
    17c4:	0f be       	out	0x3f, r0	; 63
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	15 c0       	rjmp	.+42     	; 0x17f4 <LCD_Print+0x2ae>
	}else{
	sprintf(B,"DATE: %d/%d/%d ",year1,month,day);
    17ca:	bf 92       	push	r11
    17cc:	af 92       	push	r10
    17ce:	df 92       	push	r13
    17d0:	cf 92       	push	r12
    17d2:	9f 92       	push	r9
    17d4:	8f 92       	push	r8
    17d6:	8e e8       	ldi	r24, 0x8E	; 142
    17d8:	92 e0       	ldi	r25, 0x02	; 2
    17da:	9f 93       	push	r25
    17dc:	8f 93       	push	r24
    17de:	ce 01       	movw	r24, r28
    17e0:	45 96       	adiw	r24, 0x15	; 21
    17e2:	9f 93       	push	r25
    17e4:	8f 93       	push	r24
    17e6:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
}

LCD_String(A);
    17f4:	ce 01       	movw	r24, r28
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
LCD_Command(0xC0);
    17fc:	80 ec       	ldi	r24, 0xC0	; 192
    17fe:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
LCD_String(B);
    1802:	ce 01       	movw	r24, r28
    1804:	45 96       	adiw	r24, 0x15	; 21
    1806:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
LCD_Command(0x80);
    180a:	80 e8       	ldi	r24, 0x80	; 128
    180c:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
}
    1810:	a8 96       	adiw	r28, 0x28	; 40
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	df 90       	pop	r13
    182a:	cf 90       	pop	r12
    182c:	bf 90       	pop	r11
    182e:	af 90       	pop	r10
    1830:	9f 90       	pop	r9
    1832:	8f 90       	pop	r8
    1834:	08 95       	ret

00001836 <LCD_Time_Print>:



void LCD_Time_Print(int hour ,int minute ,int second){
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	cd b7       	in	r28, 0x3d	; 61
    183c:	de b7       	in	r29, 0x3e	; 62
    183e:	64 97       	sbiw	r28, 0x14	; 20
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
	char A[20];
	if (minute<10 && second <10 && hour<10){
    184a:	6a 30       	cpi	r22, 0x0A	; 10
    184c:	71 05       	cpc	r23, r1
    184e:	e4 f4       	brge	.+56     	; 0x1888 <LCD_Time_Print+0x52>
    1850:	4a 30       	cpi	r20, 0x0A	; 10
    1852:	51 05       	cpc	r21, r1
    1854:	cc f4       	brge	.+50     	; 0x1888 <LCD_Time_Print+0x52>
    1856:	8a 30       	cpi	r24, 0x0A	; 10
    1858:	91 05       	cpc	r25, r1
    185a:	b4 f4       	brge	.+44     	; 0x1888 <LCD_Time_Print+0x52>
		sprintf(A,"0%d:0%d:0%d  ",hour,minute,second);
    185c:	5f 93       	push	r21
    185e:	4f 93       	push	r20
    1860:	7f 93       	push	r23
    1862:	6f 93       	push	r22
    1864:	9f 93       	push	r25
    1866:	8f 93       	push	r24
    1868:	8c ec       	ldi	r24, 0xCC	; 204
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	9f 93       	push	r25
    186e:	8f 93       	push	r24
    1870:	ce 01       	movw	r24, r28
    1872:	01 96       	adiw	r24, 0x01	; 1
    1874:	9f 93       	push	r25
    1876:	8f 93       	push	r24
    1878:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>



void LCD_Time_Print(int hour ,int minute ,int second){
	char A[20];
	if (minute<10 && second <10 && hour<10){
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	b4 c0       	rjmp	.+360    	; 0x19f0 <LCD_Time_Print+0x1ba>
		sprintf(A,"0%d:0%d:0%d  ",hour,minute,second);
		}else if (hour<10 && minute<10){
    1888:	8a 30       	cpi	r24, 0x0A	; 10
    188a:	91 05       	cpc	r25, r1
    188c:	cc f4       	brge	.+50     	; 0x18c0 <LCD_Time_Print+0x8a>
    188e:	6a 30       	cpi	r22, 0x0A	; 10
    1890:	71 05       	cpc	r23, r1
    1892:	b4 f4       	brge	.+44     	; 0x18c0 <LCD_Time_Print+0x8a>
		sprintf(A,"0%d:0%d:%d  ",hour,minute,second);
    1894:	5f 93       	push	r21
    1896:	4f 93       	push	r20
    1898:	7f 93       	push	r23
    189a:	6f 93       	push	r22
    189c:	9f 93       	push	r25
    189e:	8f 93       	push	r24
    18a0:	80 ee       	ldi	r24, 0xE0	; 224
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	9f 93       	push	r25
    18a6:	8f 93       	push	r24
    18a8:	ce 01       	movw	r24, r28
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	9f 93       	push	r25
    18ae:	8f 93       	push	r24
    18b0:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>

void LCD_Time_Print(int hour ,int minute ,int second){
	char A[20];
	if (minute<10 && second <10 && hour<10){
		sprintf(A,"0%d:0%d:0%d  ",hour,minute,second);
		}else if (hour<10 && minute<10){
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	98 c0       	rjmp	.+304    	; 0x19f0 <LCD_Time_Print+0x1ba>
		sprintf(A,"0%d:0%d:%d  ",hour,minute,second);
		}else if (hour<10 && second<10){
    18c0:	8a 30       	cpi	r24, 0x0A	; 10
    18c2:	91 05       	cpc	r25, r1
    18c4:	cc f4       	brge	.+50     	; 0x18f8 <LCD_Time_Print+0xc2>
    18c6:	4a 30       	cpi	r20, 0x0A	; 10
    18c8:	51 05       	cpc	r21, r1
    18ca:	b4 f4       	brge	.+44     	; 0x18f8 <LCD_Time_Print+0xc2>
		sprintf(A,"0%d:%d:0%d  ",hour,minute,second);
    18cc:	5f 93       	push	r21
    18ce:	4f 93       	push	r20
    18d0:	7f 93       	push	r23
    18d2:	6f 93       	push	r22
    18d4:	9f 93       	push	r25
    18d6:	8f 93       	push	r24
    18d8:	83 ef       	ldi	r24, 0xF3	; 243
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	9f 93       	push	r25
    18de:	8f 93       	push	r24
    18e0:	ce 01       	movw	r24, r28
    18e2:	01 96       	adiw	r24, 0x01	; 1
    18e4:	9f 93       	push	r25
    18e6:	8f 93       	push	r24
    18e8:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
	char A[20];
	if (minute<10 && second <10 && hour<10){
		sprintf(A,"0%d:0%d:0%d  ",hour,minute,second);
		}else if (hour<10 && minute<10){
		sprintf(A,"0%d:0%d:%d  ",hour,minute,second);
		}else if (hour<10 && second<10){
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	7c c0       	rjmp	.+248    	; 0x19f0 <LCD_Time_Print+0x1ba>
		sprintf(A,"0%d:%d:0%d  ",hour,minute,second);
		}else if (minute<10 && second<10){
    18f8:	6a 30       	cpi	r22, 0x0A	; 10
    18fa:	71 05       	cpc	r23, r1
    18fc:	cc f4       	brge	.+50     	; 0x1930 <LCD_Time_Print+0xfa>
    18fe:	4a 30       	cpi	r20, 0x0A	; 10
    1900:	51 05       	cpc	r21, r1
    1902:	b4 f4       	brge	.+44     	; 0x1930 <LCD_Time_Print+0xfa>
		sprintf(A,"%d:0%d:0%d  ",hour,minute,second);
    1904:	5f 93       	push	r21
    1906:	4f 93       	push	r20
    1908:	7f 93       	push	r23
    190a:	6f 93       	push	r22
    190c:	9f 93       	push	r25
    190e:	8f 93       	push	r24
    1910:	86 e0       	ldi	r24, 0x06	; 6
    1912:	92 e0       	ldi	r25, 0x02	; 2
    1914:	9f 93       	push	r25
    1916:	8f 93       	push	r24
    1918:	ce 01       	movw	r24, r28
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	9f 93       	push	r25
    191e:	8f 93       	push	r24
    1920:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
		sprintf(A,"0%d:0%d:0%d  ",hour,minute,second);
		}else if (hour<10 && minute<10){
		sprintf(A,"0%d:0%d:%d  ",hour,minute,second);
		}else if (hour<10 && second<10){
		sprintf(A,"0%d:%d:0%d  ",hour,minute,second);
		}else if (minute<10 && second<10){
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	60 c0       	rjmp	.+192    	; 0x19f0 <LCD_Time_Print+0x1ba>
		sprintf(A,"%d:0%d:0%d  ",hour,minute,second);
		}else if (minute<10){
    1930:	6a 30       	cpi	r22, 0x0A	; 10
    1932:	71 05       	cpc	r23, r1
    1934:	b4 f4       	brge	.+44     	; 0x1962 <LCD_Time_Print+0x12c>
		sprintf(A,"%d:0%d:%d  ",hour,minute,second);
    1936:	5f 93       	push	r21
    1938:	4f 93       	push	r20
    193a:	7f 93       	push	r23
    193c:	6f 93       	push	r22
    193e:	9f 93       	push	r25
    1940:	8f 93       	push	r24
    1942:	89 e1       	ldi	r24, 0x19	; 25
    1944:	92 e0       	ldi	r25, 0x02	; 2
    1946:	9f 93       	push	r25
    1948:	8f 93       	push	r24
    194a:	ce 01       	movw	r24, r28
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	9f 93       	push	r25
    1950:	8f 93       	push	r24
    1952:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	47 c0       	rjmp	.+142    	; 0x19f0 <LCD_Time_Print+0x1ba>
		}else if (second<10){
    1962:	4a 30       	cpi	r20, 0x0A	; 10
    1964:	51 05       	cpc	r21, r1
    1966:	b4 f4       	brge	.+44     	; 0x1994 <LCD_Time_Print+0x15e>
		sprintf(A,"%d:%d:0%d  ",hour,minute,second);
    1968:	5f 93       	push	r21
    196a:	4f 93       	push	r20
    196c:	7f 93       	push	r23
    196e:	6f 93       	push	r22
    1970:	9f 93       	push	r25
    1972:	8f 93       	push	r24
    1974:	8b e2       	ldi	r24, 0x2B	; 43
    1976:	92 e0       	ldi	r25, 0x02	; 2
    1978:	9f 93       	push	r25
    197a:	8f 93       	push	r24
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	9f 93       	push	r25
    1982:	8f 93       	push	r24
    1984:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	cd bf       	out	0x3d, r28	; 61
    1992:	2e c0       	rjmp	.+92     	; 0x19f0 <LCD_Time_Print+0x1ba>
		}else if (hour<10){
    1994:	8a 30       	cpi	r24, 0x0A	; 10
    1996:	91 05       	cpc	r25, r1
    1998:	b4 f4       	brge	.+44     	; 0x19c6 <LCD_Time_Print+0x190>
		sprintf(A,"0%d:%d:%d  ",hour,minute,second);
    199a:	5f 93       	push	r21
    199c:	4f 93       	push	r20
    199e:	7f 93       	push	r23
    19a0:	6f 93       	push	r22
    19a2:	9f 93       	push	r25
    19a4:	8f 93       	push	r24
    19a6:	8d e3       	ldi	r24, 0x3D	; 61
    19a8:	92 e0       	ldi	r25, 0x02	; 2
    19aa:	9f 93       	push	r25
    19ac:	8f 93       	push	r24
    19ae:	ce 01       	movw	r24, r28
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	9f 93       	push	r25
    19b4:	8f 93       	push	r24
    19b6:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	15 c0       	rjmp	.+42     	; 0x19f0 <LCD_Time_Print+0x1ba>
		}else{
		sprintf(A,"%d:%d:%d        ",hour,minute,second);
    19c6:	5f 93       	push	r21
    19c8:	4f 93       	push	r20
    19ca:	7f 93       	push	r23
    19cc:	6f 93       	push	r22
    19ce:	9f 93       	push	r25
    19d0:	8f 93       	push	r24
    19d2:	8e e9       	ldi	r24, 0x9E	; 158
    19d4:	92 e0       	ldi	r25, 0x02	; 2
    19d6:	9f 93       	push	r25
    19d8:	8f 93       	push	r24
    19da:	ce 01       	movw	r24, r28
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	9f 93       	push	r25
    19e0:	8f 93       	push	r24
    19e2:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
	}
	LCD_String(A);
    19f0:	ce 01       	movw	r24, r28
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
}
    19f8:	64 96       	adiw	r28, 0x14	; 20
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	08 95       	ret

00001a0a <LCD_Date_Print>:


void LCD_Date_Print(int year ,int month ,int day){
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	64 97       	sbiw	r28, 0x14	; 20
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
	char B[20];
	int year1=2000+year;
    1a1e:	80 53       	subi	r24, 0x30	; 48
    1a20:	98 4f       	sbci	r25, 0xF8	; 248
	if (month<10 && day <10){
    1a22:	6a 30       	cpi	r22, 0x0A	; 10
    1a24:	71 05       	cpc	r23, r1
    1a26:	cc f4       	brge	.+50     	; 0x1a5a <LCD_Date_Print+0x50>
    1a28:	4a 30       	cpi	r20, 0x0A	; 10
    1a2a:	51 05       	cpc	r21, r1
    1a2c:	b4 f4       	brge	.+44     	; 0x1a5a <LCD_Date_Print+0x50>
		sprintf(B,"%d/0%d/0%d      ",year1,month,day);
    1a2e:	5f 93       	push	r21
    1a30:	4f 93       	push	r20
    1a32:	7f 93       	push	r23
    1a34:	6f 93       	push	r22
    1a36:	9f 93       	push	r25
    1a38:	8f 93       	push	r24
    1a3a:	8f ea       	ldi	r24, 0xAF	; 175
    1a3c:	92 e0       	ldi	r25, 0x02	; 2
    1a3e:	9f 93       	push	r25
    1a40:	8f 93       	push	r24
    1a42:	ce 01       	movw	r24, r28
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	9f 93       	push	r25
    1a48:	8f 93       	push	r24
    1a4a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>


void LCD_Date_Print(int year ,int month ,int day){
	char B[20];
	int year1=2000+year;
	if (month<10 && day <10){
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    1a58:	47 c0       	rjmp	.+142    	; 0x1ae8 <LCD_Date_Print+0xde>
		sprintf(B,"%d/0%d/0%d      ",year1,month,day);
		}else if (month<10){
    1a5a:	6a 30       	cpi	r22, 0x0A	; 10
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	b4 f4       	brge	.+44     	; 0x1a8c <LCD_Date_Print+0x82>
		sprintf(B,"%d/0%d/%d      ",year1,month,day);
    1a60:	5f 93       	push	r21
    1a62:	4f 93       	push	r20
    1a64:	7f 93       	push	r23
    1a66:	6f 93       	push	r22
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	80 ec       	ldi	r24, 0xC0	; 192
    1a6e:	92 e0       	ldi	r25, 0x02	; 2
    1a70:	9f 93       	push	r25
    1a72:	8f 93       	push	r24
    1a74:	ce 01       	movw	r24, r28
    1a76:	01 96       	adiw	r24, 0x01	; 1
    1a78:	9f 93       	push	r25
    1a7a:	8f 93       	push	r24
    1a7c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
    1a8a:	2e c0       	rjmp	.+92     	; 0x1ae8 <LCD_Date_Print+0xde>
		}else if (day<10){
    1a8c:	4a 30       	cpi	r20, 0x0A	; 10
    1a8e:	51 05       	cpc	r21, r1
    1a90:	b4 f4       	brge	.+44     	; 0x1abe <LCD_Date_Print+0xb4>
		sprintf(B,"%d/%d/0%d      ",year1,month,day);
    1a92:	5f 93       	push	r21
    1a94:	4f 93       	push	r20
    1a96:	7f 93       	push	r23
    1a98:	6f 93       	push	r22
    1a9a:	9f 93       	push	r25
    1a9c:	8f 93       	push	r24
    1a9e:	80 ed       	ldi	r24, 0xD0	; 208
    1aa0:	92 e0       	ldi	r25, 0x02	; 2
    1aa2:	9f 93       	push	r25
    1aa4:	8f 93       	push	r24
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	9f 93       	push	r25
    1aac:	8f 93       	push	r24
    1aae:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	15 c0       	rjmp	.+42     	; 0x1ae8 <LCD_Date_Print+0xde>
		}else{
		sprintf(B,"%d/%d/%d      ",year1,month,day);
    1abe:	5f 93       	push	r21
    1ac0:	4f 93       	push	r20
    1ac2:	7f 93       	push	r23
    1ac4:	6f 93       	push	r22
    1ac6:	9f 93       	push	r25
    1ac8:	8f 93       	push	r24
    1aca:	80 ee       	ldi	r24, 0xE0	; 224
    1acc:	92 e0       	ldi	r25, 0x02	; 2
    1ace:	9f 93       	push	r25
    1ad0:	8f 93       	push	r24
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	9f 93       	push	r25
    1ad8:	8f 93       	push	r24
    1ada:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
	}
	LCD_String(B);
    1ae8:	ce 01       	movw	r24, r28
    1aea:	01 96       	adiw	r24, 0x01	; 1
    1aec:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
}
    1af0:	64 96       	adiw	r28, 0x14	; 20
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <LCD_Alarm_Print>:


void LCD_Alarm_Print(int hour ,int minute){
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	64 97       	sbiw	r28, 0x14	; 20
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
	char C[20];
	   if (hour<10 && minute<10){
    1b16:	8a 30       	cpi	r24, 0x0A	; 10
    1b18:	91 05       	cpc	r25, r1
    1b1a:	bc f4       	brge	.+46     	; 0x1b4a <LCD_Alarm_Print+0x48>
    1b1c:	6a 30       	cpi	r22, 0x0A	; 10
    1b1e:	71 05       	cpc	r23, r1
    1b20:	a4 f4       	brge	.+40     	; 0x1b4a <LCD_Alarm_Print+0x48>
		sprintf(C,"0%d:0%d           ",hour,minute);
    1b22:	7f 93       	push	r23
    1b24:	6f 93       	push	r22
    1b26:	9f 93       	push	r25
    1b28:	8f 93       	push	r24
    1b2a:	8f ee       	ldi	r24, 0xEF	; 239
    1b2c:	92 e0       	ldi	r25, 0x02	; 2
    1b2e:	9f 93       	push	r25
    1b30:	8f 93       	push	r24
    1b32:	ce 01       	movw	r24, r28
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	9f 93       	push	r25
    1b38:	8f 93       	push	r24
    1b3a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
}


void LCD_Alarm_Print(int hour ,int minute){
	char C[20];
	   if (hour<10 && minute<10){
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	41 c0       	rjmp	.+130    	; 0x1bcc <LCD_Alarm_Print+0xca>
		sprintf(C,"0%d:0%d           ",hour,minute);
		}else if (minute<10){
    1b4a:	6a 30       	cpi	r22, 0x0A	; 10
    1b4c:	71 05       	cpc	r23, r1
    1b4e:	a4 f4       	brge	.+40     	; 0x1b78 <LCD_Alarm_Print+0x76>
		sprintf(C,"%d:0%d           ",hour,minute);
    1b50:	7f 93       	push	r23
    1b52:	6f 93       	push	r22
    1b54:	9f 93       	push	r25
    1b56:	8f 93       	push	r24
    1b58:	80 ef       	ldi	r24, 0xF0	; 240
    1b5a:	92 e0       	ldi	r25, 0x02	; 2
    1b5c:	9f 93       	push	r25
    1b5e:	8f 93       	push	r24
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	9f 93       	push	r25
    1b66:	8f 93       	push	r24
    1b68:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	2a c0       	rjmp	.+84     	; 0x1bcc <LCD_Alarm_Print+0xca>
		}else if (hour<10){
    1b78:	8a 30       	cpi	r24, 0x0A	; 10
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	a4 f4       	brge	.+40     	; 0x1ba6 <LCD_Alarm_Print+0xa4>
		sprintf(C,"0%d:%d           ",hour,minute);
    1b7e:	7f 93       	push	r23
    1b80:	6f 93       	push	r22
    1b82:	9f 93       	push	r25
    1b84:	8f 93       	push	r24
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	93 e0       	ldi	r25, 0x03	; 3
    1b8a:	9f 93       	push	r25
    1b8c:	8f 93       	push	r24
    1b8e:	ce 01       	movw	r24, r28
    1b90:	01 96       	adiw	r24, 0x01	; 1
    1b92:	9f 93       	push	r25
    1b94:	8f 93       	push	r24
    1b96:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	13 c0       	rjmp	.+38     	; 0x1bcc <LCD_Alarm_Print+0xca>
		}else{
		sprintf(C,"%d:%d           ",hour,minute);
    1ba6:	7f 93       	push	r23
    1ba8:	6f 93       	push	r22
    1baa:	9f 93       	push	r25
    1bac:	8f 93       	push	r24
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	93 e0       	ldi	r25, 0x03	; 3
    1bb2:	9f 93       	push	r25
    1bb4:	8f 93       	push	r24
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	9f 93       	push	r25
    1bbc:	8f 93       	push	r24
    1bbe:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
	}
	LCD_String(C);
    1bcc:	ce 01       	movw	r24, r28
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
}
    1bd4:	64 96       	adiw	r28, 0x14	; 20
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	08 95       	ret

00001be6 <update_Alarm_Menu>:

int Alarm_Menu=1;
int Alarm[5][2];

void update_Alarm_Menu(){
	switch(Alarm_Menu){
    1be6:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <Alarm_Menu>
    1bea:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <Alarm_Menu+0x1>
    1bee:	e7 30       	cpi	r30, 0x07	; 7
    1bf0:	f1 05       	cpc	r31, r1
    1bf2:	08 f0       	brcs	.+2      	; 0x1bf6 <update_Alarm_Menu+0x10>
    1bf4:	75 c0       	rjmp	.+234    	; 0x1ce0 <update_Alarm_Menu+0xfa>
    1bf6:	e5 5c       	subi	r30, 0xC5	; 197
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <__tablejump2__>
		case 0:
		Alarm_Menu = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <Alarm_Menu+0x1>
    1c06:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Alarm_Menu>
		break;
    1c0a:	08 95       	ret
		case 1:							//initial display state
		LCD_Init();
    1c0c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    1c10:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("    Alarm 01  >>");
    1c14:	84 e1       	ldi	r24, 0x14	; 20
    1c16:	93 e0       	ldi	r25, 0x03	; 3
    1c18:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    1c1c:	80 ec       	ldi	r24, 0xC0	; 192
    1c1e:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Alarm_Print(Alarm[0][0],Alarm[0][1]);
    1c22:	e6 e2       	ldi	r30, 0x26	; 38
    1c24:	f1 e0       	ldi	r31, 0x01	; 1
    1c26:	62 81       	ldd	r22, Z+2	; 0x02
    1c28:	73 81       	ldd	r23, Z+3	; 0x03
    1c2a:	80 81       	ld	r24, Z
    1c2c:	91 81       	ldd	r25, Z+1	; 0x01
    1c2e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
		break;
    1c32:	08 95       	ret
		case 2:							//2nd display state
		LCD_Init();
    1c34:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    1c38:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("<<  Alarm 02  >>");
    1c3c:	85 e2       	ldi	r24, 0x25	; 37
    1c3e:	93 e0       	ldi	r25, 0x03	; 3
    1c40:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    1c44:	80 ec       	ldi	r24, 0xC0	; 192
    1c46:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Alarm_Print(Alarm[1][0],Alarm[1][1]);
    1c4a:	e6 e2       	ldi	r30, 0x26	; 38
    1c4c:	f1 e0       	ldi	r31, 0x01	; 1
    1c4e:	66 81       	ldd	r22, Z+6	; 0x06
    1c50:	77 81       	ldd	r23, Z+7	; 0x07
    1c52:	84 81       	ldd	r24, Z+4	; 0x04
    1c54:	95 81       	ldd	r25, Z+5	; 0x05
    1c56:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
		break;
    1c5a:	08 95       	ret
		case 3:							//Third display state
		LCD_Init();
    1c5c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    1c60:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("<<  Alarm 03  >>");
    1c64:	86 e3       	ldi	r24, 0x36	; 54
    1c66:	93 e0       	ldi	r25, 0x03	; 3
    1c68:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    1c6c:	80 ec       	ldi	r24, 0xC0	; 192
    1c6e:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Alarm_Print(Alarm[2][0],Alarm[2][1]);
    1c72:	e6 e2       	ldi	r30, 0x26	; 38
    1c74:	f1 e0       	ldi	r31, 0x01	; 1
    1c76:	62 85       	ldd	r22, Z+10	; 0x0a
    1c78:	73 85       	ldd	r23, Z+11	; 0x0b
    1c7a:	80 85       	ldd	r24, Z+8	; 0x08
    1c7c:	91 85       	ldd	r25, Z+9	; 0x09
    1c7e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
		break;
    1c82:	08 95       	ret
		case 4:							//fourth display state
		LCD_Init();
    1c84:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    1c88:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("<<  Alarm 04  >>");
    1c8c:	87 e4       	ldi	r24, 0x47	; 71
    1c8e:	93 e0       	ldi	r25, 0x03	; 3
    1c90:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    1c94:	80 ec       	ldi	r24, 0xC0	; 192
    1c96:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Alarm_Print(Alarm[3][0],Alarm[3][1]);
    1c9a:	e6 e2       	ldi	r30, 0x26	; 38
    1c9c:	f1 e0       	ldi	r31, 0x01	; 1
    1c9e:	66 85       	ldd	r22, Z+14	; 0x0e
    1ca0:	77 85       	ldd	r23, Z+15	; 0x0f
    1ca2:	84 85       	ldd	r24, Z+12	; 0x0c
    1ca4:	95 85       	ldd	r25, Z+13	; 0x0d
    1ca6:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
		break;
    1caa:	08 95       	ret
		case 5:
		LCD_Init();
    1cac:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    1cb0:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("<<  Alarm 05    ");
    1cb4:	88 e5       	ldi	r24, 0x58	; 88
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    1cbc:	80 ec       	ldi	r24, 0xC0	; 192
    1cbe:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Alarm_Print(Alarm[4][0],Alarm[4][1]);
    1cc2:	e6 e2       	ldi	r30, 0x26	; 38
    1cc4:	f1 e0       	ldi	r31, 0x01	; 1
    1cc6:	62 89       	ldd	r22, Z+18	; 0x12
    1cc8:	73 89       	ldd	r23, Z+19	; 0x13
    1cca:	80 89       	ldd	r24, Z+16	; 0x10
    1ccc:	91 89       	ldd	r25, Z+17	; 0x11
    1cce:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
		break;
    1cd2:	08 95       	ret
		case 6:
		Alarm_Menu = 4;
    1cd4:	84 e0       	ldi	r24, 0x04	; 4
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <Alarm_Menu+0x1>
    1cdc:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Alarm_Menu>
    1ce0:	08 95       	ret

00001ce2 <Alarm_insert>:




void Alarm_insert(int index)
{
    1ce2:	af 92       	push	r10
    1ce4:	bf 92       	push	r11
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	a0 97       	sbiw	r28, 0x20	; 32
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	7c 01       	movw	r14, r24
	DDRD = 0xf0;
    1d08:	80 ef       	ldi	r24, 0xF0	; 240
    1d0a:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x7f;
    1d0c:	8f e7       	ldi	r24, 0x7F	; 127
    1d0e:	8b b9       	out	0x0b, r24	; 11
	unsigned char c,r;
	int pos = 0 ;
	unsigned char k[4][3]={{14,0,15},{7,8,9},{4,5,6},{1,2,3}};
    1d10:	8c e0       	ldi	r24, 0x0C	; 12
    1d12:	ea e3       	ldi	r30, 0x3A	; 58
    1d14:	f1 e0       	ldi	r31, 0x01	; 1
    1d16:	de 01       	movw	r26, r28
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	01 90       	ld	r0, Z+
    1d1c:	0d 92       	st	X+, r0
    1d1e:	8a 95       	dec	r24
    1d20:	e1 f7       	brne	.-8      	; 0x1d1a <Alarm_insert+0x38>
	int input=0;
	LCD_Init();
    1d22:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	char fog[10]={0};
    1d26:	fe 01       	movw	r30, r28
    1d28:	3d 96       	adiw	r30, 0x0d	; 13
    1d2a:	8a e0       	ldi	r24, 0x0A	; 10
    1d2c:	df 01       	movw	r26, r30
    1d2e:	1d 92       	st	X+, r1
    1d30:	8a 95       	dec	r24
    1d32:	e9 f7       	brne	.-6      	; 0x1d2e <Alarm_insert+0x4c>
	DDRD = 0xf0;
	PORTD = 0x7f;
	unsigned char c,r;
	int pos = 0 ;
	unsigned char k[4][3]={{14,0,15},{7,8,9},{4,5,6},{1,2,3}};
	int input=0;
    1d34:	c1 2c       	mov	r12, r1
    1d36:	d1 2c       	mov	r13, r1
void Alarm_insert(int index)
{
	DDRD = 0xf0;
	PORTD = 0x7f;
	unsigned char c,r;
	int pos = 0 ;
    1d38:	00 e0       	ldi	r16, 0x00	; 0
    1d3a:	10 e0       	ldi	r17, 0x00	; 0
	char fog[10]={0};
	int Alarm_Time[5];
	
	while(1)
	{
		if (pos<5 & pos!=2)    // key pad input loop
    1d3c:	bb 24       	eor	r11, r11
    1d3e:	b3 94       	inc	r11
    1d40:	05 30       	cpi	r16, 0x05	; 5
    1d42:	11 05       	cpc	r17, r1
    1d44:	0c f0       	brlt	.+2      	; 0x1d48 <Alarm_insert+0x66>
    1d46:	b1 2c       	mov	r11, r1
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	02 30       	cpi	r16, 0x02	; 2
    1d4c:	11 05       	cpc	r17, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <Alarm_insert+0x70>
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	8b 21       	and	r24, r11
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <Alarm_insert+0x76>
    1d56:	a8 c0       	rjmp	.+336    	; 0x1ea8 <Alarm_insert+0x1c6>
		{
			do
			{
				PORTD&=0x0f;
    1d58:	8b b1       	in	r24, 0x0b	; 11
    1d5a:	8f 70       	andi	r24, 0x0F	; 15
    1d5c:	8b b9       	out	0x0b, r24	; 11
				r=PIND&0x0f;
    1d5e:	89 b1       	in	r24, 0x09	; 9
    1d60:	8f 70       	andi	r24, 0x0F	; 15
			} while(r!=0x0f);
    1d62:	8f 30       	cpi	r24, 0x0F	; 15
    1d64:	c9 f7       	brne	.-14     	; 0x1d58 <Alarm_insert+0x76>
			
			do
			{
				r=PIND&0x0f;
    1d66:	89 b1       	in	r24, 0x09	; 9
    1d68:	8f 70       	andi	r24, 0x0F	; 15
			}	  while(r==0x0f);
    1d6a:	8f 30       	cpi	r24, 0x0F	; 15
    1d6c:	e1 f3       	breq	.-8      	; 0x1d66 <Alarm_insert+0x84>
			
			while(1)
			{
				PORTD=0xef;
    1d6e:	8f ee       	ldi	r24, 0xEF	; 239
    1d70:	8b b9       	out	0x0b, r24	; 11
				r=PIND&0x0f;
    1d72:	89 b1       	in	r24, 0x09	; 9
    1d74:	8f 70       	andi	r24, 0x0F	; 15
				if(r!=0x0f)
    1d76:	8f 30       	cpi	r24, 0x0F	; 15
    1d78:	71 f4       	brne	.+28     	; 0x1d96 <Alarm_insert+0xb4>
				{
					c=0;
					break;
				}
				PORTD=0xdf;
    1d7a:	8f ed       	ldi	r24, 0xDF	; 223
    1d7c:	8b b9       	out	0x0b, r24	; 11
				r=PIND&0x0f;
    1d7e:	89 b1       	in	r24, 0x09	; 9
    1d80:	8f 70       	andi	r24, 0x0F	; 15
				if(r!=0x0f)
    1d82:	8f 30       	cpi	r24, 0x0F	; 15
    1d84:	51 f4       	brne	.+20     	; 0x1d9a <Alarm_insert+0xb8>
				{
					c=1;
					break;
				}
				PORTD=0xbf;
    1d86:	8f eb       	ldi	r24, 0xBF	; 191
    1d88:	8b b9       	out	0x0b, r24	; 11
				r=PIND&0x0f;
    1d8a:	89 b1       	in	r24, 0x09	; 9
    1d8c:	8f 70       	andi	r24, 0x0F	; 15
				if(r!=0x0f)
    1d8e:	8f 30       	cpi	r24, 0x0F	; 15
    1d90:	71 f3       	breq	.-36     	; 0x1d6e <Alarm_insert+0x8c>
				{
					c=2;
    1d92:	92 e0       	ldi	r25, 0x02	; 2
    1d94:	03 c0       	rjmp	.+6      	; 0x1d9c <Alarm_insert+0xba>
			{
				PORTD=0xef;
				r=PIND&0x0f;
				if(r!=0x0f)
				{
					c=0;
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <Alarm_insert+0xba>
				}
				PORTD=0xdf;
				r=PIND&0x0f;
				if(r!=0x0f)
				{
					c=1;
    1d9a:	91 e0       	ldi	r25, 0x01	; 1
				}
				
			}
			

			if(r==0x0e)
    1d9c:	8e 30       	cpi	r24, 0x0E	; 14
    1d9e:	89 f4       	brne	.+34     	; 0x1dc2 <Alarm_insert+0xe0>
			{
				input=k[0][c];
    1da0:	e1 e0       	ldi	r30, 0x01	; 1
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	ec 0f       	add	r30, r28
    1da6:	fd 1f       	adc	r31, r29
    1da8:	e9 0f       	add	r30, r25
    1daa:	f1 1d       	adc	r31, r1
    1dac:	c0 80       	ld	r12, Z
    1dae:	d1 2c       	mov	r13, r1
				itoa(input,fog,10);
    1db0:	4a e0       	ldi	r20, 0x0A	; 10
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	be 01       	movw	r22, r28
    1db6:	63 5f       	subi	r22, 0xF3	; 243
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	c6 01       	movw	r24, r12
    1dbc:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
    1dc0:	36 c0       	rjmp	.+108    	; 0x1e2e <Alarm_insert+0x14c>
			}
			else if(r==0x0d)
    1dc2:	8d 30       	cpi	r24, 0x0D	; 13
    1dc4:	89 f4       	brne	.+34     	; 0x1de8 <Alarm_insert+0x106>
			{
				input=k[1][c];
    1dc6:	e4 e0       	ldi	r30, 0x04	; 4
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	ec 0f       	add	r30, r28
    1dcc:	fd 1f       	adc	r31, r29
    1dce:	e9 0f       	add	r30, r25
    1dd0:	f1 1d       	adc	r31, r1
    1dd2:	c0 80       	ld	r12, Z
    1dd4:	d1 2c       	mov	r13, r1
				itoa(input,fog,10);
    1dd6:	4a e0       	ldi	r20, 0x0A	; 10
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	be 01       	movw	r22, r28
    1ddc:	63 5f       	subi	r22, 0xF3	; 243
    1dde:	7f 4f       	sbci	r23, 0xFF	; 255
    1de0:	c6 01       	movw	r24, r12
    1de2:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
    1de6:	23 c0       	rjmp	.+70     	; 0x1e2e <Alarm_insert+0x14c>
			}
			else if(r==0x0b)
    1de8:	8b 30       	cpi	r24, 0x0B	; 11
    1dea:	89 f4       	brne	.+34     	; 0x1e0e <Alarm_insert+0x12c>
			{
				input=k[2][c];
    1dec:	e7 e0       	ldi	r30, 0x07	; 7
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	ec 0f       	add	r30, r28
    1df2:	fd 1f       	adc	r31, r29
    1df4:	e9 0f       	add	r30, r25
    1df6:	f1 1d       	adc	r31, r1
    1df8:	c0 80       	ld	r12, Z
    1dfa:	d1 2c       	mov	r13, r1
				itoa(input,fog,10);
    1dfc:	4a e0       	ldi	r20, 0x0A	; 10
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	be 01       	movw	r22, r28
    1e02:	63 5f       	subi	r22, 0xF3	; 243
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
    1e06:	c6 01       	movw	r24, r12
    1e08:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
    1e0c:	10 c0       	rjmp	.+32     	; 0x1e2e <Alarm_insert+0x14c>
			}
			else {
				input=k[3][c];
    1e0e:	ea e0       	ldi	r30, 0x0A	; 10
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	ec 0f       	add	r30, r28
    1e14:	fd 1f       	adc	r31, r29
    1e16:	e9 0f       	add	r30, r25
    1e18:	f1 1d       	adc	r31, r1
    1e1a:	c0 80       	ld	r12, Z
    1e1c:	d1 2c       	mov	r13, r1
				itoa(input,fog,10);
    1e1e:	4a e0       	ldi	r20, 0x0A	; 10
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	be 01       	movw	r22, r28
    1e24:	63 5f       	subi	r22, 0xF3	; 243
    1e26:	7f 4f       	sbci	r23, 0xFF	; 255
    1e28:	c6 01       	movw	r24, r12
    1e2a:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
			}
			
			if ((input!=14) && (input !=15)){
    1e2e:	c6 01       	movw	r24, r12
    1e30:	0e 97       	sbiw	r24, 0x0e	; 14
    1e32:	02 97       	sbiw	r24, 0x02	; 2
    1e34:	08 f4       	brcc	.+2      	; 0x1e38 <Alarm_insert+0x156>
    1e36:	40 c0       	rjmp	.+128    	; 0x1eb8 <Alarm_insert+0x1d6>
				Alarm_Time[pos]=input;
    1e38:	f8 01       	movw	r30, r16
    1e3a:	ee 0f       	add	r30, r30
    1e3c:	ff 1f       	adc	r31, r31
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	8c 0f       	add	r24, r28
    1e44:	9d 1f       	adc	r25, r29
    1e46:	e8 0f       	add	r30, r24
    1e48:	f9 1f       	adc	r31, r25
    1e4a:	d7 8a       	std	Z+23, r13	; 0x17
    1e4c:	c6 8a       	std	Z+22, r12	; 0x16
				LCD_String_xy(0,pos,fog);
    1e4e:	a0 2e       	mov	r10, r16
    1e50:	ae 01       	movw	r20, r28
    1e52:	43 5f       	subi	r20, 0xF3	; 243
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	60 2f       	mov	r22, r16
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
				LCD_Command(0xC0);
    1e5e:	80 ec       	ldi	r24, 0xC0	; 192
    1e60:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
				LCD_String_xy(1,pos,"^");
    1e64:	49 e6       	ldi	r20, 0x69	; 105
    1e66:	53 e0       	ldi	r21, 0x03	; 3
    1e68:	60 2f       	mov	r22, r16
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
				
				if (pos<5 & pos!=3)
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	03 30       	cpi	r16, 0x03	; 3
    1e74:	11 05       	cpc	r17, r1
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <Alarm_insert+0x198>
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	b8 22       	and	r11, r24
    1e7c:	41 f0       	breq	.+16     	; 0x1e8e <Alarm_insert+0x1ac>
				{
					LCD_String_xy(1,pos-1," ");
    1e7e:	6f ef       	ldi	r22, 0xFF	; 255
    1e80:	6a 0d       	add	r22, r10
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	53 e0       	ldi	r21, 0x03	; 3
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
    1e8c:	0a c0       	rjmp	.+20     	; 0x1ea2 <Alarm_insert+0x1c0>
				}
				
				else if(pos==3)
    1e8e:	03 30       	cpi	r16, 0x03	; 3
    1e90:	11 05       	cpc	r17, r1
    1e92:	39 f4       	brne	.+14     	; 0x1ea2 <Alarm_insert+0x1c0>
				{
					LCD_String_xy(1,pos-2," ");
    1e94:	6e ef       	ldi	r22, 0xFE	; 254
    1e96:	6a 0d       	add	r22, r10
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	53 e0       	ldi	r21, 0x03	; 3
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
				}
				
			pos++;}
    1ea2:	0f 5f       	subi	r16, 0xFF	; 255
    1ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea6:	08 c0       	rjmp	.+16     	; 0x1eb8 <Alarm_insert+0x1d6>
			
			} else if (pos==2){
    1ea8:	02 30       	cpi	r16, 0x02	; 2
    1eaa:	11 05       	cpc	r17, r1
    1eac:	19 f4       	brne	.+6      	; 0x1eb4 <Alarm_insert+0x1d2>
			pos++;
    1eae:	0f 5f       	subi	r16, 0xFF	; 255
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <Alarm_insert+0x1d6>
		}
		else
		{
			pos=0;
    1eb4:	00 e0       	ldi	r16, 0x00	; 0
    1eb6:	10 e0       	ldi	r17, 0x00	; 0
		
		
		
		
		
		if(input==14)
    1eb8:	9e e0       	ldi	r25, 0x0E	; 14
    1eba:	c9 16       	cp	r12, r25
    1ebc:	d1 04       	cpc	r13, r1
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <Alarm_insert+0x1e0>
    1ec0:	76 c0       	rjmp	.+236    	; 0x1fae <Alarm_insert+0x2cc>
		{
			if ((Alarm_Time[0]*10+Alarm_Time[1]<24)&&(Alarm_Time[3]*10+Alarm_Time[4]<60)){    // Checking valid iNPUTS FOR TIME SETTING
    1ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec6:	9c 01       	movw	r18, r24
    1ec8:	22 0f       	add	r18, r18
    1eca:	33 1f       	adc	r19, r19
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	82 0f       	add	r24, r18
    1eda:	93 1f       	adc	r25, r19
    1edc:	29 8d       	ldd	r18, Y+25	; 0x19
    1ede:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1ee0:	82 0f       	add	r24, r18
    1ee2:	93 1f       	adc	r25, r19
    1ee4:	88 31       	cpi	r24, 0x18	; 24
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	0c f0       	brlt	.+2      	; 0x1eec <Alarm_insert+0x20a>
    1eea:	41 c0       	rjmp	.+130    	; 0x1f6e <Alarm_insert+0x28c>
    1eec:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1eee:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1ef0:	a9 01       	movw	r20, r18
    1ef2:	44 0f       	add	r20, r20
    1ef4:	55 1f       	adc	r21, r21
    1ef6:	22 0f       	add	r18, r18
    1ef8:	33 1f       	adc	r19, r19
    1efa:	22 0f       	add	r18, r18
    1efc:	33 1f       	adc	r19, r19
    1efe:	22 0f       	add	r18, r18
    1f00:	33 1f       	adc	r19, r19
    1f02:	24 0f       	add	r18, r20
    1f04:	35 1f       	adc	r19, r21
    1f06:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1f08:	58 a1       	ldd	r21, Y+32	; 0x20
    1f0a:	24 0f       	add	r18, r20
    1f0c:	35 1f       	adc	r19, r21
    1f0e:	2c 33       	cpi	r18, 0x3C	; 60
    1f10:	31 05       	cpc	r19, r1
    1f12:	6c f5       	brge	.+90     	; 0x1f6e <Alarm_insert+0x28c>
				
				Alarm[index][0]=Alarm_Time[0]*10+Alarm_Time[1];
    1f14:	f7 01       	movw	r30, r14
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	ea 5d       	subi	r30, 0xDA	; 218
    1f20:	fe 4f       	sbci	r31, 0xFE	; 254
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
				Alarm[index][1]=Alarm_Time[3]*10+Alarm_Time[4];
    1f26:	33 83       	std	Z+3, r19	; 0x03
    1f28:	22 83       	std	Z+2, r18	; 0x02
				Alarm_status[index]=true;
    1f2a:	f7 01       	movw	r30, r14
    1f2c:	ef 5d       	subi	r30, 0xDF	; 223
    1f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	80 83       	st	Z, r24
				LCD_Clear();
    1f34:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
				LCD_String("ALARM SET DONE");
    1f38:	8b e6       	ldi	r24, 0x6B	; 107
    1f3a:	93 e0       	ldi	r25, 0x03	; 3
    1f3c:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f40:	88 e8       	ldi	r24, 0x88	; 136
    1f42:	93 e1       	ldi	r25, 0x13	; 19
    1f44:	05 c0       	rjmp	.+10     	; 0x1f50 <Alarm_insert+0x26e>
    1f46:	e0 e9       	ldi	r30, 0x90	; 144
    1f48:	f1 e0       	ldi	r31, 0x01	; 1
    1f4a:	31 97       	sbiw	r30, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <Alarm_insert+0x268>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	c9 f7       	brne	.-14     	; 0x1f46 <Alarm_insert+0x264>
				_delay_ms(500);
				update_Alarm_Menu();
    1f54:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <update_Alarm_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f58:	80 e1       	ldi	r24, 0x10	; 16
    1f5a:	97 e2       	ldi	r25, 0x27	; 39
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <Alarm_insert+0x286>
    1f5e:	e0 e9       	ldi	r30, 0x90	; 144
    1f60:	f1 e0       	ldi	r31, 0x01	; 1
    1f62:	31 97       	sbiw	r30, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <Alarm_insert+0x280>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f66:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f68:	00 97       	sbiw	r24, 0x00	; 0
    1f6a:	c9 f7       	brne	.-14     	; 0x1f5e <Alarm_insert+0x27c>
    1f6c:	36 c0       	rjmp	.+108    	; 0x1fda <Alarm_insert+0x2f8>
				_delay_ms(1000);
				break;
				}else{
				LCD_Clear();
    1f6e:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
				LCD_String("INVALID INPUT");
    1f72:	8a e7       	ldi	r24, 0x7A	; 122
    1f74:	93 e0       	ldi	r25, 0x03	; 3
    1f76:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	80 e1       	ldi	r24, 0x10	; 16
    1f7c:	97 e2       	ldi	r25, 0x27	; 39
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <Alarm_insert+0x2a8>
    1f80:	e0 e9       	ldi	r30, 0x90	; 144
    1f82:	f1 e0       	ldi	r31, 0x01	; 1
    1f84:	31 97       	sbiw	r30, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <Alarm_insert+0x2a2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	00 97       	sbiw	r24, 0x00	; 0
    1f8c:	c9 f7       	brne	.-14     	; 0x1f80 <Alarm_insert+0x29e>
				_delay_ms(1000);
				LCD_Clear();
    1f8e:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
				LCD_Alarm_Print(Alarm[index][0],Alarm[index][1]);
    1f92:	f7 01       	movw	r30, r14
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	ea 5d       	subi	r30, 0xDA	; 218
    1f9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa0:	62 81       	ldd	r22, Z+2	; 0x02
    1fa2:	73 81       	ldd	r23, Z+3	; 0x03
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
    1fac:	c7 ce       	rjmp	.-626    	; 0x1d3c <Alarm_insert+0x5a>
				
			}
			
		}
		else if (input==15)
    1fae:	af e0       	ldi	r26, 0x0F	; 15
    1fb0:	ca 16       	cp	r12, r26
    1fb2:	d1 04       	cpc	r13, r1
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <Alarm_insert+0x2d6>
    1fb6:	c2 ce       	rjmp	.-636    	; 0x1d3c <Alarm_insert+0x5a>
		{
			DDRD=0x0f;
    1fb8:	8f e0       	ldi	r24, 0x0F	; 15
    1fba:	8a b9       	out	0x0a, r24	; 10
			PORTD&=0xfe;
    1fbc:	8b b1       	in	r24, 0x0b	; 11
    1fbe:	8e 7f       	andi	r24, 0xFE	; 254
    1fc0:	8b b9       	out	0x0b, r24	; 11
			update_Alarm_Menu();
    1fc2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <update_Alarm_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc6:	80 e1       	ldi	r24, 0x10	; 16
    1fc8:	97 e2       	ldi	r25, 0x27	; 39
    1fca:	05 c0       	rjmp	.+10     	; 0x1fd6 <Alarm_insert+0x2f4>
    1fcc:	e0 e9       	ldi	r30, 0x90	; 144
    1fce:	f1 e0       	ldi	r31, 0x01	; 1
    1fd0:	31 97       	sbiw	r30, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <Alarm_insert+0x2ee>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	c9 f7       	brne	.-14     	; 0x1fcc <Alarm_insert+0x2ea>
			break;
			
		}
	}
	
}
    1fda:	a0 96       	adiw	r28, 0x20	; 32
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	1f 91       	pop	r17
    1fec:	0f 91       	pop	r16
    1fee:	ff 90       	pop	r15
    1ff0:	ef 90       	pop	r14
    1ff2:	df 90       	pop	r13
    1ff4:	cf 90       	pop	r12
    1ff6:	bf 90       	pop	r11
    1ff8:	af 90       	pop	r10
    1ffa:	08 95       	ret

00001ffc <Alarm_01_Action>:
	}
	
}

void Alarm_01_Action(){     // Setting Alarm 01
	LCD_Init();
    1ffc:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	LCD_Clear();
    2000:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_Alarm_Print(Alarm[0][0],Alarm[0][1]);
    2004:	e6 e2       	ldi	r30, 0x26	; 38
    2006:	f1 e0       	ldi	r31, 0x01	; 1
    2008:	62 81       	ldd	r22, Z+2	; 0x02
    200a:	73 81       	ldd	r23, Z+3	; 0x03
    200c:	80 81       	ld	r24, Z
    200e:	91 81       	ldd	r25, Z+1	; 0x01
    2010:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
	Alarm_insert(0);
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Alarm_insert>
    201c:	08 95       	ret

0000201e <Alarm_02_Action>:
}

void Alarm_02_Action(){   // Setting Alarm 02
	LCD_Init();
    201e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	LCD_Clear();
    2022:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_Alarm_Print(Alarm[1][0],Alarm[1][1]);
    2026:	e6 e2       	ldi	r30, 0x26	; 38
    2028:	f1 e0       	ldi	r31, 0x01	; 1
    202a:	66 81       	ldd	r22, Z+6	; 0x06
    202c:	77 81       	ldd	r23, Z+7	; 0x07
    202e:	84 81       	ldd	r24, Z+4	; 0x04
    2030:	95 81       	ldd	r25, Z+5	; 0x05
    2032:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
	Alarm_insert(1);
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Alarm_insert>
    203e:	08 95       	ret

00002040 <Alarm_03_Action>:
}

void Alarm_03_Action(){ // Setting Alarm 03
	LCD_Init();
    2040:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	LCD_Clear();
    2044:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_Alarm_Print(Alarm[2][0],Alarm[2][1]);
    2048:	e6 e2       	ldi	r30, 0x26	; 38
    204a:	f1 e0       	ldi	r31, 0x01	; 1
    204c:	62 85       	ldd	r22, Z+10	; 0x0a
    204e:	73 85       	ldd	r23, Z+11	; 0x0b
    2050:	80 85       	ldd	r24, Z+8	; 0x08
    2052:	91 85       	ldd	r25, Z+9	; 0x09
    2054:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
	Alarm_insert(2);
    2058:	82 e0       	ldi	r24, 0x02	; 2
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Alarm_insert>
    2060:	08 95       	ret

00002062 <Alarm_04_Action>:
}

void Alarm_04_Action(){ // Setting Alarm 04
	LCD_Init();
    2062:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	LCD_Clear();
    2066:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_Alarm_Print(Alarm[3][0],Alarm[3][1]);
    206a:	e6 e2       	ldi	r30, 0x26	; 38
    206c:	f1 e0       	ldi	r31, 0x01	; 1
    206e:	66 85       	ldd	r22, Z+14	; 0x0e
    2070:	77 85       	ldd	r23, Z+15	; 0x0f
    2072:	84 85       	ldd	r24, Z+12	; 0x0c
    2074:	95 85       	ldd	r25, Z+13	; 0x0d
    2076:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
	Alarm_insert(3);
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Alarm_insert>
    2082:	08 95       	ret

00002084 <Alarm_05_Action>:
}

void Alarm_05_Action(){ // Setting Alarm 05
	LCD_Init();
    2084:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	LCD_Clear();
    2088:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_Alarm_Print(Alarm[4][0],Alarm[4][1]);
    208c:	e6 e2       	ldi	r30, 0x26	; 38
    208e:	f1 e0       	ldi	r31, 0x01	; 1
    2090:	62 89       	ldd	r22, Z+18	; 0x12
    2092:	73 89       	ldd	r23, Z+19	; 0x13
    2094:	80 89       	ldd	r24, Z+16	; 0x10
    2096:	91 89       	ldd	r25, Z+17	; 0x11
    2098:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <LCD_Alarm_Print>
	Alarm_insert(4);
    209c:	84 e0       	ldi	r24, 0x04	; 4
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <Alarm_insert>
    20a4:	08 95       	ret

000020a6 <execute_alarmAction>:
	}
}

void execute_alarmAction()
{
	switch (Alarm_Menu) {
    20a6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Alarm_Menu>
    20aa:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Alarm_Menu+0x1>
    20ae:	83 30       	cpi	r24, 0x03	; 3
    20b0:	91 05       	cpc	r25, r1
    20b2:	99 f0       	breq	.+38     	; 0x20da <execute_alarmAction+0x34>
    20b4:	34 f4       	brge	.+12     	; 0x20c2 <execute_alarmAction+0x1c>
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	91 05       	cpc	r25, r1
    20ba:	49 f0       	breq	.+18     	; 0x20ce <execute_alarmAction+0x28>
    20bc:	02 97       	sbiw	r24, 0x02	; 2
    20be:	51 f0       	breq	.+20     	; 0x20d4 <execute_alarmAction+0x2e>
    20c0:	08 95       	ret
    20c2:	84 30       	cpi	r24, 0x04	; 4
    20c4:	91 05       	cpc	r25, r1
    20c6:	61 f0       	breq	.+24     	; 0x20e0 <execute_alarmAction+0x3a>
    20c8:	05 97       	sbiw	r24, 0x05	; 5
    20ca:	69 f0       	breq	.+26     	; 0x20e6 <execute_alarmAction+0x40>
    20cc:	08 95       	ret
		case 1:
		Alarm_01_Action();
    20ce:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <Alarm_01_Action>
		break;
    20d2:	08 95       	ret
		case 2:
		Alarm_02_Action();
    20d4:	0e 94 0f 10 	call	0x201e	; 0x201e <Alarm_02_Action>
		break;
    20d8:	08 95       	ret
		case 3:
		Alarm_03_Action();
    20da:	0e 94 20 10 	call	0x2040	; 0x2040 <Alarm_03_Action>
		break;
    20de:	08 95       	ret
		case 4:
		Alarm_04_Action();
    20e0:	0e 94 31 10 	call	0x2062	; 0x2062 <Alarm_04_Action>
		break;
    20e4:	08 95       	ret
		case 5:
		Alarm_05_Action();
    20e6:	0e 94 42 10 	call	0x2084	; 0x2084 <Alarm_05_Action>
    20ea:	08 95       	ret

000020ec <LCD_Status_Print>:




void LCD_Status_Print(int num,int hour, int minute){
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	64 97       	sbiw	r28, 0x14	; 20
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	de bf       	out	0x3e, r29	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	cd bf       	out	0x3d, r28	; 61
	char D[20];
	if (hour<10 && minute<10){
    2100:	6a 30       	cpi	r22, 0x0A	; 10
    2102:	71 05       	cpc	r23, r1
    2104:	cc f4       	brge	.+50     	; 0x2138 <LCD_Status_Print+0x4c>
    2106:	4a 30       	cpi	r20, 0x0A	; 10
    2108:	51 05       	cpc	r21, r1
    210a:	b4 f4       	brge	.+44     	; 0x2138 <LCD_Status_Print+0x4c>
		sprintf(D,">>Alarm0%d= 0%d:0%d",num,hour,minute);
    210c:	5f 93       	push	r21
    210e:	4f 93       	push	r20
    2110:	7f 93       	push	r23
    2112:	6f 93       	push	r22
    2114:	9f 93       	push	r25
    2116:	8f 93       	push	r24
    2118:	88 e8       	ldi	r24, 0x88	; 136
    211a:	93 e0       	ldi	r25, 0x03	; 3
    211c:	9f 93       	push	r25
    211e:	8f 93       	push	r24
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	9f 93       	push	r25
    2126:	8f 93       	push	r24
    2128:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>



void LCD_Status_Print(int num,int hour, int minute){
	char D[20];
	if (hour<10 && minute<10){
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	47 c0       	rjmp	.+142    	; 0x21c6 <LCD_Status_Print+0xda>
		sprintf(D,">>Alarm0%d= 0%d:0%d",num,hour,minute);
		}else if (minute<10){
    2138:	4a 30       	cpi	r20, 0x0A	; 10
    213a:	51 05       	cpc	r21, r1
    213c:	b4 f4       	brge	.+44     	; 0x216a <LCD_Status_Print+0x7e>
		sprintf(D,">>Alarm0%d= %d:0%d",num,hour,minute);
    213e:	5f 93       	push	r21
    2140:	4f 93       	push	r20
    2142:	7f 93       	push	r23
    2144:	6f 93       	push	r22
    2146:	9f 93       	push	r25
    2148:	8f 93       	push	r24
    214a:	8c e9       	ldi	r24, 0x9C	; 156
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	9f 93       	push	r25
    2150:	8f 93       	push	r24
    2152:	ce 01       	movw	r24, r28
    2154:	01 96       	adiw	r24, 0x01	; 1
    2156:	9f 93       	push	r25
    2158:	8f 93       	push	r24
    215a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    215e:	0f b6       	in	r0, 0x3f	; 63
    2160:	f8 94       	cli
    2162:	de bf       	out	0x3e, r29	; 62
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	cd bf       	out	0x3d, r28	; 61
    2168:	2e c0       	rjmp	.+92     	; 0x21c6 <LCD_Status_Print+0xda>
		
		}else if (hour<10){
    216a:	6a 30       	cpi	r22, 0x0A	; 10
    216c:	71 05       	cpc	r23, r1
    216e:	b4 f4       	brge	.+44     	; 0x219c <LCD_Status_Print+0xb0>
		sprintf(D,">>Alarm0%d= 0%d:%d",num,hour,minute);
    2170:	5f 93       	push	r21
    2172:	4f 93       	push	r20
    2174:	7f 93       	push	r23
    2176:	6f 93       	push	r22
    2178:	9f 93       	push	r25
    217a:	8f 93       	push	r24
    217c:	8f ea       	ldi	r24, 0xAF	; 175
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	9f 93       	push	r25
    2182:	8f 93       	push	r24
    2184:	ce 01       	movw	r24, r28
    2186:	01 96       	adiw	r24, 0x01	; 1
    2188:	9f 93       	push	r25
    218a:	8f 93       	push	r24
    218c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	15 c0       	rjmp	.+42     	; 0x21c6 <LCD_Status_Print+0xda>
		}else{
		sprintf(D,">>Alarm0%d= %d:%d",num,hour,minute);
    219c:	5f 93       	push	r21
    219e:	4f 93       	push	r20
    21a0:	7f 93       	push	r23
    21a2:	6f 93       	push	r22
    21a4:	9f 93       	push	r25
    21a6:	8f 93       	push	r24
    21a8:	82 ec       	ldi	r24, 0xC2	; 194
    21aa:	93 e0       	ldi	r25, 0x03	; 3
    21ac:	9f 93       	push	r25
    21ae:	8f 93       	push	r24
    21b0:	ce 01       	movw	r24, r28
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	9f 93       	push	r25
    21b6:	8f 93       	push	r24
    21b8:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
	}
	LCD_String(D);
    21c6:	ce 01       	movw	r24, r28
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>

}
    21ce:	64 96       	adiw	r28, 0x14	; 20
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	08 95       	ret

000021e0 <update_Status_subMenu>:
	update_Status_subMenu(5);
	Status_subMenu_Buttons();
	//lcd_statusPrint(5,14,45);
}

void update_Status_subMenu(int alarmNum){
    21e0:	cf 93       	push	r28
    21e2:	df 93       	push	r29
    21e4:	ec 01       	movw	r28, r24
	switch(Status_subMenu){
    21e6:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Status_subMenu>
    21ea:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Status_subMenu+0x1>
    21ee:	82 30       	cpi	r24, 0x02	; 2
    21f0:	91 05       	cpc	r25, r1
    21f2:	79 f1       	breq	.+94     	; 0x2252 <update_Status_subMenu+0x72>
    21f4:	2c f4       	brge	.+10     	; 0x2200 <update_Status_subMenu+0x20>
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	59 f0       	breq	.+22     	; 0x2210 <update_Status_subMenu+0x30>
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	81 f0       	breq	.+32     	; 0x221e <update_Status_subMenu+0x3e>
    21fe:	63 c0       	rjmp	.+198    	; 0x22c6 <update_Status_subMenu+0xe6>
    2200:	83 30       	cpi	r24, 0x03	; 3
    2202:	91 05       	cpc	r25, r1
    2204:	09 f4       	brne	.+2      	; 0x2208 <update_Status_subMenu+0x28>
    2206:	3f c0       	rjmp	.+126    	; 0x2286 <update_Status_subMenu+0xa6>
    2208:	04 97       	sbiw	r24, 0x04	; 4
    220a:	09 f4       	brne	.+2      	; 0x220e <update_Status_subMenu+0x2e>
    220c:	56 c0       	rjmp	.+172    	; 0x22ba <update_Status_subMenu+0xda>
    220e:	5b c0       	rjmp	.+182    	; 0x22c6 <update_Status_subMenu+0xe6>
		case 0:
		Status_subMenu = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Status_subMenu+0x1>
    2218:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Status_subMenu>
		break;
    221c:	54 c0       	rjmp	.+168    	; 0x22c6 <update_Status_subMenu+0xe6>
		case 1:							//initial display state
		LCD_Init();
    221e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    2222:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_Status_Print(alarmNum,Alarm[alarmNum][0],Alarm[alarmNum][1]);
    2226:	fe 01       	movw	r30, r28
    2228:	ee 0f       	add	r30, r30
    222a:	ff 1f       	adc	r31, r31
    222c:	ee 0f       	add	r30, r30
    222e:	ff 1f       	adc	r31, r31
    2230:	ea 5d       	subi	r30, 0xDA	; 218
    2232:	fe 4f       	sbci	r31, 0xFE	; 254
    2234:	42 81       	ldd	r20, Z+2	; 0x02
    2236:	53 81       	ldd	r21, Z+3	; 0x03
    2238:	60 81       	ld	r22, Z
    223a:	71 81       	ldd	r23, Z+1	; 0x01
    223c:	ce 01       	movw	r24, r28
    223e:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_Status_Print>
		//LCD_String(">>Alarm01: 11:45");
		LCD_Command(0xC0);
    2242:	80 ec       	ldi	r24, 0xC0	; 192
    2244:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(" <ON> OFF DEL   ");
    2248:	84 ed       	ldi	r24, 0xD4	; 212
    224a:	93 e0       	ldi	r25, 0x03	; 3
    224c:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    2250:	3a c0       	rjmp	.+116    	; 0x22c6 <update_Status_subMenu+0xe6>
		case 2:							//2nd display state
		LCD_Init();
    2252:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    2256:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_Status_Print(alarmNum,Alarm[alarmNum][0],Alarm[alarmNum][1]);
    225a:	fe 01       	movw	r30, r28
    225c:	ee 0f       	add	r30, r30
    225e:	ff 1f       	adc	r31, r31
    2260:	ee 0f       	add	r30, r30
    2262:	ff 1f       	adc	r31, r31
    2264:	ea 5d       	subi	r30, 0xDA	; 218
    2266:	fe 4f       	sbci	r31, 0xFE	; 254
    2268:	42 81       	ldd	r20, Z+2	; 0x02
    226a:	53 81       	ldd	r21, Z+3	; 0x03
    226c:	60 81       	ld	r22, Z
    226e:	71 81       	ldd	r23, Z+1	; 0x01
    2270:	ce 01       	movw	r24, r28
    2272:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_Status_Print>
		LCD_Command(0xC0);
    2276:	80 ec       	ldi	r24, 0xC0	; 192
    2278:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(" ON <OFF> DEL   ");
    227c:	85 ee       	ldi	r24, 0xE5	; 229
    227e:	93 e0       	ldi	r25, 0x03	; 3
    2280:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    2284:	20 c0       	rjmp	.+64     	; 0x22c6 <update_Status_subMenu+0xe6>
		case 3:							//3rd display state
		LCD_Init();
    2286:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    228a:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_Status_Print(alarmNum,Alarm[alarmNum][0],Alarm[alarmNum][1]);
    228e:	fe 01       	movw	r30, r28
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	ee 0f       	add	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	ea 5d       	subi	r30, 0xDA	; 218
    229a:	fe 4f       	sbci	r31, 0xFE	; 254
    229c:	42 81       	ldd	r20, Z+2	; 0x02
    229e:	53 81       	ldd	r21, Z+3	; 0x03
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	ce 01       	movw	r24, r28
    22a6:	0e 94 76 10 	call	0x20ec	; 0x20ec <LCD_Status_Print>
		LCD_Command(0xC0);
    22aa:	80 ec       	ldi	r24, 0xC0	; 192
    22ac:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(" ON OFF <DEL>   ");
    22b0:	86 ef       	ldi	r24, 0xF6	; 246
    22b2:	93 e0       	ldi	r25, 0x03	; 3
    22b4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    22b8:	06 c0       	rjmp	.+12     	; 0x22c6 <update_Status_subMenu+0xe6>
		case 4:
		Status_subMenu = 1;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Status_subMenu+0x1>
    22c2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Status_subMenu>
		break;
	}
}
    22c6:	df 91       	pop	r29
    22c8:	cf 91       	pop	r28
    22ca:	08 95       	ret

000022cc <LCD_Initial_Print>:


void LCD_Initial_Print(int num,int hour, int minute){
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	64 97       	sbiw	r28, 0x14	; 20
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	de bf       	out	0x3e, r29	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	cd bf       	out	0x3d, r28	; 61
	char E[20];
	if (hour<10 && minute<10){
    22e0:	6a 30       	cpi	r22, 0x0A	; 10
    22e2:	71 05       	cpc	r23, r1
    22e4:	cc f4       	brge	.+50     	; 0x2318 <LCD_Initial_Print+0x4c>
    22e6:	4a 30       	cpi	r20, 0x0A	; 10
    22e8:	51 05       	cpc	r21, r1
    22ea:	b4 f4       	brge	.+44     	; 0x2318 <LCD_Initial_Print+0x4c>
		sprintf(E,"Alarm0%d= 0%d:0%d  ",num,hour,minute);
    22ec:	5f 93       	push	r21
    22ee:	4f 93       	push	r20
    22f0:	7f 93       	push	r23
    22f2:	6f 93       	push	r22
    22f4:	9f 93       	push	r25
    22f6:	8f 93       	push	r24
    22f8:	87 e0       	ldi	r24, 0x07	; 7
    22fa:	94 e0       	ldi	r25, 0x04	; 4
    22fc:	9f 93       	push	r25
    22fe:	8f 93       	push	r24
    2300:	ce 01       	movw	r24, r28
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	9f 93       	push	r25
    2306:	8f 93       	push	r24
    2308:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
}


void LCD_Initial_Print(int num,int hour, int minute){
	char E[20];
	if (hour<10 && minute<10){
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	de bf       	out	0x3e, r29	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	47 c0       	rjmp	.+142    	; 0x23a6 <LCD_Initial_Print+0xda>
		sprintf(E,"Alarm0%d= 0%d:0%d  ",num,hour,minute);
		}else if (minute<10){
    2318:	4a 30       	cpi	r20, 0x0A	; 10
    231a:	51 05       	cpc	r21, r1
    231c:	b4 f4       	brge	.+44     	; 0x234a <LCD_Initial_Print+0x7e>
		sprintf(E,"Alarm0%d= %d:0%d  ",num,hour,minute);
    231e:	5f 93       	push	r21
    2320:	4f 93       	push	r20
    2322:	7f 93       	push	r23
    2324:	6f 93       	push	r22
    2326:	9f 93       	push	r25
    2328:	8f 93       	push	r24
    232a:	8b e1       	ldi	r24, 0x1B	; 27
    232c:	94 e0       	ldi	r25, 0x04	; 4
    232e:	9f 93       	push	r25
    2330:	8f 93       	push	r24
    2332:	ce 01       	movw	r24, r28
    2334:	01 96       	adiw	r24, 0x01	; 1
    2336:	9f 93       	push	r25
    2338:	8f 93       	push	r24
    233a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	2e c0       	rjmp	.+92     	; 0x23a6 <LCD_Initial_Print+0xda>
		
		}else if (hour<10){
    234a:	6a 30       	cpi	r22, 0x0A	; 10
    234c:	71 05       	cpc	r23, r1
    234e:	b4 f4       	brge	.+44     	; 0x237c <LCD_Initial_Print+0xb0>
		sprintf(E,"Alarm0%d= 0%d:%d  ",num,hour,minute);
    2350:	5f 93       	push	r21
    2352:	4f 93       	push	r20
    2354:	7f 93       	push	r23
    2356:	6f 93       	push	r22
    2358:	9f 93       	push	r25
    235a:	8f 93       	push	r24
    235c:	8e e2       	ldi	r24, 0x2E	; 46
    235e:	94 e0       	ldi	r25, 0x04	; 4
    2360:	9f 93       	push	r25
    2362:	8f 93       	push	r24
    2364:	ce 01       	movw	r24, r28
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	9f 93       	push	r25
    236a:	8f 93       	push	r24
    236c:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	15 c0       	rjmp	.+42     	; 0x23a6 <LCD_Initial_Print+0xda>
		}else{
		sprintf(E,"Alarm0%d= %d:%d  ",num,hour,minute);
    237c:	5f 93       	push	r21
    237e:	4f 93       	push	r20
    2380:	7f 93       	push	r23
    2382:	6f 93       	push	r22
    2384:	9f 93       	push	r25
    2386:	8f 93       	push	r24
    2388:	81 e4       	ldi	r24, 0x41	; 65
    238a:	94 e0       	ldi	r25, 0x04	; 4
    238c:	9f 93       	push	r25
    238e:	8f 93       	push	r24
    2390:	ce 01       	movw	r24, r28
    2392:	01 96       	adiw	r24, 0x01	; 1
    2394:	9f 93       	push	r25
    2396:	8f 93       	push	r24
    2398:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
	}
	LCD_String(E);
    23a6:	ce 01       	movw	r24, r28
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>

}
    23ae:	64 96       	adiw	r28, 0x14	; 20
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	08 95       	ret

000023c0 <LCD_Condition_Print>:

void LCD_Condition_Print(bool status,int hour, int minute){
	if ((status==false)&&(hour==00)&&(minute==00)){
    23c0:	81 11       	cpse	r24, r1
    23c2:	09 c0       	rjmp	.+18     	; 0x23d6 <LCD_Condition_Print+0x16>
    23c4:	67 2b       	or	r22, r23
    23c6:	39 f4       	brne	.+14     	; 0x23d6 <LCD_Condition_Print+0x16>
    23c8:	45 2b       	or	r20, r21
    23ca:	29 f4       	brne	.+10     	; 0x23d6 <LCD_Condition_Print+0x16>
		LCD_String("STATUS:NOT SET  ");
    23cc:	83 e5       	ldi	r24, 0x53	; 83
    23ce:	94 e0       	ldi	r25, 0x04	; 4
    23d0:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
    23d4:	08 95       	ret
	}else if (status==false){
    23d6:	81 11       	cpse	r24, r1
    23d8:	05 c0       	rjmp	.+10     	; 0x23e4 <LCD_Condition_Print+0x24>
	LCD_String("STATUS:OFF       ");
    23da:	84 e6       	ldi	r24, 0x64	; 100
    23dc:	94 e0       	ldi	r25, 0x04	; 4
    23de:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
    23e2:	08 95       	ret
	}else if (status==true){
    23e4:	88 23       	and	r24, r24
    23e6:	21 f0       	breq	.+8      	; 0x23f0 <LCD_Condition_Print+0x30>
	LCD_String("STATUS:ON        ");
    23e8:	86 e7       	ldi	r24, 0x76	; 118
    23ea:	94 e0       	ldi	r25, 0x04	; 4
    23ec:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
    23f0:	08 95       	ret

000023f2 <update_Status_Menu>:
int Status_Menu=1;
int Status_subMenu=1;
int Alarm[5][2];
int alarmNum=1;
bool Alarm_status[5];
void update_Status_Menu(){
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
	switch(Status_Menu){
    23f6:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <Status_Menu>
    23fa:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <Status_Menu+0x1>
    23fe:	e7 30       	cpi	r30, 0x07	; 7
    2400:	f1 05       	cpc	r31, r1
    2402:	08 f0       	brcs	.+2      	; 0x2406 <update_Status_Menu+0x14>
    2404:	a2 c0       	rjmp	.+324    	; 0x254a <update_Status_Menu+0x158>
    2406:	ee 5b       	subi	r30, 0xBE	; 190
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <__tablejump2__>
		case 0:
		Status_Menu = 1;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <Status_Menu+0x1>
    2416:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Status_Menu>
		break;
    241a:	97 c0       	rjmp	.+302    	; 0x254a <update_Status_Menu+0x158>
		case 1:							//initial display state
		LCD_Init();
    241c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    2420:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_Initial_Print(Status_Menu,Alarm[0][0],Alarm[0][1]);
    2424:	c6 e2       	ldi	r28, 0x26	; 38
    2426:	d1 e0       	ldi	r29, 0x01	; 1
    2428:	4a 81       	ldd	r20, Y+2	; 0x02
    242a:	5b 81       	ldd	r21, Y+3	; 0x03
    242c:	68 81       	ld	r22, Y
    242e:	79 81       	ldd	r23, Y+1	; 0x01
    2430:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    2434:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    2438:	0e 94 66 11 	call	0x22cc	; 0x22cc <LCD_Initial_Print>
		LCD_Command(0xC0);
    243c:	80 ec       	ldi	r24, 0xC0	; 192
    243e:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Condition_Print(Alarm_status[0],Alarm[0][0],Alarm[0][1]);
    2442:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Alarm_status>
    2446:	4a 81       	ldd	r20, Y+2	; 0x02
    2448:	5b 81       	ldd	r21, Y+3	; 0x03
    244a:	68 81       	ld	r22, Y
    244c:	79 81       	ldd	r23, Y+1	; 0x01
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Condition_Print>
		break;
    2454:	7a c0       	rjmp	.+244    	; 0x254a <update_Status_Menu+0x158>
		case 2:							//2nd display state
		LCD_Init();
    2456:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    245a:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_Initial_Print(Status_Menu,Alarm[1][0],Alarm[1][1]);
    245e:	c6 e2       	ldi	r28, 0x26	; 38
    2460:	d1 e0       	ldi	r29, 0x01	; 1
    2462:	4e 81       	ldd	r20, Y+6	; 0x06
    2464:	5f 81       	ldd	r21, Y+7	; 0x07
    2466:	6c 81       	ldd	r22, Y+4	; 0x04
    2468:	7d 81       	ldd	r23, Y+5	; 0x05
    246a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    246e:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    2472:	0e 94 66 11 	call	0x22cc	; 0x22cc <LCD_Initial_Print>
		LCD_Command(0xC0);
    2476:	80 ec       	ldi	r24, 0xC0	; 192
    2478:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Condition_Print(Alarm_status[1],Alarm[1][0],Alarm[1][1]);
    247c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Alarm_status+0x1>
    2480:	4e 81       	ldd	r20, Y+6	; 0x06
    2482:	5f 81       	ldd	r21, Y+7	; 0x07
    2484:	6c 81       	ldd	r22, Y+4	; 0x04
    2486:	7d 81       	ldd	r23, Y+5	; 0x05
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Condition_Print>
		break;
    248e:	5d c0       	rjmp	.+186    	; 0x254a <update_Status_Menu+0x158>
		case 3:							//Third display state
		LCD_Init();
    2490:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    2494:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_Initial_Print(Status_Menu,Alarm[2][0],Alarm[2][1]);
    2498:	c6 e2       	ldi	r28, 0x26	; 38
    249a:	d1 e0       	ldi	r29, 0x01	; 1
    249c:	4a 85       	ldd	r20, Y+10	; 0x0a
    249e:	5b 85       	ldd	r21, Y+11	; 0x0b
    24a0:	68 85       	ldd	r22, Y+8	; 0x08
    24a2:	79 85       	ldd	r23, Y+9	; 0x09
    24a4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    24a8:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    24ac:	0e 94 66 11 	call	0x22cc	; 0x22cc <LCD_Initial_Print>
		LCD_Command(0xC0);
    24b0:	80 ec       	ldi	r24, 0xC0	; 192
    24b2:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Condition_Print(Alarm_status[2],Alarm[2][0],Alarm[2][1]);
    24b6:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Alarm_status+0x2>
    24ba:	4a 85       	ldd	r20, Y+10	; 0x0a
    24bc:	5b 85       	ldd	r21, Y+11	; 0x0b
    24be:	68 85       	ldd	r22, Y+8	; 0x08
    24c0:	79 85       	ldd	r23, Y+9	; 0x09
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Condition_Print>
		break;
    24c8:	40 c0       	rjmp	.+128    	; 0x254a <update_Status_Menu+0x158>
		case 4:							//fourth display state
		LCD_Init();
    24ca:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    24ce:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_Initial_Print(Status_Menu,Alarm[3][0],Alarm[3][1]);
    24d2:	c6 e2       	ldi	r28, 0x26	; 38
    24d4:	d1 e0       	ldi	r29, 0x01	; 1
    24d6:	4e 85       	ldd	r20, Y+14	; 0x0e
    24d8:	5f 85       	ldd	r21, Y+15	; 0x0f
    24da:	6c 85       	ldd	r22, Y+12	; 0x0c
    24dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    24de:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    24e2:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    24e6:	0e 94 66 11 	call	0x22cc	; 0x22cc <LCD_Initial_Print>
		LCD_Command(0xC0);
    24ea:	80 ec       	ldi	r24, 0xC0	; 192
    24ec:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Condition_Print(Alarm_status[3],Alarm[3][0],Alarm[3][1]);
    24f0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <Alarm_status+0x3>
    24f4:	4e 85       	ldd	r20, Y+14	; 0x0e
    24f6:	5f 85       	ldd	r21, Y+15	; 0x0f
    24f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    24fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Condition_Print>
		break;
    2502:	23 c0       	rjmp	.+70     	; 0x254a <update_Status_Menu+0x158>
		case 5:
		LCD_Init();
    2504:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    2508:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_Initial_Print(Status_Menu,Alarm[4][0],Alarm[4][1]);
    250c:	c6 e2       	ldi	r28, 0x26	; 38
    250e:	d1 e0       	ldi	r29, 0x01	; 1
    2510:	4a 89       	ldd	r20, Y+18	; 0x12
    2512:	5b 89       	ldd	r21, Y+19	; 0x13
    2514:	68 89       	ldd	r22, Y+16	; 0x10
    2516:	79 89       	ldd	r23, Y+17	; 0x11
    2518:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    251c:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    2520:	0e 94 66 11 	call	0x22cc	; 0x22cc <LCD_Initial_Print>
		LCD_Command(0xC0);
    2524:	80 ec       	ldi	r24, 0xC0	; 192
    2526:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_Condition_Print(Alarm_status[4],Alarm[4][0],Alarm[4][1]);
    252a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <Alarm_status+0x4>
    252e:	4a 89       	ldd	r20, Y+18	; 0x12
    2530:	5b 89       	ldd	r21, Y+19	; 0x13
    2532:	68 89       	ldd	r22, Y+16	; 0x10
    2534:	79 89       	ldd	r23, Y+17	; 0x11
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Condition_Print>
		break;
    253c:	06 c0       	rjmp	.+12     	; 0x254a <update_Status_Menu+0x158>
		case 6:
		Status_Menu = 4;
    253e:	84 e0       	ldi	r24, 0x04	; 4
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <Status_Menu+0x1>
    2546:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Status_Menu>
	}
}
    254a:	df 91       	pop	r29
    254c:	cf 91       	pop	r28
    254e:	08 95       	ret

00002550 <ON_Action>:
}



void ON_Action(){
	Alarm_status[Status_Menu-1]=true;
    2550:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <Status_Menu>
    2554:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <Status_Menu+0x1>
    2558:	e0 5e       	subi	r30, 0xE0	; 224
    255a:	fe 4f       	sbci	r31, 0xFE	; 254
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	80 83       	st	Z, r24
	LCD_Clear();
    2560:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_String("ALARM IS ON");
    2564:	88 e8       	ldi	r24, 0x88	; 136
    2566:	94 e0       	ldi	r25, 0x04	; 4
    2568:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256c:	80 e1       	ldi	r24, 0x10	; 16
    256e:	97 e2       	ldi	r25, 0x27	; 39
    2570:	05 c0       	rjmp	.+10     	; 0x257c <ON_Action+0x2c>
    2572:	e0 e9       	ldi	r30, 0x90	; 144
    2574:	f1 e0       	ldi	r31, 0x01	; 1
    2576:	31 97       	sbiw	r30, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <ON_Action+0x26>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	c9 f7       	brne	.-14     	; 0x2572 <ON_Action+0x22>
	_delay_ms(1000);
	update_Status_Menu();
    2580:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <update_Status_Menu>
    2584:	08 95       	ret

00002586 <OFF_Action>:
}


void OFF_Action(){
	Alarm_status[Status_Menu-1]=false;
    2586:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <Status_Menu>
    258a:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <Status_Menu+0x1>
    258e:	e0 5e       	subi	r30, 0xE0	; 224
    2590:	fe 4f       	sbci	r31, 0xFE	; 254
    2592:	10 82       	st	Z, r1
	LCD_Clear();
    2594:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_String("ALARM IS OFF");
    2598:	84 e9       	ldi	r24, 0x94	; 148
    259a:	94 e0       	ldi	r25, 0x04	; 4
    259c:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a0:	80 e1       	ldi	r24, 0x10	; 16
    25a2:	97 e2       	ldi	r25, 0x27	; 39
    25a4:	05 c0       	rjmp	.+10     	; 0x25b0 <OFF_Action+0x2a>
    25a6:	e0 e9       	ldi	r30, 0x90	; 144
    25a8:	f1 e0       	ldi	r31, 0x01	; 1
    25aa:	31 97       	sbiw	r30, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <OFF_Action+0x24>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	c9 f7       	brne	.-14     	; 0x25a6 <OFF_Action+0x20>
	_delay_ms(1000);
	update_Status_Menu();
    25b4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <update_Status_Menu>
    25b8:	08 95       	ret

000025ba <Del_Action>:
}

void Del_Action(){
	Alarm[Status_Menu-1][0]=00;
    25ba:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    25be:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	fc 01       	movw	r30, r24
    25c6:	ee 0f       	add	r30, r30
    25c8:	ff 1f       	adc	r31, r31
    25ca:	ee 0f       	add	r30, r30
    25cc:	ff 1f       	adc	r31, r31
    25ce:	ea 5d       	subi	r30, 0xDA	; 218
    25d0:	fe 4f       	sbci	r31, 0xFE	; 254
    25d2:	11 82       	std	Z+1, r1	; 0x01
    25d4:	10 82       	st	Z, r1
	Alarm[Status_Menu-1][1]=00;
    25d6:	13 82       	std	Z+3, r1	; 0x03
    25d8:	12 82       	std	Z+2, r1	; 0x02
	Alarm_status[Status_Menu-1]=false;
    25da:	fc 01       	movw	r30, r24
    25dc:	ef 5d       	subi	r30, 0xDF	; 223
    25de:	fe 4f       	sbci	r31, 0xFE	; 254
    25e0:	10 82       	st	Z, r1
	LCD_Clear();
    25e2:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_String("ALARM IS DELETED");
    25e6:	81 ea       	ldi	r24, 0xA1	; 161
    25e8:	94 e0       	ldi	r25, 0x04	; 4
    25ea:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	80 e1       	ldi	r24, 0x10	; 16
    25f0:	97 e2       	ldi	r25, 0x27	; 39
    25f2:	05 c0       	rjmp	.+10     	; 0x25fe <Del_Action+0x44>
    25f4:	e0 e9       	ldi	r30, 0x90	; 144
    25f6:	f1 e0       	ldi	r31, 0x01	; 1
    25f8:	31 97       	sbiw	r30, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <Del_Action+0x3e>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	c9 f7       	brne	.-14     	; 0x25f4 <Del_Action+0x3a>
	_delay_ms(1000);
	update_Status_Menu();
    2602:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <update_Status_Menu>
    2606:	08 95       	ret

00002608 <execute_Status_sub_Action>:



void execute_Status_sub_Action()
{
	switch (Status_subMenu) {
    2608:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Status_subMenu>
    260c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Status_subMenu+0x1>
    2610:	82 30       	cpi	r24, 0x02	; 2
    2612:	91 05       	cpc	r25, r1
    2614:	41 f0       	breq	.+16     	; 0x2626 <execute_Status_sub_Action+0x1e>
    2616:	83 30       	cpi	r24, 0x03	; 3
    2618:	91 05       	cpc	r25, r1
    261a:	41 f0       	breq	.+16     	; 0x262c <execute_Status_sub_Action+0x24>
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	41 f4       	brne	.+16     	; 0x2630 <execute_Status_sub_Action+0x28>
		case 1:
		ON_Action();
    2620:	0e 94 a8 12 	call	0x2550	; 0x2550 <ON_Action>
		break;
    2624:	08 95       	ret
		case 2:
		OFF_Action();
    2626:	0e 94 c3 12 	call	0x2586	; 0x2586 <OFF_Action>
		break;
    262a:	08 95       	ret
		case 3:
		Del_Action();
    262c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <Del_Action>
    2630:	08 95       	ret

00002632 <Status_subMenu_Buttons>:
void Status_subMenu_Buttons()
{
	
	while(1)
	{
		DDRD=0x0f;
    2632:	8f e0       	ldi	r24, 0x0F	; 15
    2634:	8a b9       	out	0x0a, r24	; 10
		PORTD&=0xfe;
    2636:	8b b1       	in	r24, 0x0b	; 11
    2638:	8e 7f       	andi	r24, 0xFE	; 254
    263a:	8b b9       	out	0x0b, r24	; 11
		
		if (~PINC & (1<<PINC0)){
    263c:	30 99       	sbic	0x06, 0	; 6
    263e:	10 c0       	rjmp	.+32     	; 0x2660 <Status_subMenu_Buttons+0x2e>
    2640:	06 c0       	rjmp	.+12     	; 0x264e <Status_subMenu_Buttons+0x1c>
    2642:	e0 e9       	ldi	r30, 0x90	; 144
    2644:	f1 e0       	ldi	r31, 0x01	; 1
    2646:	31 97       	sbiw	r30, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <Status_subMenu_Buttons+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <Status_subMenu_Buttons+0x20>
    264e:	80 e1       	ldi	r24, 0x10	; 16
    2650:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2652:	00 97       	sbiw	r24, 0x00	; 0
    2654:	b1 f7       	brne	.-20     	; 0x2642 <Status_subMenu_Buttons+0x10>
			_delay_ms(1000);
			LCD_Clear();
    2656:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
			execute_Status_sub_Action();
    265a:	0e 94 04 13 	call	0x2608	; 0x2608 <execute_Status_sub_Action>
			break;
    265e:	08 95       	ret
	
		}
		else if (~PINC & (1<<PINC1)){
    2660:	31 99       	sbic	0x06, 1	; 6
    2662:	0d c0       	rjmp	.+26     	; 0x267e <Status_subMenu_Buttons+0x4c>
			update_Status_Menu();
    2664:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <update_Status_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2668:	80 e1       	ldi	r24, 0x10	; 16
    266a:	97 e2       	ldi	r25, 0x27	; 39
    266c:	05 c0       	rjmp	.+10     	; 0x2678 <Status_subMenu_Buttons+0x46>
    266e:	e0 e9       	ldi	r30, 0x90	; 144
    2670:	f1 e0       	ldi	r31, 0x01	; 1
    2672:	31 97       	sbiw	r30, 0x01	; 1
    2674:	f1 f7       	brne	.-4      	; 0x2672 <Status_subMenu_Buttons+0x40>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2676:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	00 97       	sbiw	r24, 0x00	; 0
    267a:	c9 f7       	brne	.-14     	; 0x266e <Status_subMenu_Buttons+0x3c>
    267c:	08 95       	ret
			_delay_ms(1000);
			break;
		}
		else if (~PIND & (1<<PIND4)){
    267e:	4c 99       	sbic	0x09, 4	; 9
    2680:	1a c0       	rjmp	.+52     	; 0x26b6 <Status_subMenu_Buttons+0x84>
			
			Status_subMenu--;
    2682:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Status_subMenu>
    2686:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Status_subMenu+0x1>
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Status_subMenu+0x1>
    2690:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Status_subMenu>
			update_Status_subMenu(Status_Menu);
    2694:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    2698:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    269c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <update_Status_subMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	80 e1       	ldi	r24, 0x10	; 16
    26a2:	97 e2       	ldi	r25, 0x27	; 39
    26a4:	05 c0       	rjmp	.+10     	; 0x26b0 <Status_subMenu_Buttons+0x7e>
    26a6:	e0 e9       	ldi	r30, 0x90	; 144
    26a8:	f1 e0       	ldi	r31, 0x01	; 1
    26aa:	31 97       	sbiw	r30, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <Status_subMenu_Buttons+0x78>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	c9 f7       	brne	.-14     	; 0x26a6 <Status_subMenu_Buttons+0x74>
    26b4:	be cf       	rjmp	.-132    	; 0x2632 <Status_subMenu_Buttons>
			_delay_ms(1000);
			
			
		}
		else if (~PIND & (1<<PIND6)){
    26b6:	4e 99       	sbic	0x09, 6	; 9
    26b8:	bc cf       	rjmp	.-136    	; 0x2632 <Status_subMenu_Buttons>
			
			Status_subMenu++;
    26ba:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Status_subMenu>
    26be:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <Status_subMenu+0x1>
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Status_subMenu+0x1>
    26c8:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Status_subMenu>
			update_Status_subMenu(Status_Menu);
    26cc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    26d0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    26d4:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <update_Status_subMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	80 e1       	ldi	r24, 0x10	; 16
    26da:	97 e2       	ldi	r25, 0x27	; 39
    26dc:	05 c0       	rjmp	.+10     	; 0x26e8 <Status_subMenu_Buttons+0xb6>
    26de:	e0 e9       	ldi	r30, 0x90	; 144
    26e0:	f1 e0       	ldi	r31, 0x01	; 1
    26e2:	31 97       	sbiw	r30, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <Status_subMenu_Buttons+0xb0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	00 97       	sbiw	r24, 0x00	; 0
    26ea:	c9 f7       	brne	.-14     	; 0x26de <Status_subMenu_Buttons+0xac>
    26ec:	a2 cf       	rjmp	.-188    	; 0x2632 <Status_subMenu_Buttons>

000026ee <Delete_Action1>:
		case 6:
		Status_Menu = 4;
	}
}
void Delete_Action1(){
	Status_subMenu = 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Status_subMenu+0x1>
    26f6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Status_subMenu>
	update_Status_subMenu(1);
    26fa:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <update_Status_subMenu>
	Status_subMenu_Buttons();
    26fe:	0e 94 19 13 	call	0x2632	; 0x2632 <Status_subMenu_Buttons>
    2702:	08 95       	ret

00002704 <Delete_Action2>:
	//lcd_statusPrint(1,D_alarm[0][0],D_alarm[0][1]);
}

void Delete_Action2(){
	Status_subMenu = 1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Status_subMenu+0x1>
    270c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Status_subMenu>
	update_Status_subMenu(2);
    2710:	82 e0       	ldi	r24, 0x02	; 2
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <update_Status_subMenu>
	Status_subMenu_Buttons();
    2718:	0e 94 19 13 	call	0x2632	; 0x2632 <Status_subMenu_Buttons>
    271c:	08 95       	ret

0000271e <Delete_Action3>:
	//lcd_statusPrint(2,12,45);
}

void Delete_Action3(){
	Status_subMenu = 1;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Status_subMenu+0x1>
    2726:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Status_subMenu>
	update_Status_subMenu(3);
    272a:	83 e0       	ldi	r24, 0x03	; 3
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <update_Status_subMenu>
	Status_subMenu_Buttons();
    2732:	0e 94 19 13 	call	0x2632	; 0x2632 <Status_subMenu_Buttons>
    2736:	08 95       	ret

00002738 <Delete_Action4>:
	//lcd_statusPrint(3,12,45);
}

void Delete_Action4(){
	Status_subMenu = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Status_subMenu+0x1>
    2740:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Status_subMenu>
	update_Status_subMenu(4);
    2744:	84 e0       	ldi	r24, 0x04	; 4
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <update_Status_subMenu>
	Status_subMenu_Buttons();
    274c:	0e 94 19 13 	call	0x2632	; 0x2632 <Status_subMenu_Buttons>
    2750:	08 95       	ret

00002752 <Delete_Action5>:
	//lcd_statusPrint(4,13,45);
}

void Delete_Action5(){
	Status_subMenu = 1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <Status_subMenu+0x1>
    275a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Status_subMenu>
	update_Status_subMenu(5);
    275e:	85 e0       	ldi	r24, 0x05	; 5
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <update_Status_subMenu>
	Status_subMenu_Buttons();
    2766:	0e 94 19 13 	call	0x2632	; 0x2632 <Status_subMenu_Buttons>
    276a:	08 95       	ret

0000276c <execute_StatusAction>:
	}
}

void execute_StatusAction()
{
	switch (Status_Menu) {
    276c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    2770:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    2774:	83 30       	cpi	r24, 0x03	; 3
    2776:	91 05       	cpc	r25, r1
    2778:	99 f0       	breq	.+38     	; 0x27a0 <execute_StatusAction+0x34>
    277a:	34 f4       	brge	.+12     	; 0x2788 <execute_StatusAction+0x1c>
    277c:	81 30       	cpi	r24, 0x01	; 1
    277e:	91 05       	cpc	r25, r1
    2780:	49 f0       	breq	.+18     	; 0x2794 <execute_StatusAction+0x28>
    2782:	02 97       	sbiw	r24, 0x02	; 2
    2784:	51 f0       	breq	.+20     	; 0x279a <execute_StatusAction+0x2e>
    2786:	08 95       	ret
    2788:	84 30       	cpi	r24, 0x04	; 4
    278a:	91 05       	cpc	r25, r1
    278c:	61 f0       	breq	.+24     	; 0x27a6 <execute_StatusAction+0x3a>
    278e:	05 97       	sbiw	r24, 0x05	; 5
    2790:	69 f0       	breq	.+26     	; 0x27ac <execute_StatusAction+0x40>
    2792:	08 95       	ret
		case 1:
		Delete_Action1();
    2794:	0e 94 77 13 	call	0x26ee	; 0x26ee <Delete_Action1>
		break;
    2798:	08 95       	ret
		case 2:
		Delete_Action2();
    279a:	0e 94 82 13 	call	0x2704	; 0x2704 <Delete_Action2>
		break;
    279e:	08 95       	ret
		case 3:
		Delete_Action3();
    27a0:	0e 94 8f 13 	call	0x271e	; 0x271e <Delete_Action3>
		break;
    27a4:	08 95       	ret
		case 4:
		Delete_Action4();
    27a6:	0e 94 9c 13 	call	0x2738	; 0x2738 <Delete_Action4>
		break;
    27aa:	08 95       	ret
		case 5:
		Delete_Action5();
    27ac:	0e 94 a9 13 	call	0x2752	; 0x2752 <Delete_Action5>
    27b0:	08 95       	ret

000027b2 <LCD_Ring_Print>:
	}

}

void LCD_Ring_Print(int hour, int minute){
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	64 97       	sbiw	r28, 0x14	; 20
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
	char F[20];
	if (hour<10 && minute<10){
    27c6:	8a 30       	cpi	r24, 0x0A	; 10
    27c8:	91 05       	cpc	r25, r1
    27ca:	bc f4       	brge	.+46     	; 0x27fa <LCD_Ring_Print+0x48>
    27cc:	6a 30       	cpi	r22, 0x0A	; 10
    27ce:	71 05       	cpc	r23, r1
    27d0:	a4 f4       	brge	.+40     	; 0x27fa <LCD_Ring_Print+0x48>
		sprintf(F,"IT'S 0%d:0%d      ",hour,minute);
    27d2:	7f 93       	push	r23
    27d4:	6f 93       	push	r22
    27d6:	9f 93       	push	r25
    27d8:	8f 93       	push	r24
    27da:	82 eb       	ldi	r24, 0xB2	; 178
    27dc:	94 e0       	ldi	r25, 0x04	; 4
    27de:	9f 93       	push	r25
    27e0:	8f 93       	push	r24
    27e2:	ce 01       	movw	r24, r28
    27e4:	01 96       	adiw	r24, 0x01	; 1
    27e6:	9f 93       	push	r25
    27e8:	8f 93       	push	r24
    27ea:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>

}

void LCD_Ring_Print(int hour, int minute){
	char F[20];
	if (hour<10 && minute<10){
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	41 c0       	rjmp	.+130    	; 0x287c <LCD_Ring_Print+0xca>
		sprintf(F,"IT'S 0%d:0%d      ",hour,minute);
		}else if (minute<10){
    27fa:	6a 30       	cpi	r22, 0x0A	; 10
    27fc:	71 05       	cpc	r23, r1
    27fe:	a4 f4       	brge	.+40     	; 0x2828 <LCD_Ring_Print+0x76>
		sprintf(F,"IT'S %d:0%d      ",hour,minute);
    2800:	7f 93       	push	r23
    2802:	6f 93       	push	r22
    2804:	9f 93       	push	r25
    2806:	8f 93       	push	r24
    2808:	85 ec       	ldi	r24, 0xC5	; 197
    280a:	94 e0       	ldi	r25, 0x04	; 4
    280c:	9f 93       	push	r25
    280e:	8f 93       	push	r24
    2810:	ce 01       	movw	r24, r28
    2812:	01 96       	adiw	r24, 0x01	; 1
    2814:	9f 93       	push	r25
    2816:	8f 93       	push	r24
    2818:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	2a c0       	rjmp	.+84     	; 0x287c <LCD_Ring_Print+0xca>
		
		}else if (hour<10){
    2828:	8a 30       	cpi	r24, 0x0A	; 10
    282a:	91 05       	cpc	r25, r1
    282c:	a4 f4       	brge	.+40     	; 0x2856 <LCD_Ring_Print+0xa4>
		sprintf(F,"IT'S 0%d:%d      ",hour,minute);
    282e:	7f 93       	push	r23
    2830:	6f 93       	push	r22
    2832:	9f 93       	push	r25
    2834:	8f 93       	push	r24
    2836:	87 ed       	ldi	r24, 0xD7	; 215
    2838:	94 e0       	ldi	r25, 0x04	; 4
    283a:	9f 93       	push	r25
    283c:	8f 93       	push	r24
    283e:	ce 01       	movw	r24, r28
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	9f 93       	push	r25
    2844:	8f 93       	push	r24
    2846:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	13 c0       	rjmp	.+38     	; 0x287c <LCD_Ring_Print+0xca>
		}else{
		sprintf(F,"IT'S %d:%d      ",hour,minute);
    2856:	7f 93       	push	r23
    2858:	6f 93       	push	r22
    285a:	9f 93       	push	r25
    285c:	8f 93       	push	r24
    285e:	89 ee       	ldi	r24, 0xE9	; 233
    2860:	94 e0       	ldi	r25, 0x04	; 4
    2862:	9f 93       	push	r25
    2864:	8f 93       	push	r24
    2866:	ce 01       	movw	r24, r28
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	9f 93       	push	r25
    286c:	8f 93       	push	r24
    286e:	0e 94 e5 23 	call	0x47ca	; 0x47ca <sprintf>
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
	}
	LCD_String(F);
    287c:	ce 01       	movw	r24, r28
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	LCD_Command(0xC0);
    2884:	80 ec       	ldi	r24, 0xC0	; 192
    2886:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_String("ALARM TIME");
    288a:	8a ef       	ldi	r24, 0xFA	; 250
    288c:	94 e0       	ldi	r25, 0x04	; 4
    288e:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>

}
    2892:	64 96       	adiw	r28, 0x14	; 20
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	f8 94       	cli
    2898:	de bf       	out	0x3e, r29	; 62
    289a:	0f be       	out	0x3f, r0	; 63
    289c:	cd bf       	out	0x3d, r28	; 61
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	08 95       	ret

000028a4 <TWI_Initial>:


//Initialization of the TWI

void TWI_Initial(){
	TWBR = (F_CPU/SCL_frequency-16)/prescaler*2;   //setting the value of bit rate generator unit   // page 180
    28a4:	80 e2       	ldi	r24, 0x20	; 32
    28a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1<<TWEN); //enable TWI
    28aa:	84 e0       	ldi	r24, 0x04	; 4
    28ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	TWSR = (0x01); // sets prescaler value to 1
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    28b6:	08 95       	ret

000028b8 <TWI_Start>:
}

// Sending the TWI start condition

void TWI_Start(){
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); // initiating the start condition
    28b8:	84 ea       	ldi	r24, 0xA4	; 164
    28ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag set. This indicates that the START condition has been transmitted	
    28be:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    28c2:	88 23       	and	r24, r24
    28c4:	e4 f7       	brge	.-8      	; 0x28be <TWI_Start+0x6>
}
    28c6:	08 95       	ret

000028c8 <TWI_Slave_Write>:
	//Here Master is micro controller
	//Slave is DS1307
	//slave Address 1101000
	//last bit is 0 to write
	
	TWDR = 0b11010000; //  sending write signal to slave
    28c8:	80 ed       	ldi	r24, 0xD0	; 208
    28ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN); // clear TWINT to start transmission
    28ce:	84 e8       	ldi	r24, 0x84	; 132
    28d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT))); // Wait for transmission
    28d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    28d8:	88 23       	and	r24, r24
    28da:	e4 f7       	brge	.-8      	; 0x28d4 <TWI_Slave_Write+0xc>
	
}
    28dc:	08 95       	ret

000028de <TWI_Slave_Read>:
void TWI_Slave_Read(){
	//Here Master is micro controller
	//Slave is DS1307
	//slave Address 11010000
	//last bit is 1 to read
	TWDR= 0b11010001; //sending read signal to slave
    28de:	81 ed       	ldi	r24, 0xD1	; 209
    28e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
    28e4:	84 e8       	ldi	r24, 0x84	; 132
    28e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	////wait for transition
    28ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    28ee:	88 23       	and	r24, r24
    28f0:	e4 f7       	brge	.-8      	; 0x28ea <TWI_Slave_Read+0xc>
}
    28f2:	08 95       	ret

000028f4 <DEC_2_BCD>:

// Transforming decimal value to Binary Coded Decimal

uint8_t DEC_2_BCD(uint8_t val) {
	return val + 6 * (val / 10);
    28f4:	9d ec       	ldi	r25, 0xCD	; 205
    28f6:	89 9f       	mul	r24, r25
    28f8:	91 2d       	mov	r25, r1
    28fa:	11 24       	eor	r1, r1
    28fc:	96 95       	lsr	r25
    28fe:	96 95       	lsr	r25
    2900:	96 95       	lsr	r25
    2902:	29 2f       	mov	r18, r25
    2904:	22 0f       	add	r18, r18
    2906:	92 0f       	add	r25, r18
    2908:	29 2f       	mov	r18, r25
    290a:	22 0f       	add	r18, r18
}
    290c:	82 0f       	add	r24, r18
    290e:	08 95       	ret

00002910 <TWI_Write>:
}

//TWI Writing to Slave register

void TWI_Write(x){
	TWDR = x;	//data  to be written to the slave
    2910:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	//clear TWINT to start transmission
    2914:	84 e8       	ldi	r24, 0x84	; 132
    2916:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!((TWCR) & (1<<TWINT)));	//wait for data byte to transmit
    291a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    291e:	88 23       	and	r24, r24
    2920:	e4 f7       	brge	.-8      	; 0x291a <TWI_Write+0xa>
}
    2922:	08 95       	ret

00002924 <TWI_Stop>:

//TWI Stop

void TWI_Stop(){
	//stops the transmission 
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2924:	84 e9       	ldi	r24, 0x94	; 148
    2926:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    292a:	08 95       	ret

0000292c <TWI_ReadMore>:
 //Read one byte from the slave, request more data from device 
 //Automatically acknowleges shits to the next register
 
unsigned char TWI_ReadMore(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    292c:	84 ec       	ldi	r24, 0xC4	; 196
    292e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));    
    2932:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    2936:	88 23       	and	r24, r24
    2938:	e4 f7       	brge	.-8      	; 0x2932 <TWI_ReadMore+0x6>
    return TWDR;
    293a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}
    293e:	08 95       	ret

00002940 <TWI_ReadStop>:
 //Read one byte from the slave, read is followed by a stop condition
  // Automatically acknowledges and ends 
  
unsigned char TWI_ReadStop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    2940:	84 e8       	ldi	r24, 0x84	; 132
    2942:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
    2946:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    294a:	88 23       	and	r24, r24
    294c:	e4 f7       	brge	.-8      	; 0x2946 <TWI_ReadStop+0x6>
    return TWDR;
    294e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

}
    2952:	08 95       	ret

00002954 <Get_Days_Week>:


//get day of a week

uint8_t Get_Days_Week(uint8_t y, uint8_t m, uint8_t d) {
	uint16_t day = Date2Day(y, m, d);
    2954:	0e 94 46 09 	call	0x128c	; 0x128c <Date2Day>
	return (day + 6) % 7;
    2958:	ac 01       	movw	r20, r24
    295a:	4a 5f       	subi	r20, 0xFA	; 250
    295c:	5f 4f       	sbci	r21, 0xFF	; 255
    295e:	9a 01       	movw	r18, r20
    2960:	a3 e9       	ldi	r26, 0x93	; 147
    2962:	b4 e2       	ldi	r27, 0x24	; 36
    2964:	0e 94 70 23 	call	0x46e0	; 0x46e0 <__umulhisi3>
    2968:	28 1b       	sub	r18, r24
    296a:	39 0b       	sbc	r19, r25
    296c:	36 95       	lsr	r19
    296e:	27 95       	ror	r18
    2970:	82 0f       	add	r24, r18
    2972:	93 1f       	adc	r25, r19
    2974:	96 95       	lsr	r25
    2976:	87 95       	ror	r24
    2978:	96 95       	lsr	r25
    297a:	87 95       	ror	r24
    297c:	9c 01       	movw	r18, r24
    297e:	22 0f       	add	r18, r18
    2980:	33 1f       	adc	r19, r19
    2982:	22 0f       	add	r18, r18
    2984:	33 1f       	adc	r19, r19
    2986:	22 0f       	add	r18, r18
    2988:	33 1f       	adc	r19, r19
    298a:	b9 01       	movw	r22, r18
    298c:	68 1b       	sub	r22, r24
    298e:	79 0b       	sbc	r23, r25
    2990:	cb 01       	movw	r24, r22
}
    2992:	74 2f       	mov	r23, r20
    2994:	78 1b       	sub	r23, r24
    2996:	87 2f       	mov	r24, r23
    2998:	08 95       	ret

0000299a <Setdate>:
	
//set date

uint8_t Setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    299a:	df 92       	push	r13
    299c:	ef 92       	push	r14
    299e:	ff 92       	push	r15
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
	//sanitize data
	if (second < 0 || second > 59 ||
    29a8:	9b e3       	ldi	r25, 0x3B	; 59
    29aa:	9e 15       	cp	r25, r14
    29ac:	08 f4       	brcc	.+2      	; 0x29b0 <Setdate+0x16>
    29ae:	60 c0       	rjmp	.+192    	; 0x2a70 <Setdate+0xd6>
		minute < 0 || minute > 59 ||
    29b0:	0c 33       	cpi	r16, 0x3C	; 60
    29b2:	08 f0       	brcs	.+2      	; 0x29b6 <Setdate+0x1c>
    29b4:	5f c0       	rjmp	.+190    	; 0x2a74 <Setdate+0xda>
		hour < 0 || hour > 23 ||
    29b6:	28 31       	cpi	r18, 0x18	; 24
    29b8:	08 f0       	brcs	.+2      	; 0x29bc <Setdate+0x22>
    29ba:	5e c0       	rjmp	.+188    	; 0x2a78 <Setdate+0xde>
    29bc:	44 23       	and	r20, r20
    29be:	09 f4       	brne	.+2      	; 0x29c2 <Setdate+0x28>
    29c0:	5d c0       	rjmp	.+186    	; 0x2a7c <Setdate+0xe2>
		day < 1 || day > 31 ||
    29c2:	40 32       	cpi	r20, 0x20	; 32
    29c4:	08 f0       	brcs	.+2      	; 0x29c8 <Setdate+0x2e>
    29c6:	5c c0       	rjmp	.+184    	; 0x2a80 <Setdate+0xe6>
    29c8:	66 23       	and	r22, r22
    29ca:	09 f4       	brne	.+2      	; 0x29ce <Setdate+0x34>
    29cc:	5b c0       	rjmp	.+182    	; 0x2a84 <Setdate+0xea>
		month < 1 || month > 12 ||
    29ce:	6d 30       	cpi	r22, 0x0D	; 13
    29d0:	08 f0       	brcs	.+2      	; 0x29d4 <Setdate+0x3a>
    29d2:	5a c0       	rjmp	.+180    	; 0x2a88 <Setdate+0xee>
		year < 0 || year > 99)
    29d4:	84 36       	cpi	r24, 0x64	; 100
    29d6:	08 f0       	brcs	.+2      	; 0x29da <Setdate+0x40>
    29d8:	59 c0       	rjmp	.+178    	; 0x2a8c <Setdate+0xf2>
		return 8;

	//sanitize day based on month
	if(day > pgm_read_byte(Days_month + month - 1))
    29da:	e6 2f       	mov	r30, r22
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	e3 5d       	subi	r30, 0xD3	; 211
    29e0:	fd 4e       	sbci	r31, 0xED	; 237
    29e2:	e4 91       	lpm	r30, Z
    29e4:	e4 17       	cp	r30, r20
    29e6:	08 f4       	brcc	.+2      	; 0x29ea <Setdate+0x50>
    29e8:	53 c0       	rjmp	.+166    	; 0x2a90 <Setdate+0xf6>
    29ea:	d2 2e       	mov	r13, r18
    29ec:	c4 2f       	mov	r28, r20
    29ee:	d6 2f       	mov	r29, r22
    29f0:	18 2f       	mov	r17, r24
		return 0;
		
	//get day of week
	uint8_t Dayofweek = Get_Days_Week(year, month, day);
    29f2:	0e 94 aa 14 	call	0x2954	; 0x2954 <Get_Days_Week>
    29f6:	f8 2e       	mov	r15, r24

	//write date
	TWI_Initial();
    29f8:	0e 94 52 14 	call	0x28a4	; 0x28a4 <TWI_Initial>
	TWI_Start();
    29fc:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <TWI_Start>
	TWI_Slave_Write();
    2a00:	0e 94 64 14 	call	0x28c8	; 0x28c8 <TWI_Slave_Write>
	TWI_Write(0x00);//stop oscillator
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Write(DEC_2_BCD(second));
    2a0c:	8e 2d       	mov	r24, r14
    2a0e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <DEC_2_BCD>
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Write(DEC_2_BCD(minute));
    2a18:	80 2f       	mov	r24, r16
    2a1a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <DEC_2_BCD>
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Write(DEC_2_BCD(hour));
    2a24:	8d 2d       	mov	r24, r13
    2a26:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <DEC_2_BCD>
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Write(DEC_2_BCD(Dayofweek));
    2a30:	8f 2d       	mov	r24, r15
    2a32:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <DEC_2_BCD>
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Write(DEC_2_BCD(day));
    2a3c:	8c 2f       	mov	r24, r28
    2a3e:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <DEC_2_BCD>
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Write(DEC_2_BCD(month));
    2a48:	8d 2f       	mov	r24, r29
    2a4a:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <DEC_2_BCD>
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Write(DEC_2_BCD(year));
    2a54:	81 2f       	mov	r24, r17
    2a56:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <DEC_2_BCD>
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Write(0x00); //start oscillator
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Write();
    2a68:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>

	return 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	11 c0       	rjmp	.+34     	; 0x2a92 <Setdate+0xf8>
		minute < 0 || minute > 59 ||
		hour < 0 || hour > 23 ||
		day < 1 || day > 31 ||
		month < 1 || month > 12 ||
		year < 0 || year > 99)
		return 8;
    2a70:	88 e0       	ldi	r24, 0x08	; 8
    2a72:	0f c0       	rjmp	.+30     	; 0x2a92 <Setdate+0xf8>
    2a74:	88 e0       	ldi	r24, 0x08	; 8
    2a76:	0d c0       	rjmp	.+26     	; 0x2a92 <Setdate+0xf8>
    2a78:	88 e0       	ldi	r24, 0x08	; 8
    2a7a:	0b c0       	rjmp	.+22     	; 0x2a92 <Setdate+0xf8>
    2a7c:	88 e0       	ldi	r24, 0x08	; 8
    2a7e:	09 c0       	rjmp	.+18     	; 0x2a92 <Setdate+0xf8>
    2a80:	88 e0       	ldi	r24, 0x08	; 8
    2a82:	07 c0       	rjmp	.+14     	; 0x2a92 <Setdate+0xf8>
    2a84:	88 e0       	ldi	r24, 0x08	; 8
    2a86:	05 c0       	rjmp	.+10     	; 0x2a92 <Setdate+0xf8>
    2a88:	88 e0       	ldi	r24, 0x08	; 8
    2a8a:	03 c0       	rjmp	.+6      	; 0x2a92 <Setdate+0xf8>
    2a8c:	88 e0       	ldi	r24, 0x08	; 8
    2a8e:	01 c0       	rjmp	.+2      	; 0x2a92 <Setdate+0xf8>

	//sanitize day based on month
	if(day > pgm_read_byte(Days_month + month - 1))
		return 0;
    2a90:	80 e0       	ldi	r24, 0x00	; 0
	TWI_Write(DEC_2_BCD(year));
	TWI_Write(0x00); //start oscillator
	TWI_Write();

	return 1;
}
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	ff 90       	pop	r15
    2a9c:	ef 90       	pop	r14
    2a9e:	df 90       	pop	r13
    2aa0:	08 95       	ret

00002aa2 <Getdate>:


 
void Getdate(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second) {
    2aa2:	8f 92       	push	r8
    2aa4:	9f 92       	push	r9
    2aa6:	af 92       	push	r10
    2aa8:	bf 92       	push	r11
    2aaa:	cf 92       	push	r12
    2aac:	df 92       	push	r13
    2aae:	ef 92       	push	r14
    2ab0:	ff 92       	push	r15
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	ec 01       	movw	r28, r24
    2abc:	6b 01       	movw	r12, r22
    2abe:	5a 01       	movw	r10, r20
    2ac0:	49 01       	movw	r8, r18
	TWI_Initial();
    2ac2:	0e 94 52 14 	call	0x28a4	; 0x28a4 <TWI_Initial>
	TWI_Start();
    2ac6:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <TWI_Start>
	TWI_Slave_Write();
    2aca:	0e 94 64 14 	call	0x28c8	; 0x28c8 <TWI_Slave_Write>
	TWI_Write(0x00);
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	0e 94 88 14 	call	0x2910	; 0x2910 <TWI_Write>
	TWI_Stop();
    2ad6:	0e 94 92 14 	call	0x2924	; 0x2924 <TWI_Stop>
	
	TWI_Start();
    2ada:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <TWI_Start>
	TWI_Slave_Read();
    2ade:	0e 94 6f 14 	call	0x28de	; 0x28de <TWI_Slave_Read>
	*second = BCD_2_DEC(TWI_ReadMore() & 0x7F);
    2ae2:	0e 94 96 14 	call	0x292c	; 0x292c <TWI_ReadMore>
    2ae6:	8f 77       	andi	r24, 0x7F	; 127
    2ae8:	0e 94 3c 09 	call	0x1278	; 0x1278 <BCD_2_DEC>
    2aec:	f7 01       	movw	r30, r14
    2aee:	80 83       	st	Z, r24
	*minute = BCD_2_DEC(TWI_ReadMore());
    2af0:	0e 94 96 14 	call	0x292c	; 0x292c <TWI_ReadMore>
    2af4:	0e 94 3c 09 	call	0x1278	; 0x1278 <BCD_2_DEC>
    2af8:	f8 01       	movw	r30, r16
    2afa:	80 83       	st	Z, r24
	*hour = BCD_2_DEC(TWI_ReadMore());
    2afc:	0e 94 96 14 	call	0x292c	; 0x292c <TWI_ReadMore>
    2b00:	0e 94 3c 09 	call	0x1278	; 0x1278 <BCD_2_DEC>
    2b04:	f4 01       	movw	r30, r8
    2b06:	80 83       	st	Z, r24
	TWI_ReadMore();
    2b08:	0e 94 96 14 	call	0x292c	; 0x292c <TWI_ReadMore>
	*day = BCD_2_DEC(TWI_ReadMore());
    2b0c:	0e 94 96 14 	call	0x292c	; 0x292c <TWI_ReadMore>
    2b10:	0e 94 3c 09 	call	0x1278	; 0x1278 <BCD_2_DEC>
    2b14:	f5 01       	movw	r30, r10
    2b16:	80 83       	st	Z, r24
	*month = BCD_2_DEC(TWI_ReadMore());
    2b18:	0e 94 96 14 	call	0x292c	; 0x292c <TWI_ReadMore>
    2b1c:	0e 94 3c 09 	call	0x1278	; 0x1278 <BCD_2_DEC>
    2b20:	f6 01       	movw	r30, r12
    2b22:	80 83       	st	Z, r24
	*year = BCD_2_DEC(TWI_ReadStop());
    2b24:	0e 94 a0 14 	call	0x2940	; 0x2940 <TWI_ReadStop>
    2b28:	0e 94 3c 09 	call	0x1278	; 0x1278 <BCD_2_DEC>
    2b2c:	88 83       	st	Y, r24
}
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	bf 90       	pop	r11
    2b40:	af 90       	pop	r10
    2b42:	9f 90       	pop	r9
    2b44:	8f 90       	pop	r8
    2b46:	08 95       	ret

00002b48 <update_Clock_Menu>:




void update_Clock_Menu(){
	switch(Clock_Menu){
    2b48:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Clock_Menu>
    2b4c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Clock_Menu+0x1>
    2b50:	81 30       	cpi	r24, 0x01	; 1
    2b52:	91 05       	cpc	r25, r1
    2b54:	89 f0       	breq	.+34     	; 0x2b78 <update_Clock_Menu+0x30>
    2b56:	1c f4       	brge	.+6      	; 0x2b5e <update_Clock_Menu+0x16>
    2b58:	89 2b       	or	r24, r25
    2b5a:	39 f0       	breq	.+14     	; 0x2b6a <update_Clock_Menu+0x22>
    2b5c:	08 95       	ret
    2b5e:	82 30       	cpi	r24, 0x02	; 2
    2b60:	91 05       	cpc	r25, r1
    2b62:	d1 f0       	breq	.+52     	; 0x2b98 <update_Clock_Menu+0x50>
    2b64:	03 97       	sbiw	r24, 0x03	; 3
    2b66:	41 f1       	breq	.+80     	; 0x2bb8 <update_Clock_Menu+0x70>
    2b68:	08 95       	ret
		case 0:
		Clock_Menu = 1;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Clock_Menu+0x1>
    2b72:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Clock_Menu>
		break;
    2b76:	08 95       	ret
		case 1:							//initial display state
		LCD_Init();
    2b78:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    2b7c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String(">> Set Time");
    2b80:	85 e0       	ldi	r24, 0x05	; 5
    2b82:	95 e0       	ldi	r25, 0x05	; 5
    2b84:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    2b88:	80 ec       	ldi	r24, 0xC0	; 192
    2b8a:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String("   Set Date");
    2b8e:	81 e1       	ldi	r24, 0x11	; 17
    2b90:	95 e0       	ldi	r25, 0x05	; 5
    2b92:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    2b96:	08 95       	ret
		case 2:							//2nd display state
		LCD_Init();
    2b98:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    2b9c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("   Set Time");
    2ba0:	8d e1       	ldi	r24, 0x1D	; 29
    2ba2:	95 e0       	ldi	r25, 0x05	; 5
    2ba4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    2ba8:	80 ec       	ldi	r24, 0xC0	; 192
    2baa:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(">> Set Date");
    2bae:	89 e2       	ldi	r24, 0x29	; 41
    2bb0:	95 e0       	ldi	r25, 0x05	; 5
    2bb2:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    2bb6:	08 95       	ret
		case 3:
		Clock_Menu = 1;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Clock_Menu+0x1>
    2bc0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Clock_Menu>
    2bc4:	08 95       	ret

00002bc6 <Time_insert>:




void Time_insert()
{
    2bc6:	df 92       	push	r13
    2bc8:	ef 92       	push	r14
    2bca:	ff 92       	push	r15
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
    2bd8:	a6 97       	sbiw	r28, 0x26	; 38
    2bda:	0f b6       	in	r0, 0x3f	; 63
    2bdc:	f8 94       	cli
    2bde:	de bf       	out	0x3e, r29	; 62
    2be0:	0f be       	out	0x3f, r0	; 63
    2be2:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xf0;
    2be4:	80 ef       	ldi	r24, 0xF0	; 240
    2be6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x7f;
    2be8:	8f e7       	ldi	r24, 0x7F	; 127
    2bea:	8b b9       	out	0x0b, r24	; 11
	unsigned char c,r;
	int pos = 0 ;
    unsigned char k[4][3]={{14,0,15},{7,8,9},{4,5,6},{1,2,3}};	
    2bec:	8c e0       	ldi	r24, 0x0C	; 12
    2bee:	ea e3       	ldi	r30, 0x3A	; 58
    2bf0:	f1 e0       	ldi	r31, 0x01	; 1
    2bf2:	de 01       	movw	r26, r28
    2bf4:	11 96       	adiw	r26, 0x01	; 1
    2bf6:	01 90       	ld	r0, Z+
    2bf8:	0d 92       	st	X+, r0
    2bfa:	8a 95       	dec	r24
    2bfc:	e1 f7       	brne	.-8      	; 0x2bf6 <Time_insert+0x30>
    int input=0;
	LCD_Init();
    2bfe:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	char fog[10]={0};
    2c02:	fe 01       	movw	r30, r28
    2c04:	3d 96       	adiw	r30, 0x0d	; 13
    2c06:	8a e0       	ldi	r24, 0x0A	; 10
    2c08:	df 01       	movw	r26, r30
    2c0a:	1d 92       	st	X+, r1
    2c0c:	8a 95       	dec	r24
    2c0e:	e9 f7       	brne	.-6      	; 0x2c0a <Time_insert+0x44>
	DDRD = 0xf0;
	PORTD = 0x7f;
	unsigned char c,r;
	int pos = 0 ;
    unsigned char k[4][3]={{14,0,15},{7,8,9},{4,5,6},{1,2,3}};	
    int input=0;
    2c10:	e1 2c       	mov	r14, r1
    2c12:	f1 2c       	mov	r15, r1
void Time_insert()
{
	DDRD = 0xf0;
	PORTD = 0x7f;
	unsigned char c,r;
	int pos = 0 ;
    2c14:	00 e0       	ldi	r16, 0x00	; 0
    2c16:	10 e0       	ldi	r17, 0x00	; 0
	char fog[10]={0};
	int Set_Time[8];
	
while(1)
{
	if (pos<8 && pos!=2 && pos!=5)  // key pad input loop
    2c18:	08 30       	cpi	r16, 0x08	; 8
    2c1a:	11 05       	cpc	r17, r1
    2c1c:	0c f0       	brlt	.+2      	; 0x2c20 <Time_insert+0x5a>
    2c1e:	c6 c0       	rjmp	.+396    	; 0x2dac <Time_insert+0x1e6>
    2c20:	02 30       	cpi	r16, 0x02	; 2
    2c22:	11 05       	cpc	r17, r1
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <Time_insert+0x62>
    2c26:	c2 c0       	rjmp	.+388    	; 0x2dac <Time_insert+0x1e6>
    2c28:	05 30       	cpi	r16, 0x05	; 5
    2c2a:	11 05       	cpc	r17, r1
    2c2c:	09 f4       	brne	.+2      	; 0x2c30 <Time_insert+0x6a>
    2c2e:	be c0       	rjmp	.+380    	; 0x2dac <Time_insert+0x1e6>
	{
		do
		{
			PORTD&=0x0f;
    2c30:	8b b1       	in	r24, 0x0b	; 11
    2c32:	8f 70       	andi	r24, 0x0F	; 15
    2c34:	8b b9       	out	0x0b, r24	; 11
			r=PIND&0x0f;
    2c36:	89 b1       	in	r24, 0x09	; 9
    2c38:	8f 70       	andi	r24, 0x0F	; 15
		} while(r!=0x0f);
    2c3a:	8f 30       	cpi	r24, 0x0F	; 15
    2c3c:	c9 f7       	brne	.-14     	; 0x2c30 <Time_insert+0x6a>
	
		do
		{
			r=PIND&0x0f;
    2c3e:	89 b1       	in	r24, 0x09	; 9
    2c40:	8f 70       	andi	r24, 0x0F	; 15
		}	  while(r==0x0f);
    2c42:	8f 30       	cpi	r24, 0x0F	; 15
    2c44:	e1 f3       	breq	.-8      	; 0x2c3e <Time_insert+0x78>
	
		while(1)
		{
			PORTD=0x6f;
    2c46:	8f e6       	ldi	r24, 0x6F	; 111
    2c48:	8b b9       	out	0x0b, r24	; 11
			r=PIND&0x0f;
    2c4a:	89 b1       	in	r24, 0x09	; 9
    2c4c:	8f 70       	andi	r24, 0x0F	; 15
			if(r!=0x0f)
    2c4e:	8f 30       	cpi	r24, 0x0F	; 15
    2c50:	71 f4       	brne	.+28     	; 0x2c6e <Time_insert+0xa8>
			{
				c=0;
				break;
			}
			PORTD=0x5f;
    2c52:	8f e5       	ldi	r24, 0x5F	; 95
    2c54:	8b b9       	out	0x0b, r24	; 11
			r=PIND&0x0f;
    2c56:	89 b1       	in	r24, 0x09	; 9
    2c58:	8f 70       	andi	r24, 0x0F	; 15
			if(r!=0x0f)
    2c5a:	8f 30       	cpi	r24, 0x0F	; 15
    2c5c:	51 f4       	brne	.+20     	; 0x2c72 <Time_insert+0xac>
			{
				c=1;
				break;
			}
			PORTD=0x3f;
    2c5e:	8f e3       	ldi	r24, 0x3F	; 63
    2c60:	8b b9       	out	0x0b, r24	; 11
			r=PIND&0x0f;
    2c62:	89 b1       	in	r24, 0x09	; 9
    2c64:	8f 70       	andi	r24, 0x0F	; 15
			if(r!=0x0f)
    2c66:	8f 30       	cpi	r24, 0x0F	; 15
    2c68:	71 f3       	breq	.-36     	; 0x2c46 <Time_insert+0x80>
			{
				c=2;
    2c6a:	92 e0       	ldi	r25, 0x02	; 2
    2c6c:	03 c0       	rjmp	.+6      	; 0x2c74 <Time_insert+0xae>
		{
			PORTD=0x6f;
			r=PIND&0x0f;
			if(r!=0x0f)
			{
				c=0;
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	01 c0       	rjmp	.+2      	; 0x2c74 <Time_insert+0xae>
			}
			PORTD=0x5f;
			r=PIND&0x0f;
			if(r!=0x0f)
			{
				c=1;
    2c72:	91 e0       	ldi	r25, 0x01	; 1
			}
			
		}
	

		if(r==0x0e)
    2c74:	8e 30       	cpi	r24, 0x0E	; 14
    2c76:	89 f4       	brne	.+34     	; 0x2c9a <Time_insert+0xd4>
		{
			input=k[0][c];
    2c78:	e1 e0       	ldi	r30, 0x01	; 1
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	ec 0f       	add	r30, r28
    2c7e:	fd 1f       	adc	r31, r29
    2c80:	e9 0f       	add	r30, r25
    2c82:	f1 1d       	adc	r31, r1
    2c84:	e0 80       	ld	r14, Z
    2c86:	f1 2c       	mov	r15, r1
			itoa(input,fog,10);
    2c88:	4a e0       	ldi	r20, 0x0A	; 10
    2c8a:	50 e0       	ldi	r21, 0x00	; 0
    2c8c:	be 01       	movw	r22, r28
    2c8e:	63 5f       	subi	r22, 0xF3	; 243
    2c90:	7f 4f       	sbci	r23, 0xFF	; 255
    2c92:	c7 01       	movw	r24, r14
    2c94:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
    2c98:	36 c0       	rjmp	.+108    	; 0x2d06 <Time_insert+0x140>
		}	
		else if(r==0x0d)
    2c9a:	8d 30       	cpi	r24, 0x0D	; 13
    2c9c:	89 f4       	brne	.+34     	; 0x2cc0 <Time_insert+0xfa>
		{
			input=k[1][c];
    2c9e:	e4 e0       	ldi	r30, 0x04	; 4
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	ec 0f       	add	r30, r28
    2ca4:	fd 1f       	adc	r31, r29
    2ca6:	e9 0f       	add	r30, r25
    2ca8:	f1 1d       	adc	r31, r1
    2caa:	e0 80       	ld	r14, Z
    2cac:	f1 2c       	mov	r15, r1
			itoa(input,fog,10);
    2cae:	4a e0       	ldi	r20, 0x0A	; 10
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	be 01       	movw	r22, r28
    2cb4:	63 5f       	subi	r22, 0xF3	; 243
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	c7 01       	movw	r24, r14
    2cba:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
    2cbe:	23 c0       	rjmp	.+70     	; 0x2d06 <Time_insert+0x140>
		}
		else if(r==0x0b)
    2cc0:	8b 30       	cpi	r24, 0x0B	; 11
    2cc2:	89 f4       	brne	.+34     	; 0x2ce6 <Time_insert+0x120>
		{
			input=k[2][c];
    2cc4:	e7 e0       	ldi	r30, 0x07	; 7
    2cc6:	f0 e0       	ldi	r31, 0x00	; 0
    2cc8:	ec 0f       	add	r30, r28
    2cca:	fd 1f       	adc	r31, r29
    2ccc:	e9 0f       	add	r30, r25
    2cce:	f1 1d       	adc	r31, r1
    2cd0:	e0 80       	ld	r14, Z
    2cd2:	f1 2c       	mov	r15, r1
			itoa(input,fog,10);
    2cd4:	4a e0       	ldi	r20, 0x0A	; 10
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	be 01       	movw	r22, r28
    2cda:	63 5f       	subi	r22, 0xF3	; 243
    2cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cde:	c7 01       	movw	r24, r14
    2ce0:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
    2ce4:	10 c0       	rjmp	.+32     	; 0x2d06 <Time_insert+0x140>
		}
		else {
			input=k[3][c];
    2ce6:	ea e0       	ldi	r30, 0x0A	; 10
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	ec 0f       	add	r30, r28
    2cec:	fd 1f       	adc	r31, r29
    2cee:	e9 0f       	add	r30, r25
    2cf0:	f1 1d       	adc	r31, r1
    2cf2:	e0 80       	ld	r14, Z
    2cf4:	f1 2c       	mov	r15, r1
			itoa(input,fog,10);
    2cf6:	4a e0       	ldi	r20, 0x0A	; 10
    2cf8:	50 e0       	ldi	r21, 0x00	; 0
    2cfa:	be 01       	movw	r22, r28
    2cfc:	63 5f       	subi	r22, 0xF3	; 243
    2cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2d00:	c7 01       	movw	r24, r14
    2d02:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
		}
	
		if ((input!=14) && (input !=15)){
    2d06:	c7 01       	movw	r24, r14
    2d08:	0e 97       	sbiw	r24, 0x0e	; 14
    2d0a:	02 97       	sbiw	r24, 0x02	; 2
    2d0c:	08 f4       	brcc	.+2      	; 0x2d10 <Time_insert+0x14a>
    2d0e:	5f c0       	rjmp	.+190    	; 0x2dce <Time_insert+0x208>
		Set_Time[pos]=input;
    2d10:	f8 01       	movw	r30, r16
    2d12:	ee 0f       	add	r30, r30
    2d14:	ff 1f       	adc	r31, r31
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	8c 0f       	add	r24, r28
    2d1c:	9d 1f       	adc	r25, r29
    2d1e:	e8 0f       	add	r30, r24
    2d20:	f9 1f       	adc	r31, r25
    2d22:	f7 8a       	std	Z+23, r15	; 0x17
    2d24:	e6 8a       	std	Z+22, r14	; 0x16
		LCD_String_xy(0,pos,fog);
    2d26:	d0 2e       	mov	r13, r16
    2d28:	ae 01       	movw	r20, r28
    2d2a:	43 5f       	subi	r20, 0xF3	; 243
    2d2c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2e:	60 2f       	mov	r22, r16
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
		LCD_Command(0xC0);
    2d36:	80 ec       	ldi	r24, 0xC0	; 192
    2d38:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String_xy(1,pos,"^");
    2d3c:	49 e6       	ldi	r20, 0x69	; 105
    2d3e:	53 e0       	ldi	r21, 0x03	; 3
    2d40:	60 2f       	mov	r22, r16
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
		
		if (pos<8 & pos!=3 & pos!=6)
    2d48:	91 e0       	ldi	r25, 0x01	; 1
    2d4a:	08 30       	cpi	r16, 0x08	; 8
    2d4c:	11 05       	cpc	r17, r1
    2d4e:	0c f0       	brlt	.+2      	; 0x2d52 <Time_insert+0x18c>
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	03 30       	cpi	r16, 0x03	; 3
    2d56:	11 05       	cpc	r17, r1
    2d58:	09 f4       	brne	.+2      	; 0x2d5c <Time_insert+0x196>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	89 23       	and	r24, r25
    2d5e:	91 e0       	ldi	r25, 0x01	; 1
    2d60:	06 30       	cpi	r16, 0x06	; 6
    2d62:	11 05       	cpc	r17, r1
    2d64:	09 f4       	brne	.+2      	; 0x2d68 <Time_insert+0x1a2>
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	88 23       	and	r24, r24
    2d6a:	51 f0       	breq	.+20     	; 0x2d80 <Time_insert+0x1ba>
    2d6c:	99 23       	and	r25, r25
    2d6e:	41 f0       	breq	.+16     	; 0x2d80 <Time_insert+0x1ba>
		{
			LCD_String_xy(1,pos-1," ");
    2d70:	6f ef       	ldi	r22, 0xFF	; 255
    2d72:	6d 0d       	add	r22, r13
    2d74:	40 e0       	ldi	r20, 0x00	; 0
    2d76:	53 e0       	ldi	r21, 0x03	; 3
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
    2d7e:	13 c0       	rjmp	.+38     	; 0x2da6 <Time_insert+0x1e0>
		}
	
	    else if(pos==3 | pos ==6)
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	03 30       	cpi	r16, 0x03	; 3
    2d84:	11 05       	cpc	r17, r1
    2d86:	09 f0       	breq	.+2      	; 0x2d8a <Time_insert+0x1c4>
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	06 30       	cpi	r16, 0x06	; 6
    2d8e:	11 05       	cpc	r17, r1
    2d90:	09 f0       	breq	.+2      	; 0x2d94 <Time_insert+0x1ce>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	89 2b       	or	r24, r25
    2d96:	39 f0       	breq	.+14     	; 0x2da6 <Time_insert+0x1e0>
		{
			LCD_String_xy(1,pos-2," ");
    2d98:	6e ef       	ldi	r22, 0xFE	; 254
    2d9a:	6d 0d       	add	r22, r13
    2d9c:	40 e0       	ldi	r20, 0x00	; 0
    2d9e:	53 e0       	ldi	r21, 0x03	; 3
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
		}
		
		pos++;}
    2da6:	0f 5f       	subi	r16, 0xFF	; 255
    2da8:	1f 4f       	sbci	r17, 0xFF	; 255
    2daa:	11 c0       	rjmp	.+34     	; 0x2dce <Time_insert+0x208>
	
	} else if (pos==2 | pos==5){
    2dac:	91 e0       	ldi	r25, 0x01	; 1
    2dae:	02 30       	cpi	r16, 0x02	; 2
    2db0:	11 05       	cpc	r17, r1
    2db2:	09 f0       	breq	.+2      	; 0x2db6 <Time_insert+0x1f0>
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	05 30       	cpi	r16, 0x05	; 5
    2dba:	11 05       	cpc	r17, r1
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <Time_insert+0x1fa>
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	89 2b       	or	r24, r25
    2dc2:	19 f0       	breq	.+6      	; 0x2dca <Time_insert+0x204>
			pos++;
    2dc4:	0f 5f       	subi	r16, 0xFF	; 255
    2dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <Time_insert+0x208>
	}
	else  
	{
		pos=0;
    2dca:	00 e0       	ldi	r16, 0x00	; 0
    2dcc:	10 e0       	ldi	r17, 0x00	; 0
	
	
	
	
	
	if(input==14)
    2dce:	9e e0       	ldi	r25, 0x0E	; 14
    2dd0:	e9 16       	cp	r14, r25
    2dd2:	f1 04       	cpc	r15, r1
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <Time_insert+0x212>
    2dd6:	7f c0       	rjmp	.+254    	; 0x2ed6 <Time_insert+0x310>
	{      // checking valid inputs for time settings
		if ((Set_Time[0]*10+Set_Time[1]<24)&&(Set_Time[3]*10+Set_Time[4]<60) && (Set_Time[6]*10+Set_Time[7]<60)){
    2dd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dda:	98 8d       	ldd	r25, Y+24	; 0x18
    2ddc:	9c 01       	movw	r18, r24
    2dde:	22 0f       	add	r18, r18
    2de0:	33 1f       	adc	r19, r19
    2de2:	88 0f       	add	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	82 0f       	add	r24, r18
    2df0:	93 1f       	adc	r25, r19
    2df2:	29 8d       	ldd	r18, Y+25	; 0x19
    2df4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2df6:	82 0f       	add	r24, r18
    2df8:	93 1f       	adc	r25, r19
    2dfa:	88 31       	cpi	r24, 0x18	; 24
    2dfc:	91 05       	cpc	r25, r1
    2dfe:	0c f0       	brlt	.+2      	; 0x2e02 <Time_insert+0x23c>
    2e00:	4d c0       	rjmp	.+154    	; 0x2e9c <Time_insert+0x2d6>
    2e02:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2e04:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2e06:	a9 01       	movw	r20, r18
    2e08:	44 0f       	add	r20, r20
    2e0a:	55 1f       	adc	r21, r21
    2e0c:	22 0f       	add	r18, r18
    2e0e:	33 1f       	adc	r19, r19
    2e10:	22 0f       	add	r18, r18
    2e12:	33 1f       	adc	r19, r19
    2e14:	22 0f       	add	r18, r18
    2e16:	33 1f       	adc	r19, r19
    2e18:	24 0f       	add	r18, r20
    2e1a:	35 1f       	adc	r19, r21
    2e1c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e1e:	58 a1       	ldd	r21, Y+32	; 0x20
    2e20:	24 0f       	add	r18, r20
    2e22:	35 1f       	adc	r19, r21
    2e24:	2c 33       	cpi	r18, 0x3C	; 60
    2e26:	31 05       	cpc	r19, r1
    2e28:	cc f5       	brge	.+114    	; 0x2e9c <Time_insert+0x2d6>
    2e2a:	4b a1       	ldd	r20, Y+35	; 0x23
    2e2c:	5c a1       	ldd	r21, Y+36	; 0x24
    2e2e:	ba 01       	movw	r22, r20
    2e30:	66 0f       	add	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	44 0f       	add	r20, r20
    2e36:	55 1f       	adc	r21, r21
    2e38:	44 0f       	add	r20, r20
    2e3a:	55 1f       	adc	r21, r21
    2e3c:	44 0f       	add	r20, r20
    2e3e:	55 1f       	adc	r21, r21
    2e40:	46 0f       	add	r20, r22
    2e42:	57 1f       	adc	r21, r23
    2e44:	6d a1       	ldd	r22, Y+37	; 0x25
    2e46:	7e a1       	ldd	r23, Y+38	; 0x26
    2e48:	46 0f       	add	r20, r22
    2e4a:	57 1f       	adc	r21, r23
    2e4c:	4c 33       	cpi	r20, 0x3C	; 60
    2e4e:	51 05       	cpc	r21, r1
    2e50:	2c f5       	brge	.+74     	; 0x2e9c <Time_insert+0x2d6>
			
			Current_Time[3]=Set_Time[0]*10+Set_Time[1];
    2e52:	e8 eb       	ldi	r30, 0xB8	; 184
    2e54:	f6 e0       	ldi	r31, 0x06	; 6
    2e56:	97 83       	std	Z+7, r25	; 0x07
    2e58:	86 83       	std	Z+6, r24	; 0x06
			Current_Time[4]=Set_Time[3]*10+Set_Time[4];
    2e5a:	31 87       	std	Z+9, r19	; 0x09
    2e5c:	20 87       	std	Z+8, r18	; 0x08
			Current_Time[5]=Set_Time[6]*10+Set_Time[7];
    2e5e:	53 87       	std	Z+11, r21	; 0x0b
    2e60:	42 87       	std	Z+10, r20	; 0x0a
			//Setdate(Current_Time[0],Current_Time[1],Current_Time[2],Current_Time[3],Current_Time[4],Current_Time[5]);
			LCD_Clear();
    2e62:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
			LCD_String("TIME SET DONE");
    2e66:	85 e3       	ldi	r24, 0x35	; 53
    2e68:	95 e0       	ldi	r25, 0x05	; 5
    2e6a:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6e:	88 e8       	ldi	r24, 0x88	; 136
    2e70:	93 e1       	ldi	r25, 0x13	; 19
    2e72:	05 c0       	rjmp	.+10     	; 0x2e7e <Time_insert+0x2b8>
    2e74:	e0 e9       	ldi	r30, 0x90	; 144
    2e76:	f1 e0       	ldi	r31, 0x01	; 1
    2e78:	31 97       	sbiw	r30, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <Time_insert+0x2b2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	c9 f7       	brne	.-14     	; 0x2e74 <Time_insert+0x2ae>
			_delay_ms(500);
			update_Clock_Menu();
    2e82:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <update_Clock_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	80 e1       	ldi	r24, 0x10	; 16
    2e88:	97 e2       	ldi	r25, 0x27	; 39
    2e8a:	05 c0       	rjmp	.+10     	; 0x2e96 <Time_insert+0x2d0>
    2e8c:	e0 e9       	ldi	r30, 0x90	; 144
    2e8e:	f1 e0       	ldi	r31, 0x01	; 1
    2e90:	31 97       	sbiw	r30, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <Time_insert+0x2ca>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	c9 f7       	brne	.-14     	; 0x2e8c <Time_insert+0x2c6>
    2e9a:	33 c0       	rjmp	.+102    	; 0x2f02 <Time_insert+0x33c>
			_delay_ms(1000);
			break;
			}else{
			LCD_Clear();
    2e9c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
			LCD_String("INVALID INPUT");
    2ea0:	8a e7       	ldi	r24, 0x7A	; 122
    2ea2:	93 e0       	ldi	r25, 0x03	; 3
    2ea4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ea8:	80 e1       	ldi	r24, 0x10	; 16
    2eaa:	97 e2       	ldi	r25, 0x27	; 39
    2eac:	05 c0       	rjmp	.+10     	; 0x2eb8 <Time_insert+0x2f2>
    2eae:	e0 e9       	ldi	r30, 0x90	; 144
    2eb0:	f1 e0       	ldi	r31, 0x01	; 1
    2eb2:	31 97       	sbiw	r30, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <Time_insert+0x2ec>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	c9 f7       	brne	.-14     	; 0x2eae <Time_insert+0x2e8>
			
			_delay_ms(1000);
			LCD_Clear();
    2ebc:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
			LCD_Time_Print(Current_Time[3],Current_Time[4],Current_Time[5]);
    2ec0:	e8 eb       	ldi	r30, 0xB8	; 184
    2ec2:	f6 e0       	ldi	r31, 0x06	; 6
    2ec4:	42 85       	ldd	r20, Z+10	; 0x0a
    2ec6:	53 85       	ldd	r21, Z+11	; 0x0b
    2ec8:	60 85       	ldd	r22, Z+8	; 0x08
    2eca:	71 85       	ldd	r23, Z+9	; 0x09
    2ecc:	86 81       	ldd	r24, Z+6	; 0x06
    2ece:	97 81       	ldd	r25, Z+7	; 0x07
    2ed0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_Time_Print>
    2ed4:	a1 ce       	rjmp	.-702    	; 0x2c18 <Time_insert+0x52>
			
		}
		
	}
	else if (input==15)
    2ed6:	af e0       	ldi	r26, 0x0F	; 15
    2ed8:	ea 16       	cp	r14, r26
    2eda:	f1 04       	cpc	r15, r1
    2edc:	09 f0       	breq	.+2      	; 0x2ee0 <Time_insert+0x31a>
    2ede:	9c ce       	rjmp	.-712    	; 0x2c18 <Time_insert+0x52>
	{   
		DDRD=0x0f;
    2ee0:	8f e0       	ldi	r24, 0x0F	; 15
    2ee2:	8a b9       	out	0x0a, r24	; 10
		PORTD&=0x7e;
    2ee4:	8b b1       	in	r24, 0x0b	; 11
    2ee6:	8e 77       	andi	r24, 0x7E	; 126
    2ee8:	8b b9       	out	0x0b, r24	; 11
		update_Clock_Menu();
    2eea:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <update_Clock_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	80 e1       	ldi	r24, 0x10	; 16
    2ef0:	97 e2       	ldi	r25, 0x27	; 39
    2ef2:	05 c0       	rjmp	.+10     	; 0x2efe <Time_insert+0x338>
    2ef4:	e0 e9       	ldi	r30, 0x90	; 144
    2ef6:	f1 e0       	ldi	r31, 0x01	; 1
    2ef8:	31 97       	sbiw	r30, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <Time_insert+0x332>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	c9 f7       	brne	.-14     	; 0x2ef4 <Time_insert+0x32e>
		break;
		
	}
	}
	
}
    2f02:	a6 96       	adiw	r28, 0x26	; 38
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	de bf       	out	0x3e, r29	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	cd bf       	out	0x3d, r28	; 61
    2f0e:	df 91       	pop	r29
    2f10:	cf 91       	pop	r28
    2f12:	1f 91       	pop	r17
    2f14:	0f 91       	pop	r16
    2f16:	ff 90       	pop	r15
    2f18:	ef 90       	pop	r14
    2f1a:	df 90       	pop	r13
    2f1c:	08 95       	ret

00002f1e <Date_insert>:




void Date_insert()
{
    2f1e:	cf 92       	push	r12
    2f20:	df 92       	push	r13
    2f22:	ef 92       	push	r14
    2f24:	ff 92       	push	r15
    2f26:	0f 93       	push	r16
    2f28:	1f 93       	push	r17
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	cd b7       	in	r28, 0x3d	; 61
    2f30:	de b7       	in	r29, 0x3e	; 62
    2f32:	aa 97       	sbiw	r28, 0x2a	; 42
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	f8 94       	cli
    2f38:	de bf       	out	0x3e, r29	; 62
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	cd bf       	out	0x3d, r28	; 61
	unsigned char c,r;
	int pos = 0 ;
	unsigned char k[4][3]={{14,0,15},{7,8,9},{4,5,6},{1,2,3}};
    2f3e:	8c e0       	ldi	r24, 0x0C	; 12
    2f40:	ea e3       	ldi	r30, 0x3A	; 58
    2f42:	f1 e0       	ldi	r31, 0x01	; 1
    2f44:	de 01       	movw	r26, r28
    2f46:	11 96       	adiw	r26, 0x01	; 1
    2f48:	01 90       	ld	r0, Z+
    2f4a:	0d 92       	st	X+, r0
    2f4c:	8a 95       	dec	r24
    2f4e:	e1 f7       	brne	.-8      	; 0x2f48 <Date_insert+0x2a>
	int input=0;
	LCD_Init();
    2f50:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	char fog[10]={0};
    2f54:	fe 01       	movw	r30, r28
    2f56:	3d 96       	adiw	r30, 0x0d	; 13
    2f58:	8a e0       	ldi	r24, 0x0A	; 10
    2f5a:	df 01       	movw	r26, r30
    2f5c:	1d 92       	st	X+, r1
    2f5e:	8a 95       	dec	r24
    2f60:	e9 f7       	brne	.-6      	; 0x2f5c <Date_insert+0x3e>
void Date_insert()
{
	unsigned char c,r;
	int pos = 0 ;
	unsigned char k[4][3]={{14,0,15},{7,8,9},{4,5,6},{1,2,3}};
	int input=0;
    2f62:	c1 2c       	mov	r12, r1
    2f64:	d1 2c       	mov	r13, r1


void Date_insert()
{
	unsigned char c,r;
	int pos = 0 ;
    2f66:	00 e0       	ldi	r16, 0x00	; 0
    2f68:	10 e0       	ldi	r17, 0x00	; 0
	int Set_Date[10];
	int rtc_year=0;
	
	while(1)
	{
		DDRD = 0xf0;
    2f6a:	80 ef       	ldi	r24, 0xF0	; 240
    2f6c:	8a b9       	out	0x0a, r24	; 10
		PORTD = 0x7f;
    2f6e:	8f e7       	ldi	r24, 0x7F	; 127
    2f70:	8b b9       	out	0x0b, r24	; 11
		if (pos<10 & pos!=4 & pos!=7){   // key pad input loop
    2f72:	ff 24       	eor	r15, r15
    2f74:	f3 94       	inc	r15
    2f76:	0a 30       	cpi	r16, 0x0A	; 10
    2f78:	11 05       	cpc	r17, r1
    2f7a:	0c f0       	brlt	.+2      	; 0x2f7e <Date_insert+0x60>
    2f7c:	f1 2c       	mov	r15, r1
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	04 30       	cpi	r16, 0x04	; 4
    2f82:	11 05       	cpc	r17, r1
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <Date_insert+0x6a>
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	8f 21       	and	r24, r15
    2f8a:	91 e0       	ldi	r25, 0x01	; 1
    2f8c:	07 30       	cpi	r16, 0x07	; 7
    2f8e:	11 05       	cpc	r17, r1
    2f90:	09 f4       	brne	.+2      	; 0x2f94 <Date_insert+0x76>
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	88 23       	and	r24, r24
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <Date_insert+0x7c>
    2f98:	bc c0       	rjmp	.+376    	; 0x3112 <Date_insert+0x1f4>
    2f9a:	99 23       	and	r25, r25
    2f9c:	09 f4       	brne	.+2      	; 0x2fa0 <Date_insert+0x82>
    2f9e:	b9 c0       	rjmp	.+370    	; 0x3112 <Date_insert+0x1f4>
			do
			{
				PORTD&=0x0f;
    2fa0:	8b b1       	in	r24, 0x0b	; 11
    2fa2:	8f 70       	andi	r24, 0x0F	; 15
    2fa4:	8b b9       	out	0x0b, r24	; 11
				r=PIND&0x0f;
    2fa6:	89 b1       	in	r24, 0x09	; 9
    2fa8:	8f 70       	andi	r24, 0x0F	; 15
			} while(r!=0x0f);
    2faa:	8f 30       	cpi	r24, 0x0F	; 15
    2fac:	c9 f7       	brne	.-14     	; 0x2fa0 <Date_insert+0x82>
			
			do
			{
				r=PIND&0x0f;
    2fae:	89 b1       	in	r24, 0x09	; 9
    2fb0:	8f 70       	andi	r24, 0x0F	; 15
			}	  while(r==0x0f);
    2fb2:	8f 30       	cpi	r24, 0x0F	; 15
    2fb4:	e1 f3       	breq	.-8      	; 0x2fae <Date_insert+0x90>
			
			while(1)
			{
				PORTD=0x6f;
    2fb6:	8f e6       	ldi	r24, 0x6F	; 111
    2fb8:	8b b9       	out	0x0b, r24	; 11
				r=PIND&0x0f;
    2fba:	89 b1       	in	r24, 0x09	; 9
    2fbc:	8f 70       	andi	r24, 0x0F	; 15
				if(r!=0x0f)
    2fbe:	8f 30       	cpi	r24, 0x0F	; 15
    2fc0:	71 f4       	brne	.+28     	; 0x2fde <Date_insert+0xc0>
				{
					c=0;
					break;
				}
				PORTD=0x5f;
    2fc2:	8f e5       	ldi	r24, 0x5F	; 95
    2fc4:	8b b9       	out	0x0b, r24	; 11
				r=PIND&0x0f;
    2fc6:	89 b1       	in	r24, 0x09	; 9
    2fc8:	8f 70       	andi	r24, 0x0F	; 15
				if(r!=0x0f)
    2fca:	8f 30       	cpi	r24, 0x0F	; 15
    2fcc:	51 f4       	brne	.+20     	; 0x2fe2 <Date_insert+0xc4>
				{
					c=1;
					break;
				}
				PORTD=0x3f;
    2fce:	8f e3       	ldi	r24, 0x3F	; 63
    2fd0:	8b b9       	out	0x0b, r24	; 11
				r=PIND&0x0f;
    2fd2:	89 b1       	in	r24, 0x09	; 9
    2fd4:	8f 70       	andi	r24, 0x0F	; 15
				if(r!=0x0f)
    2fd6:	8f 30       	cpi	r24, 0x0F	; 15
    2fd8:	71 f3       	breq	.-36     	; 0x2fb6 <Date_insert+0x98>
				{
					c=2;
    2fda:	92 e0       	ldi	r25, 0x02	; 2
    2fdc:	03 c0       	rjmp	.+6      	; 0x2fe4 <Date_insert+0xc6>
			{
				PORTD=0x6f;
				r=PIND&0x0f;
				if(r!=0x0f)
				{
					c=0;
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	01 c0       	rjmp	.+2      	; 0x2fe4 <Date_insert+0xc6>
				}
				PORTD=0x5f;
				r=PIND&0x0f;
				if(r!=0x0f)
				{
					c=1;
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
				}

			}
			

			if(r==0x0e)
    2fe4:	8e 30       	cpi	r24, 0x0E	; 14
    2fe6:	89 f4       	brne	.+34     	; 0x300a <Date_insert+0xec>
			{
				input=k[0][c];
    2fe8:	e1 e0       	ldi	r30, 0x01	; 1
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	ec 0f       	add	r30, r28
    2fee:	fd 1f       	adc	r31, r29
    2ff0:	e9 0f       	add	r30, r25
    2ff2:	f1 1d       	adc	r31, r1
    2ff4:	c0 80       	ld	r12, Z
    2ff6:	d1 2c       	mov	r13, r1
				itoa(input,fog,10);
    2ff8:	4a e0       	ldi	r20, 0x0A	; 10
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	be 01       	movw	r22, r28
    2ffe:	63 5f       	subi	r22, 0xF3	; 243
    3000:	7f 4f       	sbci	r23, 0xFF	; 255
    3002:	c6 01       	movw	r24, r12
    3004:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
    3008:	36 c0       	rjmp	.+108    	; 0x3076 <Date_insert+0x158>
			}
			else if(r==0x0d)
    300a:	8d 30       	cpi	r24, 0x0D	; 13
    300c:	89 f4       	brne	.+34     	; 0x3030 <Date_insert+0x112>
			{
				input=k[1][c];
    300e:	e4 e0       	ldi	r30, 0x04	; 4
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	ec 0f       	add	r30, r28
    3014:	fd 1f       	adc	r31, r29
    3016:	e9 0f       	add	r30, r25
    3018:	f1 1d       	adc	r31, r1
    301a:	c0 80       	ld	r12, Z
    301c:	d1 2c       	mov	r13, r1
				itoa(input,fog,10);
    301e:	4a e0       	ldi	r20, 0x0A	; 10
    3020:	50 e0       	ldi	r21, 0x00	; 0
    3022:	be 01       	movw	r22, r28
    3024:	63 5f       	subi	r22, 0xF3	; 243
    3026:	7f 4f       	sbci	r23, 0xFF	; 255
    3028:	c6 01       	movw	r24, r12
    302a:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
    302e:	23 c0       	rjmp	.+70     	; 0x3076 <Date_insert+0x158>
			}
			else if(r==0x0b)
    3030:	8b 30       	cpi	r24, 0x0B	; 11
    3032:	89 f4       	brne	.+34     	; 0x3056 <Date_insert+0x138>
			{
				input=k[2][c];
    3034:	e7 e0       	ldi	r30, 0x07	; 7
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	ec 0f       	add	r30, r28
    303a:	fd 1f       	adc	r31, r29
    303c:	e9 0f       	add	r30, r25
    303e:	f1 1d       	adc	r31, r1
    3040:	c0 80       	ld	r12, Z
    3042:	d1 2c       	mov	r13, r1
				itoa(input,fog,10);
    3044:	4a e0       	ldi	r20, 0x0A	; 10
    3046:	50 e0       	ldi	r21, 0x00	; 0
    3048:	be 01       	movw	r22, r28
    304a:	63 5f       	subi	r22, 0xF3	; 243
    304c:	7f 4f       	sbci	r23, 0xFF	; 255
    304e:	c6 01       	movw	r24, r12
    3050:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
    3054:	10 c0       	rjmp	.+32     	; 0x3076 <Date_insert+0x158>
			}
			else {
				input=k[3][c];
    3056:	ea e0       	ldi	r30, 0x0A	; 10
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	ec 0f       	add	r30, r28
    305c:	fd 1f       	adc	r31, r29
    305e:	e9 0f       	add	r30, r25
    3060:	f1 1d       	adc	r31, r1
    3062:	c0 80       	ld	r12, Z
    3064:	d1 2c       	mov	r13, r1
				itoa(input,fog,10);
    3066:	4a e0       	ldi	r20, 0x0A	; 10
    3068:	50 e0       	ldi	r21, 0x00	; 0
    306a:	be 01       	movw	r22, r28
    306c:	63 5f       	subi	r22, 0xF3	; 243
    306e:	7f 4f       	sbci	r23, 0xFF	; 255
    3070:	c6 01       	movw	r24, r12
    3072:	0e 94 b5 23 	call	0x476a	; 0x476a <itoa>
			}
			
			if ((input!=14) && (input !=15)){
    3076:	c6 01       	movw	r24, r12
    3078:	0e 97       	sbiw	r24, 0x0e	; 14
    307a:	02 97       	sbiw	r24, 0x02	; 2
    307c:	08 f4       	brcc	.+2      	; 0x3080 <Date_insert+0x162>
    307e:	5a c0       	rjmp	.+180    	; 0x3134 <Date_insert+0x216>
				Set_Date[pos]=input;
    3080:	f8 01       	movw	r30, r16
    3082:	ee 0f       	add	r30, r30
    3084:	ff 1f       	adc	r31, r31
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	8c 0f       	add	r24, r28
    308c:	9d 1f       	adc	r25, r29
    308e:	e8 0f       	add	r30, r24
    3090:	f9 1f       	adc	r31, r25
    3092:	d7 8a       	std	Z+23, r13	; 0x17
    3094:	c6 8a       	std	Z+22, r12	; 0x16
			LCD_String_xy(0,pos,fog);
    3096:	e0 2e       	mov	r14, r16
    3098:	ae 01       	movw	r20, r28
    309a:	43 5f       	subi	r20, 0xF3	; 243
    309c:	5f 4f       	sbci	r21, 0xFF	; 255
    309e:	60 2f       	mov	r22, r16
    30a0:	80 e0       	ldi	r24, 0x00	; 0
    30a2:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
			LCD_Command(0xC0);
    30a6:	80 ec       	ldi	r24, 0xC0	; 192
    30a8:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
			LCD_String_xy(1,pos,"^");
    30ac:	49 e6       	ldi	r20, 0x69	; 105
    30ae:	53 e0       	ldi	r21, 0x03	; 3
    30b0:	60 2f       	mov	r22, r16
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
			if (pos<10 & pos!=5 & pos!=8){
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	05 30       	cpi	r16, 0x05	; 5
    30bc:	11 05       	cpc	r17, r1
    30be:	09 f4       	brne	.+2      	; 0x30c2 <Date_insert+0x1a4>
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	f8 22       	and	r15, r24
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	08 30       	cpi	r16, 0x08	; 8
    30c8:	11 05       	cpc	r17, r1
    30ca:	09 f4       	brne	.+2      	; 0x30ce <Date_insert+0x1b0>
    30cc:	80 e0       	ldi	r24, 0x00	; 0
    30ce:	ff 20       	and	r15, r15
    30d0:	51 f0       	breq	.+20     	; 0x30e6 <Date_insert+0x1c8>
    30d2:	88 23       	and	r24, r24
    30d4:	41 f0       	breq	.+16     	; 0x30e6 <Date_insert+0x1c8>
				LCD_String_xy(1,pos-1," ");
    30d6:	6f ef       	ldi	r22, 0xFF	; 255
    30d8:	6e 0d       	add	r22, r14
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	53 e0       	ldi	r21, 0x03	; 3
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
    30e4:	13 c0       	rjmp	.+38     	; 0x310c <Date_insert+0x1ee>
			}
			
			else if(pos==5 | pos ==8){
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	05 30       	cpi	r16, 0x05	; 5
    30ea:	11 05       	cpc	r17, r1
    30ec:	09 f0       	breq	.+2      	; 0x30f0 <Date_insert+0x1d2>
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	08 30       	cpi	r16, 0x08	; 8
    30f4:	11 05       	cpc	r17, r1
    30f6:	09 f0       	breq	.+2      	; 0x30fa <Date_insert+0x1dc>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	89 2b       	or	r24, r25
    30fc:	39 f0       	breq	.+14     	; 0x310c <Date_insert+0x1ee>
				LCD_String_xy(1,pos-2," ");
    30fe:	6e ef       	ldi	r22, 0xFE	; 254
    3100:	6e 0d       	add	r22, r14
    3102:	40 e0       	ldi	r20, 0x00	; 0
    3104:	53 e0       	ldi	r21, 0x03	; 3
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
			}
			pos++;}
    310c:	0f 5f       	subi	r16, 0xFF	; 255
    310e:	1f 4f       	sbci	r17, 0xFF	; 255
    3110:	11 c0       	rjmp	.+34     	; 0x3134 <Date_insert+0x216>
			
		} else if (pos==4 | pos==7){
    3112:	91 e0       	ldi	r25, 0x01	; 1
    3114:	04 30       	cpi	r16, 0x04	; 4
    3116:	11 05       	cpc	r17, r1
    3118:	09 f0       	breq	.+2      	; 0x311c <Date_insert+0x1fe>
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	07 30       	cpi	r16, 0x07	; 7
    3120:	11 05       	cpc	r17, r1
    3122:	09 f0       	breq	.+2      	; 0x3126 <Date_insert+0x208>
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	89 2b       	or	r24, r25
    3128:	19 f0       	breq	.+6      	; 0x3130 <Date_insert+0x212>
			pos++;
    312a:	0f 5f       	subi	r16, 0xFF	; 255
    312c:	1f 4f       	sbci	r17, 0xFF	; 255
    312e:	02 c0       	rjmp	.+4      	; 0x3134 <Date_insert+0x216>
		}
		else
		{
			pos=0;
    3130:	00 e0       	ldi	r16, 0x00	; 0
    3132:	10 e0       	ldi	r17, 0x00	; 0
			
		}
		
		if(input==14)  // Checking valid inputs for date setting
    3134:	9e e0       	ldi	r25, 0x0E	; 14
    3136:	c9 16       	cp	r12, r25
    3138:	d1 04       	cpc	r13, r1
    313a:	09 f0       	breq	.+2      	; 0x313e <Date_insert+0x220>
    313c:	84 c0       	rjmp	.+264    	; 0x3246 <Date_insert+0x328>
		{
			if ((2000<(Set_Date[0]*1000+Set_Date[1]*100+Set_Date[2]*10+Set_Date[3])<2099)&&(Set_Date[5]*10+Set_Date[6]<13) && (Set_Date[8]*10+Set_Date[9]<32)){
    313e:	89 a1       	ldd	r24, Y+33	; 0x21
    3140:	9a a1       	ldd	r25, Y+34	; 0x22
    3142:	bc 01       	movw	r22, r24
    3144:	66 0f       	add	r22, r22
    3146:	77 1f       	adc	r23, r23
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	88 0f       	add	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	86 0f       	add	r24, r22
    3156:	97 1f       	adc	r25, r23
    3158:	6b a1       	ldd	r22, Y+35	; 0x23
    315a:	7c a1       	ldd	r23, Y+36	; 0x24
    315c:	86 0f       	add	r24, r22
    315e:	97 1f       	adc	r25, r23
    3160:	8d 30       	cpi	r24, 0x0D	; 13
    3162:	91 05       	cpc	r25, r1
    3164:	0c f0       	brlt	.+2      	; 0x3168 <Date_insert+0x24a>
    3166:	52 c0       	rjmp	.+164    	; 0x320c <Date_insert+0x2ee>
    3168:	2f a1       	ldd	r18, Y+39	; 0x27
    316a:	38 a5       	ldd	r19, Y+40	; 0x28
    316c:	a9 01       	movw	r20, r18
    316e:	44 0f       	add	r20, r20
    3170:	55 1f       	adc	r21, r21
    3172:	22 0f       	add	r18, r18
    3174:	33 1f       	adc	r19, r19
    3176:	22 0f       	add	r18, r18
    3178:	33 1f       	adc	r19, r19
    317a:	22 0f       	add	r18, r18
    317c:	33 1f       	adc	r19, r19
    317e:	24 0f       	add	r18, r20
    3180:	35 1f       	adc	r19, r21
    3182:	49 a5       	ldd	r20, Y+41	; 0x29
    3184:	5a a5       	ldd	r21, Y+42	; 0x2a
    3186:	42 0f       	add	r20, r18
    3188:	53 1f       	adc	r21, r19
    318a:	40 32       	cpi	r20, 0x20	; 32
    318c:	51 05       	cpc	r21, r1
    318e:	0c f0       	brlt	.+2      	; 0x3192 <Date_insert+0x274>
    3190:	3d c0       	rjmp	.+122    	; 0x320c <Date_insert+0x2ee>
				
				Current_Time[0]=Set_Date[2]*10+Set_Date[3];
    3192:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3194:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3196:	b9 01       	movw	r22, r18
    3198:	66 0f       	add	r22, r22
    319a:	77 1f       	adc	r23, r23
    319c:	22 0f       	add	r18, r18
    319e:	33 1f       	adc	r19, r19
    31a0:	22 0f       	add	r18, r18
    31a2:	33 1f       	adc	r19, r19
    31a4:	22 0f       	add	r18, r18
    31a6:	33 1f       	adc	r19, r19
    31a8:	26 0f       	add	r18, r22
    31aa:	37 1f       	adc	r19, r23
    31ac:	ad 8d       	ldd	r26, Y+29	; 0x1d
    31ae:	be 8d       	ldd	r27, Y+30	; 0x1e
    31b0:	a2 0f       	add	r26, r18
    31b2:	b3 1f       	adc	r27, r19
    31b4:	e8 eb       	ldi	r30, 0xB8	; 184
    31b6:	f6 e0       	ldi	r31, 0x06	; 6
    31b8:	b1 83       	std	Z+1, r27	; 0x01
    31ba:	a0 83       	st	Z, r26
				Current_Time[1]=Set_Date[5]*10+Set_Date[6];  
    31bc:	93 83       	std	Z+3, r25	; 0x03
    31be:	82 83       	std	Z+2, r24	; 0x02
				Current_Time[2]=Set_Date[8]*10+Set_Date[9];
    31c0:	55 83       	std	Z+5, r21	; 0x05
    31c2:	44 83       	std	Z+4, r20	; 0x04
				rtc_year=Set_Date[2]*10+Set_Date[3];
				Setdate(rtc_year,Current_Time[1],Current_Time[2],Current_Time[3],Current_Time[4],Current_Time[5]);
    31c4:	e2 84       	ldd	r14, Z+10	; 0x0a
    31c6:	00 85       	ldd	r16, Z+8	; 0x08
    31c8:	26 81       	ldd	r18, Z+6	; 0x06
    31ca:	68 2f       	mov	r22, r24
    31cc:	8a 2f       	mov	r24, r26
    31ce:	0e 94 cd 14 	call	0x299a	; 0x299a <Setdate>
				LCD_Clear();
    31d2:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
				LCD_String("DATE SET DONE");
    31d6:	83 e4       	ldi	r24, 0x43	; 67
    31d8:	95 e0       	ldi	r25, 0x05	; 5
    31da:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31de:	88 e8       	ldi	r24, 0x88	; 136
    31e0:	93 e1       	ldi	r25, 0x13	; 19
    31e2:	05 c0       	rjmp	.+10     	; 0x31ee <Date_insert+0x2d0>
    31e4:	e0 e9       	ldi	r30, 0x90	; 144
    31e6:	f1 e0       	ldi	r31, 0x01	; 1
    31e8:	31 97       	sbiw	r30, 0x01	; 1
    31ea:	f1 f7       	brne	.-4      	; 0x31e8 <Date_insert+0x2ca>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	c9 f7       	brne	.-14     	; 0x31e4 <Date_insert+0x2c6>
				_delay_ms(500);
				update_Clock_Menu();
    31f2:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <update_Clock_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f6:	80 e1       	ldi	r24, 0x10	; 16
    31f8:	97 e2       	ldi	r25, 0x27	; 39
    31fa:	05 c0       	rjmp	.+10     	; 0x3206 <Date_insert+0x2e8>
    31fc:	e0 e9       	ldi	r30, 0x90	; 144
    31fe:	f1 e0       	ldi	r31, 0x01	; 1
    3200:	31 97       	sbiw	r30, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <Date_insert+0x2e2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3204:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	c9 f7       	brne	.-14     	; 0x31fc <Date_insert+0x2de>
    320a:	33 c0       	rjmp	.+102    	; 0x3272 <Date_insert+0x354>
				_delay_ms(1000);
				break;
				}else{
				LCD_Clear();
    320c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
				LCD_String("INVALID INPUT");
    3210:	8a e7       	ldi	r24, 0x7A	; 122
    3212:	93 e0       	ldi	r25, 0x03	; 3
    3214:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3218:	80 e1       	ldi	r24, 0x10	; 16
    321a:	97 e2       	ldi	r25, 0x27	; 39
    321c:	05 c0       	rjmp	.+10     	; 0x3228 <Date_insert+0x30a>
    321e:	e0 e9       	ldi	r30, 0x90	; 144
    3220:	f1 e0       	ldi	r31, 0x01	; 1
    3222:	31 97       	sbiw	r30, 0x01	; 1
    3224:	f1 f7       	brne	.-4      	; 0x3222 <Date_insert+0x304>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3226:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	c9 f7       	brne	.-14     	; 0x321e <Date_insert+0x300>
				_delay_ms(1000);
				LCD_Clear();
    322c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
				LCD_Date_Print(Current_Time[0],Current_Time[1],Current_Time[2]);
    3230:	e8 eb       	ldi	r30, 0xB8	; 184
    3232:	f6 e0       	ldi	r31, 0x06	; 6
    3234:	44 81       	ldd	r20, Z+4	; 0x04
    3236:	55 81       	ldd	r21, Z+5	; 0x05
    3238:	62 81       	ldd	r22, Z+2	; 0x02
    323a:	73 81       	ldd	r23, Z+3	; 0x03
    323c:	80 81       	ld	r24, Z
    323e:	91 81       	ldd	r25, Z+1	; 0x01
    3240:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LCD_Date_Print>
    3244:	92 ce       	rjmp	.-732    	; 0x2f6a <Date_insert+0x4c>
				
			}
			
		}
		else if (input==15)
    3246:	af e0       	ldi	r26, 0x0F	; 15
    3248:	ca 16       	cp	r12, r26
    324a:	d1 04       	cpc	r13, r1
    324c:	09 f0       	breq	.+2      	; 0x3250 <Date_insert+0x332>
    324e:	8d ce       	rjmp	.-742    	; 0x2f6a <Date_insert+0x4c>
		{   //h=0;
			DDRD=0x0f;
    3250:	8f e0       	ldi	r24, 0x0F	; 15
    3252:	8a b9       	out	0x0a, r24	; 10
			PORTD&=0x7e;
    3254:	8b b1       	in	r24, 0x0b	; 11
    3256:	8e 77       	andi	r24, 0x7E	; 126
    3258:	8b b9       	out	0x0b, r24	; 11
			update_Clock_Menu();
    325a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <update_Clock_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325e:	80 e1       	ldi	r24, 0x10	; 16
    3260:	97 e2       	ldi	r25, 0x27	; 39
    3262:	05 c0       	rjmp	.+10     	; 0x326e <Date_insert+0x350>
    3264:	e0 e9       	ldi	r30, 0x90	; 144
    3266:	f1 e0       	ldi	r31, 0x01	; 1
    3268:	31 97       	sbiw	r30, 0x01	; 1
    326a:	f1 f7       	brne	.-4      	; 0x3268 <Date_insert+0x34a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	c9 f7       	brne	.-14     	; 0x3264 <Date_insert+0x346>
			_delay_ms(1000);
			break;
			
		}
	}
}
    3272:	aa 96       	adiw	r28, 0x2a	; 42
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	de bf       	out	0x3e, r29	; 62
    327a:	0f be       	out	0x3f, r0	; 63
    327c:	cd bf       	out	0x3d, r28	; 61
    327e:	df 91       	pop	r29
    3280:	cf 91       	pop	r28
    3282:	1f 91       	pop	r17
    3284:	0f 91       	pop	r16
    3286:	ff 90       	pop	r15
    3288:	ef 90       	pop	r14
    328a:	df 90       	pop	r13
    328c:	cf 90       	pop	r12
    328e:	08 95       	ret

00003290 <Set_Time_Action>:
	}
	
}

void Set_Time_Action(){  // When go inside the last time in storage will be displayed for setting like usual phone clocks
	LCD_Init();
    3290:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	LCD_Clear();
    3294:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_Time_Print(Current_Time[3],Current_Time[4],Current_Time[5]);
    3298:	e8 eb       	ldi	r30, 0xB8	; 184
    329a:	f6 e0       	ldi	r31, 0x06	; 6
    329c:	42 85       	ldd	r20, Z+10	; 0x0a
    329e:	53 85       	ldd	r21, Z+11	; 0x0b
    32a0:	60 85       	ldd	r22, Z+8	; 0x08
    32a2:	71 85       	ldd	r23, Z+9	; 0x09
    32a4:	86 81       	ldd	r24, Z+6	; 0x06
    32a6:	97 81       	ldd	r25, Z+7	; 0x07
    32a8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_Time_Print>
	Time_insert();
    32ac:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <Time_insert>
    32b0:	08 95       	ret

000032b2 <Set_Date_Action>:
}

void Set_Date_Action(){  // When go inside the last date in storage will be displayed for setting like usual phone clocks
	LCD_Init();
    32b2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	LCD_Clear();
    32b6:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_Date_Print(Current_Time[0],Current_Time[1],Current_Time[2]);
    32ba:	e8 eb       	ldi	r30, 0xB8	; 184
    32bc:	f6 e0       	ldi	r31, 0x06	; 6
    32be:	44 81       	ldd	r20, Z+4	; 0x04
    32c0:	55 81       	ldd	r21, Z+5	; 0x05
    32c2:	62 81       	ldd	r22, Z+2	; 0x02
    32c4:	73 81       	ldd	r23, Z+3	; 0x03
    32c6:	80 81       	ld	r24, Z
    32c8:	91 81       	ldd	r25, Z+1	; 0x01
    32ca:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LCD_Date_Print>
	Date_insert();
    32ce:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <Date_insert>
    32d2:	08 95       	ret

000032d4 <execute_clockAction>:

}

void execute_clockAction()
{
	switch (Clock_Menu) {
    32d4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Clock_Menu>
    32d8:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Clock_Menu+0x1>
    32dc:	81 30       	cpi	r24, 0x01	; 1
    32de:	91 05       	cpc	r25, r1
    32e0:	19 f0       	breq	.+6      	; 0x32e8 <execute_clockAction+0x14>
    32e2:	02 97       	sbiw	r24, 0x02	; 2
    32e4:	21 f0       	breq	.+8      	; 0x32ee <execute_clockAction+0x1a>
    32e6:	08 95       	ret
		case 1:
		Set_Time_Action();
    32e8:	0e 94 48 19 	call	0x3290	; 0x3290 <Set_Time_Action>
		break;
    32ec:	08 95       	ret
		case 2:
		Set_Date_Action();
    32ee:	0e 94 59 19 	call	0x32b2	; 0x32b2 <Set_Date_Action>
    32f2:	08 95       	ret

000032f4 <update_Factory_Menu>:
int Factory_Menu=1;



void update_Factory_Menu(){
	switch(Factory_Menu){
    32f4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Factory_Menu>
    32f8:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Factory_Menu+0x1>
    32fc:	81 30       	cpi	r24, 0x01	; 1
    32fe:	91 05       	cpc	r25, r1
    3300:	89 f0       	breq	.+34     	; 0x3324 <update_Factory_Menu+0x30>
    3302:	1c f4       	brge	.+6      	; 0x330a <update_Factory_Menu+0x16>
    3304:	89 2b       	or	r24, r25
    3306:	39 f0       	breq	.+14     	; 0x3316 <update_Factory_Menu+0x22>
    3308:	08 95       	ret
    330a:	82 30       	cpi	r24, 0x02	; 2
    330c:	91 05       	cpc	r25, r1
    330e:	d1 f0       	breq	.+52     	; 0x3344 <update_Factory_Menu+0x50>
    3310:	03 97       	sbiw	r24, 0x03	; 3
    3312:	41 f1       	breq	.+80     	; 0x3364 <update_Factory_Menu+0x70>
    3314:	08 95       	ret
		case 0:
		Factory_Menu = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <Factory_Menu+0x1>
    331e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Factory_Menu>
		break;
    3322:	08 95       	ret
		case 1:							//initial display state
		LCD_Init();
    3324:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    3328:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("Sure ?");
    332c:	81 e5       	ldi	r24, 0x51	; 81
    332e:	95 e0       	ldi	r25, 0x05	; 5
    3330:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    3334:	80 ec       	ldi	r24, 0xC0	; 192
    3336:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String("<YES>        NO ");
    333a:	88 e5       	ldi	r24, 0x58	; 88
    333c:	95 e0       	ldi	r25, 0x05	; 5
    333e:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    3342:	08 95       	ret
		case 2:							//2nd display state
		LCD_Init();
    3344:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    3348:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String("Sure ?");
    334c:	81 e5       	ldi	r24, 0x51	; 81
    334e:	95 e0       	ldi	r25, 0x05	; 5
    3350:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    3354:	80 ec       	ldi	r24, 0xC0	; 192
    3356:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(" YES        <NO>");
    335a:	89 e6       	ldi	r24, 0x69	; 105
    335c:	95 e0       	ldi	r25, 0x05	; 5
    335e:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    3362:	08 95       	ret
		case 3:
		Factory_Menu = 1;
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <Factory_Menu+0x1>
    336c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Factory_Menu>
    3370:	08 95       	ret

00003372 <updateMenu>:

bool menu_can_access = true;
int Menu=1;

void updateMenu(){
	switch(Menu){
    3372:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <Menu>
    3376:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <Menu+0x1>
    337a:	e8 30       	cpi	r30, 0x08	; 8
    337c:	f1 05       	cpc	r31, r1
    337e:	08 f0       	brcs	.+2      	; 0x3382 <updateMenu+0x10>
    3380:	71 c0       	rjmp	.+226    	; 0x3464 <updateMenu+0xf2>
    3382:	e7 5b       	subi	r30, 0xB7	; 183
    3384:	ff 4f       	sbci	r31, 0xFF	; 255
    3386:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <__tablejump2__>
		case 0:
		Menu = 1;
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Menu+0x1>
    3392:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Menu>
		break;
    3396:	08 95       	ret
		case 1:							
		LCD_Init();                     //1st display
    3398:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    339c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String(">> Set Clock");
    33a0:	8a e7       	ldi	r24, 0x7A	; 122
    33a2:	95 e0       	ldi	r25, 0x05	; 5
    33a4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    33a8:	80 ec       	ldi	r24, 0xC0	; 192
    33aa:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(" > Set Alarm");
    33ae:	87 e8       	ldi	r24, 0x87	; 135
    33b0:	95 e0       	ldi	r25, 0x05	; 5
    33b2:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    33b6:	08 95       	ret
		case 2:							//2nd display state
		LCD_Init();
    33b8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    33bc:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String(" > Set Clock");
    33c0:	84 e9       	ldi	r24, 0x94	; 148
    33c2:	95 e0       	ldi	r25, 0x05	; 5
    33c4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    33c8:	80 ec       	ldi	r24, 0xC0	; 192
    33ca:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(">> Set Alarm");
    33ce:	81 ea       	ldi	r24, 0xA1	; 161
    33d0:	95 e0       	ldi	r25, 0x05	; 5
    33d2:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    33d6:	08 95       	ret
		case 3:							//Third display state
		LCD_Init();
    33d8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    33dc:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String(">> Alarm Status");
    33e0:	8e ea       	ldi	r24, 0xAE	; 174
    33e2:	95 e0       	ldi	r25, 0x05	; 5
    33e4:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    33e8:	80 ec       	ldi	r24, 0xC0	; 192
    33ea:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(" > Alarm Tone");
    33ee:	8e eb       	ldi	r24, 0xBE	; 190
    33f0:	95 e0       	ldi	r25, 0x05	; 5
    33f2:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    33f6:	08 95       	ret
		case 4:							
		LCD_Init();
    33f8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();                      //4th display
    33fc:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String(" > Alarm Status");
    3400:	8c ec       	ldi	r24, 0xCC	; 204
    3402:	95 e0       	ldi	r25, 0x05	; 5
    3404:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    3408:	80 ec       	ldi	r24, 0xC0	; 192
    340a:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(">> Alarm Tone");
    340e:	8c ed       	ldi	r24, 0xDC	; 220
    3410:	95 e0       	ldi	r25, 0x05	; 5
    3412:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    3416:	08 95       	ret
		case 5:
		LCD_Init();
    3418:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();                          //5th display
    341c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String(">> Factory Reset");
    3420:	8a ee       	ldi	r24, 0xEA	; 234
    3422:	95 e0       	ldi	r25, 0x05	; 5
    3424:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    3428:	80 ec       	ldi	r24, 0xC0	; 192
    342a:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(" > About Us");
    342e:	8b ef       	ldi	r24, 0xFB	; 251
    3430:	95 e0       	ldi	r25, 0x05	; 5
    3432:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    3436:	08 95       	ret
		case 6:
		LCD_Init();
    3438:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
		LCD_Clear();
    343c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		LCD_String(" > Factory Reset");          //6th display
    3440:	87 e0       	ldi	r24, 0x07	; 7
    3442:	96 e0       	ldi	r25, 0x06	; 6
    3444:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		LCD_Command(0xC0);
    3448:	80 ec       	ldi	r24, 0xC0	; 192
    344a:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
		LCD_String(">> About Us");
    344e:	88 e1       	ldi	r24, 0x18	; 24
    3450:	96 e0       	ldi	r25, 0x06	; 6
    3452:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
		break;
    3456:	08 95       	ret
		case 7:
		Menu = 6;
    3458:	86 e0       	ldi	r24, 0x06	; 6
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Menu+0x1>
    3460:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Menu>
    3464:	08 95       	ret

00003466 <Alarm_Menu_Buttons>:
void Alarm_Menu_Buttons()    // Navigating through alarm Menu
{
	
	while(1)
	{   
		DDRD=0x0f;
    3466:	8f e0       	ldi	r24, 0x0F	; 15
    3468:	8a b9       	out	0x0a, r24	; 10
		PORTD&=0xfe;
    346a:	8b b1       	in	r24, 0x0b	; 11
    346c:	8e 7f       	andi	r24, 0xFE	; 254
    346e:	8b b9       	out	0x0b, r24	; 11
		
		if (~PINC & (1<<PINC0)){
    3470:	30 9b       	sbis	0x06, 0	; 6
    3472:	07 c0       	rjmp	.+14     	; 0x3482 <Alarm_Menu_Buttons+0x1c>
    3474:	0f c0       	rjmp	.+30     	; 0x3494 <Alarm_Menu_Buttons+0x2e>
    3476:	e0 e9       	ldi	r30, 0x90	; 144
    3478:	f1 e0       	ldi	r31, 0x01	; 1
    347a:	31 97       	sbiw	r30, 0x01	; 1
    347c:	f1 f7       	brne	.-4      	; 0x347a <Alarm_Menu_Buttons+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	02 c0       	rjmp	.+4      	; 0x3486 <Alarm_Menu_Buttons+0x20>
    3482:	80 e1       	ldi	r24, 0x10	; 16
    3484:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3486:	00 97       	sbiw	r24, 0x00	; 0
    3488:	b1 f7       	brne	.-20     	; 0x3476 <Alarm_Menu_Buttons+0x10>
			_delay_ms(1000);
			LCD_Clear();
    348a:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
			execute_alarmAction();
    348e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <execute_alarmAction>
    3492:	e9 cf       	rjmp	.-46     	; 0x3466 <Alarm_Menu_Buttons>
		}
		else if (~PINC & (1<<PINC1)){
    3494:	31 99       	sbic	0x06, 1	; 6
    3496:	0d c0       	rjmp	.+26     	; 0x34b2 <Alarm_Menu_Buttons+0x4c>
            updateMenu();
    3498:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    349c:	80 e1       	ldi	r24, 0x10	; 16
    349e:	97 e2       	ldi	r25, 0x27	; 39
    34a0:	05 c0       	rjmp	.+10     	; 0x34ac <Alarm_Menu_Buttons+0x46>
    34a2:	e0 e9       	ldi	r30, 0x90	; 144
    34a4:	f1 e0       	ldi	r31, 0x01	; 1
    34a6:	31 97       	sbiw	r30, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <Alarm_Menu_Buttons+0x40>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	c9 f7       	brne	.-14     	; 0x34a2 <Alarm_Menu_Buttons+0x3c>
    34b0:	08 95       	ret
            _delay_ms(1000);
			break;
		}
		else if (~PIND & (1<<PIND4)){
    34b2:	4c 99       	sbic	0x09, 4	; 9
    34b4:	16 c0       	rjmp	.+44     	; 0x34e2 <Alarm_Menu_Buttons+0x7c>
			
			Alarm_Menu--;
    34b6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Alarm_Menu>
    34ba:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Alarm_Menu+0x1>
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <Alarm_Menu+0x1>
    34c4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Alarm_Menu>
			update_Alarm_Menu();
    34c8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <update_Alarm_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34cc:	80 e1       	ldi	r24, 0x10	; 16
    34ce:	97 e2       	ldi	r25, 0x27	; 39
    34d0:	05 c0       	rjmp	.+10     	; 0x34dc <Alarm_Menu_Buttons+0x76>
    34d2:	e0 e9       	ldi	r30, 0x90	; 144
    34d4:	f1 e0       	ldi	r31, 0x01	; 1
    34d6:	31 97       	sbiw	r30, 0x01	; 1
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <Alarm_Menu_Buttons+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	c9 f7       	brne	.-14     	; 0x34d2 <Alarm_Menu_Buttons+0x6c>
    34e0:	c2 cf       	rjmp	.-124    	; 0x3466 <Alarm_Menu_Buttons>
			_delay_ms(1000);
			
			
		}
		else if (~PIND & (1<<PIND6)){
    34e2:	4e 99       	sbic	0x09, 6	; 9
    34e4:	c0 cf       	rjmp	.-128    	; 0x3466 <Alarm_Menu_Buttons>
			
			Alarm_Menu++;
    34e6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Alarm_Menu>
    34ea:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <Alarm_Menu+0x1>
    34ee:	01 96       	adiw	r24, 0x01	; 1
    34f0:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <Alarm_Menu+0x1>
    34f4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Alarm_Menu>
			update_Alarm_Menu();
    34f8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <update_Alarm_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34fc:	80 e1       	ldi	r24, 0x10	; 16
    34fe:	97 e2       	ldi	r25, 0x27	; 39
    3500:	05 c0       	rjmp	.+10     	; 0x350c <Alarm_Menu_Buttons+0xa6>
    3502:	e0 e9       	ldi	r30, 0x90	; 144
    3504:	f1 e0       	ldi	r31, 0x01	; 1
    3506:	31 97       	sbiw	r30, 0x01	; 1
    3508:	f1 f7       	brne	.-4      	; 0x3506 <Alarm_Menu_Buttons+0xa0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    350a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	c9 f7       	brne	.-14     	; 0x3502 <Alarm_Menu_Buttons+0x9c>
    3510:	aa cf       	rjmp	.-172    	; 0x3466 <Alarm_Menu_Buttons>

00003512 <Status_Menu_Buttons>:
void Status_Menu_Buttons()   //Navigating through Alarm Statuses
{
	
	while(1)
	{
		DDRD=0x0f;
    3512:	8f e0       	ldi	r24, 0x0F	; 15
    3514:	8a b9       	out	0x0a, r24	; 10
		PORTD&=0xfe;
    3516:	8b b1       	in	r24, 0x0b	; 11
    3518:	8e 7f       	andi	r24, 0xFE	; 254
    351a:	8b b9       	out	0x0b, r24	; 11
		
		if (~PINC & (1<<PINC0)){
    351c:	30 9b       	sbis	0x06, 0	; 6
    351e:	07 c0       	rjmp	.+14     	; 0x352e <Status_Menu_Buttons+0x1c>
    3520:	0f c0       	rjmp	.+30     	; 0x3540 <Status_Menu_Buttons+0x2e>
    3522:	e0 e9       	ldi	r30, 0x90	; 144
    3524:	f1 e0       	ldi	r31, 0x01	; 1
    3526:	31 97       	sbiw	r30, 0x01	; 1
    3528:	f1 f7       	brne	.-4      	; 0x3526 <Status_Menu_Buttons+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <Status_Menu_Buttons+0x20>
    352e:	80 e1       	ldi	r24, 0x10	; 16
    3530:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	b1 f7       	brne	.-20     	; 0x3522 <Status_Menu_Buttons+0x10>
			_delay_ms(1000);
			LCD_Clear();
    3536:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
			execute_StatusAction();
    353a:	0e 94 b6 13 	call	0x276c	; 0x276c <execute_StatusAction>
    353e:	e9 cf       	rjmp	.-46     	; 0x3512 <Status_Menu_Buttons>
		}
		else if (~PINC & (1<<PINC1)){
    3540:	31 99       	sbic	0x06, 1	; 6
    3542:	0d c0       	rjmp	.+26     	; 0x355e <Status_Menu_Buttons+0x4c>
			updateMenu();
    3544:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3548:	80 e1       	ldi	r24, 0x10	; 16
    354a:	97 e2       	ldi	r25, 0x27	; 39
    354c:	05 c0       	rjmp	.+10     	; 0x3558 <Status_Menu_Buttons+0x46>
    354e:	e0 e9       	ldi	r30, 0x90	; 144
    3550:	f1 e0       	ldi	r31, 0x01	; 1
    3552:	31 97       	sbiw	r30, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <Status_Menu_Buttons+0x40>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3556:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	c9 f7       	brne	.-14     	; 0x354e <Status_Menu_Buttons+0x3c>
    355c:	08 95       	ret
			_delay_ms(1000);
			break;
		}
		else if (~PIND & (1<<PIND4)){
    355e:	4c 99       	sbic	0x09, 4	; 9
    3560:	16 c0       	rjmp	.+44     	; 0x358e <Status_Menu_Buttons+0x7c>
			
			Status_Menu--;
    3562:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    3566:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    356a:	01 97       	sbiw	r24, 0x01	; 1
    356c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <Status_Menu+0x1>
    3570:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Status_Menu>
			update_Status_Menu();
    3574:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <update_Status_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3578:	80 e1       	ldi	r24, 0x10	; 16
    357a:	97 e2       	ldi	r25, 0x27	; 39
    357c:	05 c0       	rjmp	.+10     	; 0x3588 <Status_Menu_Buttons+0x76>
    357e:	e0 e9       	ldi	r30, 0x90	; 144
    3580:	f1 e0       	ldi	r31, 0x01	; 1
    3582:	31 97       	sbiw	r30, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <Status_Menu_Buttons+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3586:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3588:	00 97       	sbiw	r24, 0x00	; 0
    358a:	c9 f7       	brne	.-14     	; 0x357e <Status_Menu_Buttons+0x6c>
    358c:	c2 cf       	rjmp	.-124    	; 0x3512 <Status_Menu_Buttons>
			_delay_ms(1000);
			
			
		}
		else if (~PIND & (1<<PIND6)){
    358e:	4e 99       	sbic	0x09, 6	; 9
    3590:	c0 cf       	rjmp	.-128    	; 0x3512 <Status_Menu_Buttons>
			
			Status_Menu++;
    3592:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Status_Menu>
    3596:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <Status_Menu+0x1>
    359a:	01 96       	adiw	r24, 0x01	; 1
    359c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <Status_Menu+0x1>
    35a0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Status_Menu>
			update_Status_Menu();
    35a4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <update_Status_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35a8:	80 e1       	ldi	r24, 0x10	; 16
    35aa:	97 e2       	ldi	r25, 0x27	; 39
    35ac:	05 c0       	rjmp	.+10     	; 0x35b8 <Status_Menu_Buttons+0xa6>
    35ae:	e0 e9       	ldi	r30, 0x90	; 144
    35b0:	f1 e0       	ldi	r31, 0x01	; 1
    35b2:	31 97       	sbiw	r30, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <Status_Menu_Buttons+0xa0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	c9 f7       	brne	.-14     	; 0x35ae <Status_Menu_Buttons+0x9c>
    35bc:	aa cf       	rjmp	.-172    	; 0x3512 <Status_Menu_Buttons>

000035be <execute_Tone_Action>:
}


void execute_Tone_Action(Tone_Menu)
{
	Alarm_tone=Tone_Menu;
    35be:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Alarm_tone+0x1>
    35c2:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Alarm_tone>
	LCD_Clear;
	LCD_String("ALARM TONE SET");
    35c6:	84 e2       	ldi	r24, 0x24	; 36
    35c8:	96 e0       	ldi	r25, 0x06	; 6
    35ca:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ce:	80 e1       	ldi	r24, 0x10	; 16
    35d0:	97 e2       	ldi	r25, 0x27	; 39
    35d2:	05 c0       	rjmp	.+10     	; 0x35de <execute_Tone_Action+0x20>
    35d4:	e0 e9       	ldi	r30, 0x90	; 144
    35d6:	f1 e0       	ldi	r31, 0x01	; 1
    35d8:	31 97       	sbiw	r30, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <execute_Tone_Action+0x1a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35de:	00 97       	sbiw	r24, 0x00	; 0
    35e0:	c9 f7       	brne	.-14     	; 0x35d4 <execute_Tone_Action+0x16>
	_delay_ms(1000);
	LCD_Clear;
	updateMenu();
    35e2:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
    35e6:	08 95       	ret

000035e8 <Tone_Menu_Buttons>:
void Tone_Menu_Buttons()
{
	
	while(1)
	{
		DDRD=0x0f;
    35e8:	8f e0       	ldi	r24, 0x0F	; 15
    35ea:	8a b9       	out	0x0a, r24	; 10
		PORTD&=0xfe;
    35ec:	8b b1       	in	r24, 0x0b	; 11
    35ee:	8e 7f       	andi	r24, 0xFE	; 254
    35f0:	8b b9       	out	0x0b, r24	; 11
		
		if (~PINC & (1<<PINC0)){
    35f2:	30 99       	sbic	0x06, 0	; 6
    35f4:	14 c0       	rjmp	.+40     	; 0x361e <Tone_Menu_Buttons+0x36>
    35f6:	06 c0       	rjmp	.+12     	; 0x3604 <Tone_Menu_Buttons+0x1c>
    35f8:	e0 e9       	ldi	r30, 0x90	; 144
    35fa:	f1 e0       	ldi	r31, 0x01	; 1
    35fc:	31 97       	sbiw	r30, 0x01	; 1
    35fe:	f1 f7       	brne	.-4      	; 0x35fc <Tone_Menu_Buttons+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3600:	01 97       	sbiw	r24, 0x01	; 1
    3602:	02 c0       	rjmp	.+4      	; 0x3608 <Tone_Menu_Buttons+0x20>
    3604:	80 e1       	ldi	r24, 0x10	; 16
    3606:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	b1 f7       	brne	.-20     	; 0x35f8 <Tone_Menu_Buttons+0x10>
			_delay_ms(1000);
			LCD_Clear();
    360c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
			execute_Tone_Action(Tone_Menu);
    3610:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Tone_Menu>
    3614:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Tone_Menu+0x1>
    3618:	0e 94 df 1a 	call	0x35be	; 0x35be <execute_Tone_Action>
			break;
    361c:	08 95       	ret
		}
		else if (~PINC & (1<<PINC1)){
    361e:	31 99       	sbic	0x06, 1	; 6
    3620:	0d c0       	rjmp	.+26     	; 0x363c <Tone_Menu_Buttons+0x54>
			updateMenu();
    3622:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3626:	80 e1       	ldi	r24, 0x10	; 16
    3628:	97 e2       	ldi	r25, 0x27	; 39
    362a:	05 c0       	rjmp	.+10     	; 0x3636 <Tone_Menu_Buttons+0x4e>
    362c:	e0 e9       	ldi	r30, 0x90	; 144
    362e:	f1 e0       	ldi	r31, 0x01	; 1
    3630:	31 97       	sbiw	r30, 0x01	; 1
    3632:	f1 f7       	brne	.-4      	; 0x3630 <Tone_Menu_Buttons+0x48>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3634:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3636:	00 97       	sbiw	r24, 0x00	; 0
    3638:	c9 f7       	brne	.-14     	; 0x362c <Tone_Menu_Buttons+0x44>
    363a:	08 95       	ret
			_delay_ms(1000);
			break;
		}
		else if (~PIND & (1<<PIND4)){
    363c:	4c 99       	sbic	0x09, 4	; 9
    363e:	16 c0       	rjmp	.+44     	; 0x366c <Tone_Menu_Buttons+0x84>
			
			Tone_Menu--;
    3640:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Tone_Menu>
    3644:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Tone_Menu+0x1>
    3648:	01 97       	sbiw	r24, 0x01	; 1
    364a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <Tone_Menu+0x1>
    364e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Tone_Menu>
			update_Tone_Menu();
    3652:	0e 94 39 0a 	call	0x1472	; 0x1472 <update_Tone_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3656:	80 e1       	ldi	r24, 0x10	; 16
    3658:	97 e2       	ldi	r25, 0x27	; 39
    365a:	05 c0       	rjmp	.+10     	; 0x3666 <Tone_Menu_Buttons+0x7e>
    365c:	e0 e9       	ldi	r30, 0x90	; 144
    365e:	f1 e0       	ldi	r31, 0x01	; 1
    3660:	31 97       	sbiw	r30, 0x01	; 1
    3662:	f1 f7       	brne	.-4      	; 0x3660 <Tone_Menu_Buttons+0x78>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3664:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3666:	00 97       	sbiw	r24, 0x00	; 0
    3668:	c9 f7       	brne	.-14     	; 0x365c <Tone_Menu_Buttons+0x74>
    366a:	be cf       	rjmp	.-132    	; 0x35e8 <Tone_Menu_Buttons>
			_delay_ms(1000);
			
			
		}
		else if (~PIND & (1<<PIND6)){
    366c:	4e 99       	sbic	0x09, 6	; 9
    366e:	bc cf       	rjmp	.-136    	; 0x35e8 <Tone_Menu_Buttons>
			
			Tone_Menu++;
    3670:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Tone_Menu>
    3674:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <Tone_Menu+0x1>
    3678:	01 96       	adiw	r24, 0x01	; 1
    367a:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <Tone_Menu+0x1>
    367e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Tone_Menu>
			update_Tone_Menu();
    3682:	0e 94 39 0a 	call	0x1472	; 0x1472 <update_Tone_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3686:	80 e1       	ldi	r24, 0x10	; 16
    3688:	97 e2       	ldi	r25, 0x27	; 39
    368a:	05 c0       	rjmp	.+10     	; 0x3696 <Tone_Menu_Buttons+0xae>
    368c:	e0 e9       	ldi	r30, 0x90	; 144
    368e:	f1 e0       	ldi	r31, 0x01	; 1
    3690:	31 97       	sbiw	r30, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <Tone_Menu_Buttons+0xa8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3694:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	c9 f7       	brne	.-14     	; 0x368c <Tone_Menu_Buttons+0xa4>
    369a:	a6 cf       	rjmp	.-180    	; 0x35e8 <Tone_Menu_Buttons>

0000369c <Clock_Menu_Buttons>:
void Clock_Menu_Buttons()   //Navigating through Clock Menu
{
	
	while(1)
	{
		DDRD=0x0f;
    369c:	8f e0       	ldi	r24, 0x0F	; 15
    369e:	8a b9       	out	0x0a, r24	; 10
		PORTD&=0xfe;
    36a0:	8b b1       	in	r24, 0x0b	; 11
    36a2:	8e 7f       	andi	r24, 0xFE	; 254
    36a4:	8b b9       	out	0x0b, r24	; 11
		
		if (~PINC & (1<<PINC0)){
    36a6:	30 9b       	sbis	0x06, 0	; 6
    36a8:	07 c0       	rjmp	.+14     	; 0x36b8 <Clock_Menu_Buttons+0x1c>
    36aa:	0f c0       	rjmp	.+30     	; 0x36ca <Clock_Menu_Buttons+0x2e>
    36ac:	e0 e9       	ldi	r30, 0x90	; 144
    36ae:	f1 e0       	ldi	r31, 0x01	; 1
    36b0:	31 97       	sbiw	r30, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <Clock_Menu_Buttons+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	02 c0       	rjmp	.+4      	; 0x36bc <Clock_Menu_Buttons+0x20>
    36b8:	80 e1       	ldi	r24, 0x10	; 16
    36ba:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36bc:	00 97       	sbiw	r24, 0x00	; 0
    36be:	b1 f7       	brne	.-20     	; 0x36ac <Clock_Menu_Buttons+0x10>
		   _delay_ms(1000);
		   LCD_Clear();
    36c0:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
		   execute_clockAction();
    36c4:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <execute_clockAction>
    36c8:	e9 cf       	rjmp	.-46     	; 0x369c <Clock_Menu_Buttons>
		}
		else if (~PINC & (1<<PINC1)){
    36ca:	31 99       	sbic	0x06, 1	; 6
    36cc:	0d c0       	rjmp	.+26     	; 0x36e8 <Clock_Menu_Buttons+0x4c>
			updateMenu();
    36ce:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36d2:	80 e1       	ldi	r24, 0x10	; 16
    36d4:	97 e2       	ldi	r25, 0x27	; 39
    36d6:	05 c0       	rjmp	.+10     	; 0x36e2 <Clock_Menu_Buttons+0x46>
    36d8:	e0 e9       	ldi	r30, 0x90	; 144
    36da:	f1 e0       	ldi	r31, 0x01	; 1
    36dc:	31 97       	sbiw	r30, 0x01	; 1
    36de:	f1 f7       	brne	.-4      	; 0x36dc <Clock_Menu_Buttons+0x40>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e2:	00 97       	sbiw	r24, 0x00	; 0
    36e4:	c9 f7       	brne	.-14     	; 0x36d8 <Clock_Menu_Buttons+0x3c>
    36e6:	08 95       	ret
			_delay_ms(1000);
			break;
		}
		else if (~PIND & (1<<PIND4)){
    36e8:	4c 99       	sbic	0x09, 4	; 9
    36ea:	16 c0       	rjmp	.+44     	; 0x3718 <Clock_Menu_Buttons+0x7c>
			
			Clock_Menu--;
    36ec:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Clock_Menu>
    36f0:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Clock_Menu+0x1>
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Clock_Menu+0x1>
    36fa:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Clock_Menu>
			update_Clock_Menu();
    36fe:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <update_Clock_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3702:	80 e1       	ldi	r24, 0x10	; 16
    3704:	97 e2       	ldi	r25, 0x27	; 39
    3706:	05 c0       	rjmp	.+10     	; 0x3712 <Clock_Menu_Buttons+0x76>
    3708:	e0 e9       	ldi	r30, 0x90	; 144
    370a:	f1 e0       	ldi	r31, 0x01	; 1
    370c:	31 97       	sbiw	r30, 0x01	; 1
    370e:	f1 f7       	brne	.-4      	; 0x370c <Clock_Menu_Buttons+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3710:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	c9 f7       	brne	.-14     	; 0x3708 <Clock_Menu_Buttons+0x6c>
    3716:	c2 cf       	rjmp	.-124    	; 0x369c <Clock_Menu_Buttons>
			_delay_ms(1000);
			
			
		}
		else if (~PIND & (1<<PIND6)){
    3718:	4e 99       	sbic	0x09, 6	; 9
    371a:	c0 cf       	rjmp	.-128    	; 0x369c <Clock_Menu_Buttons>
			
			Clock_Menu++;
    371c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Clock_Menu>
    3720:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Clock_Menu+0x1>
    3724:	01 96       	adiw	r24, 0x01	; 1
    3726:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Clock_Menu+0x1>
    372a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Clock_Menu>
			update_Clock_Menu();
    372e:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <update_Clock_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3732:	80 e1       	ldi	r24, 0x10	; 16
    3734:	97 e2       	ldi	r25, 0x27	; 39
    3736:	05 c0       	rjmp	.+10     	; 0x3742 <Clock_Menu_Buttons+0xa6>
    3738:	e0 e9       	ldi	r30, 0x90	; 144
    373a:	f1 e0       	ldi	r31, 0x01	; 1
    373c:	31 97       	sbiw	r30, 0x01	; 1
    373e:	f1 f7       	brne	.-4      	; 0x373c <Clock_Menu_Buttons+0xa0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3740:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3742:	00 97       	sbiw	r24, 0x00	; 0
    3744:	c9 f7       	brne	.-14     	; 0x3738 <Clock_Menu_Buttons+0x9c>
    3746:	aa cf       	rjmp	.-172    	; 0x369c <Clock_Menu_Buttons>

00003748 <Set_Factory_Action1>:
		break;
	}
}


void Set_Factory_Action1(){ //reset the clock to the following settings and deletes all the alarms
    3748:	ef 92       	push	r14
    374a:	0f 93       	push	r16
	Setdate(00,01,01,00,00,00);
    374c:	e1 2c       	mov	r14, r1
    374e:	00 e0       	ldi	r16, 0x00	; 0
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	41 e0       	ldi	r20, 0x01	; 1
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	80 e0       	ldi	r24, 0x00	; 0
    3758:	0e 94 cd 14 	call	0x299a	; 0x299a <Setdate>
	Alarm[0][0]=00;
    375c:	e6 e2       	ldi	r30, 0x26	; 38
    375e:	f1 e0       	ldi	r31, 0x01	; 1
    3760:	11 82       	std	Z+1, r1	; 0x01
    3762:	10 82       	st	Z, r1
	Alarm[0][1]=00;
    3764:	13 82       	std	Z+3, r1	; 0x03
    3766:	12 82       	std	Z+2, r1	; 0x02
	Alarm_status[0]=false;
    3768:	a1 e2       	ldi	r26, 0x21	; 33
    376a:	b1 e0       	ldi	r27, 0x01	; 1
    376c:	1c 92       	st	X, r1
	Alarm[1][0]=00;
    376e:	15 82       	std	Z+5, r1	; 0x05
    3770:	14 82       	std	Z+4, r1	; 0x04
	Alarm[1][1]=00;
    3772:	17 82       	std	Z+7, r1	; 0x07
    3774:	16 82       	std	Z+6, r1	; 0x06
	Alarm_status[1]=false;
    3776:	11 96       	adiw	r26, 0x01	; 1
    3778:	1c 92       	st	X, r1
    377a:	11 97       	sbiw	r26, 0x01	; 1
	Alarm[2][0]=00;
    377c:	11 86       	std	Z+9, r1	; 0x09
    377e:	10 86       	std	Z+8, r1	; 0x08
	Alarm[2][1]=00;
    3780:	13 86       	std	Z+11, r1	; 0x0b
    3782:	12 86       	std	Z+10, r1	; 0x0a
	Alarm_status[2]=false;
    3784:	12 96       	adiw	r26, 0x02	; 2
    3786:	1c 92       	st	X, r1
    3788:	12 97       	sbiw	r26, 0x02	; 2
	Alarm[3][0]=00;
    378a:	15 86       	std	Z+13, r1	; 0x0d
    378c:	14 86       	std	Z+12, r1	; 0x0c
	Alarm[3][1]=00;
    378e:	17 86       	std	Z+15, r1	; 0x0f
    3790:	16 86       	std	Z+14, r1	; 0x0e
	Alarm_status[3]=false;
    3792:	13 96       	adiw	r26, 0x03	; 3
    3794:	1c 92       	st	X, r1
    3796:	13 97       	sbiw	r26, 0x03	; 3
	Alarm[4][0]=00;
    3798:	11 8a       	std	Z+17, r1	; 0x11
    379a:	10 8a       	std	Z+16, r1	; 0x10
	Alarm[4][1]=00;
    379c:	13 8a       	std	Z+19, r1	; 0x13
    379e:	12 8a       	std	Z+18, r1	; 0x12
	Alarm_status[4]=false;
    37a0:	14 96       	adiw	r26, 0x04	; 4
    37a2:	1c 92       	st	X, r1
	LCD_Clear();
    37a4:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_String("RESET COMPLETE");
    37a8:	83 e3       	ldi	r24, 0x33	; 51
    37aa:	96 e0       	ldi	r25, 0x06	; 6
    37ac:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37b0:	80 e1       	ldi	r24, 0x10	; 16
    37b2:	97 e2       	ldi	r25, 0x27	; 39
    37b4:	05 c0       	rjmp	.+10     	; 0x37c0 <Set_Factory_Action1+0x78>
    37b6:	e0 e9       	ldi	r30, 0x90	; 144
    37b8:	f1 e0       	ldi	r31, 0x01	; 1
    37ba:	31 97       	sbiw	r30, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <Set_Factory_Action1+0x72>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c0:	00 97       	sbiw	r24, 0x00	; 0
    37c2:	c9 f7       	brne	.-14     	; 0x37b6 <Set_Factory_Action1+0x6e>
	_delay_ms(1000);
	LCD_Clear();
    37c4:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_String("EXIT THE MENU");
    37c8:	82 e4       	ldi	r24, 0x42	; 66
    37ca:	96 e0       	ldi	r25, 0x06	; 6
    37cc:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37d0:	80 e1       	ldi	r24, 0x10	; 16
    37d2:	97 e2       	ldi	r25, 0x27	; 39
    37d4:	05 c0       	rjmp	.+10     	; 0x37e0 <Set_Factory_Action1+0x98>
    37d6:	e0 e9       	ldi	r30, 0x90	; 144
    37d8:	f1 e0       	ldi	r31, 0x01	; 1
    37da:	31 97       	sbiw	r30, 0x01	; 1
    37dc:	f1 f7       	brne	.-4      	; 0x37da <Set_Factory_Action1+0x92>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	c9 f7       	brne	.-14     	; 0x37d6 <Set_Factory_Action1+0x8e>
	_delay_ms(1000);
	updateMenu();
    37e4:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37e8:	80 e1       	ldi	r24, 0x10	; 16
    37ea:	97 e2       	ldi	r25, 0x27	; 39
    37ec:	05 c0       	rjmp	.+10     	; 0x37f8 <Set_Factory_Action1+0xb0>
    37ee:	e0 e9       	ldi	r30, 0x90	; 144
    37f0:	f1 e0       	ldi	r31, 0x01	; 1
    37f2:	31 97       	sbiw	r30, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <Set_Factory_Action1+0xaa>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	c9 f7       	brne	.-14     	; 0x37ee <Set_Factory_Action1+0xa6>
	_delay_ms(1000);	
}
    37fc:	0f 91       	pop	r16
    37fe:	ef 90       	pop	r14
    3800:	08 95       	ret

00003802 <Set_Factory_Action2>:


void Set_Factory_Action2(){
	updateMenu();
    3802:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3806:	80 e1       	ldi	r24, 0x10	; 16
    3808:	97 e2       	ldi	r25, 0x27	; 39
    380a:	05 c0       	rjmp	.+10     	; 0x3816 <Set_Factory_Action2+0x14>
    380c:	e0 e9       	ldi	r30, 0x90	; 144
    380e:	f1 e0       	ldi	r31, 0x01	; 1
    3810:	31 97       	sbiw	r30, 0x01	; 1
    3812:	f1 f7       	brne	.-4      	; 0x3810 <Set_Factory_Action2+0xe>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3814:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	c9 f7       	brne	.-14     	; 0x380c <Set_Factory_Action2+0xa>
	_delay_ms(1000);
}
    381a:	08 95       	ret

0000381c <execute_factory_action>:
}


int execute_factory_action(){
	
	switch (Factory_Menu) {
    381c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Factory_Menu>
    3820:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Factory_Menu+0x1>
    3824:	81 30       	cpi	r24, 0x01	; 1
    3826:	91 05       	cpc	r25, r1
    3828:	19 f0       	breq	.+6      	; 0x3830 <execute_factory_action+0x14>
    382a:	02 97       	sbiw	r24, 0x02	; 2
    382c:	31 f0       	breq	.+12     	; 0x383a <execute_factory_action+0x1e>
    382e:	07 c0       	rjmp	.+14     	; 0x383e <execute_factory_action+0x22>
		case 1:
		Set_Factory_Action1();
    3830:	0e 94 a4 1b 	call	0x3748	; 0x3748 <Set_Factory_Action1>
		return 1;
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	08 95       	ret
		break;
		case 2:
		Set_Factory_Action2();
    383a:	0e 94 01 1c 	call	0x3802	; 0x3802 <Set_Factory_Action2>
		break;
	}
}
    383e:	08 95       	ret

00003840 <Factory_Menu_Buttons>:
int Factory_Menu_Buttons()   // Navigaring Between yes and no of are u sure question
{
	
	while(1)
	{
		DDRD=0x0f;
    3840:	8f e0       	ldi	r24, 0x0F	; 15
    3842:	8a b9       	out	0x0a, r24	; 10
		PORTD&=0xfe;
    3844:	8b b1       	in	r24, 0x0b	; 11
    3846:	8e 7f       	andi	r24, 0xFE	; 254
    3848:	8b b9       	out	0x0b, r24	; 11
		
		if (~PINC & (1<<PINC0)){
    384a:	30 99       	sbic	0x06, 0	; 6
    384c:	10 c0       	rjmp	.+32     	; 0x386e <Factory_Menu_Buttons+0x2e>
    384e:	06 c0       	rjmp	.+12     	; 0x385c <Factory_Menu_Buttons+0x1c>
    3850:	e0 e9       	ldi	r30, 0x90	; 144
    3852:	f1 e0       	ldi	r31, 0x01	; 1
    3854:	31 97       	sbiw	r30, 0x01	; 1
    3856:	f1 f7       	brne	.-4      	; 0x3854 <Factory_Menu_Buttons+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	02 c0       	rjmp	.+4      	; 0x3860 <Factory_Menu_Buttons+0x20>
    385c:	80 e1       	ldi	r24, 0x10	; 16
    385e:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	b1 f7       	brne	.-20     	; 0x3850 <Factory_Menu_Buttons+0x10>
			_delay_ms(1000);
			LCD_Clear();
    3864:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
			execute_factory_action();
    3868:	0e 94 0e 1c 	call	0x381c	; 0x381c <execute_factory_action>
			break;
    386c:	08 95       	ret
		}
		else if (~PINC & (1<<PINC1)){
    386e:	31 99       	sbic	0x06, 1	; 6
    3870:	0d c0       	rjmp	.+26     	; 0x388c <Factory_Menu_Buttons+0x4c>
			updateMenu();
    3872:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3876:	80 e1       	ldi	r24, 0x10	; 16
    3878:	97 e2       	ldi	r25, 0x27	; 39
    387a:	05 c0       	rjmp	.+10     	; 0x3886 <Factory_Menu_Buttons+0x46>
    387c:	e0 e9       	ldi	r30, 0x90	; 144
    387e:	f1 e0       	ldi	r31, 0x01	; 1
    3880:	31 97       	sbiw	r30, 0x01	; 1
    3882:	f1 f7       	brne	.-4      	; 0x3880 <Factory_Menu_Buttons+0x40>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3884:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	c9 f7       	brne	.-14     	; 0x387c <Factory_Menu_Buttons+0x3c>
    388a:	08 95       	ret
			_delay_ms(1000);
			break;
		}
		else if (~PIND & (1<<PIND4)){
    388c:	4c 99       	sbic	0x09, 4	; 9
    388e:	16 c0       	rjmp	.+44     	; 0x38bc <Factory_Menu_Buttons+0x7c>
			
			Factory_Menu--;
    3890:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Factory_Menu>
    3894:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Factory_Menu+0x1>
    3898:	01 97       	sbiw	r24, 0x01	; 1
    389a:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <Factory_Menu+0x1>
    389e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Factory_Menu>
			update_Factory_Menu();
    38a2:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <update_Factory_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a6:	80 e1       	ldi	r24, 0x10	; 16
    38a8:	97 e2       	ldi	r25, 0x27	; 39
    38aa:	05 c0       	rjmp	.+10     	; 0x38b6 <Factory_Menu_Buttons+0x76>
    38ac:	e0 e9       	ldi	r30, 0x90	; 144
    38ae:	f1 e0       	ldi	r31, 0x01	; 1
    38b0:	31 97       	sbiw	r30, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <Factory_Menu_Buttons+0x70>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	00 97       	sbiw	r24, 0x00	; 0
    38b8:	c9 f7       	brne	.-14     	; 0x38ac <Factory_Menu_Buttons+0x6c>
    38ba:	c2 cf       	rjmp	.-124    	; 0x3840 <Factory_Menu_Buttons>
			_delay_ms(1000);
			
			
		}
		else if (~PIND & (1<<PIND6)){
    38bc:	4e 99       	sbic	0x09, 6	; 9
    38be:	c0 cf       	rjmp	.-128    	; 0x3840 <Factory_Menu_Buttons>
			
			Factory_Menu++;
    38c0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Factory_Menu>
    38c4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Factory_Menu+0x1>
    38c8:	01 96       	adiw	r24, 0x01	; 1
    38ca:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <Factory_Menu+0x1>
    38ce:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Factory_Menu>
			update_Factory_Menu();
    38d2:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <update_Factory_Menu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d6:	80 e1       	ldi	r24, 0x10	; 16
    38d8:	97 e2       	ldi	r25, 0x27	; 39
    38da:	05 c0       	rjmp	.+10     	; 0x38e6 <Factory_Menu_Buttons+0xa6>
    38dc:	e0 e9       	ldi	r30, 0x90	; 144
    38de:	f1 e0       	ldi	r31, 0x01	; 1
    38e0:	31 97       	sbiw	r30, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <Factory_Menu_Buttons+0xa0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e6:	00 97       	sbiw	r24, 0x00	; 0
    38e8:	c9 f7       	brne	.-14     	; 0x38dc <Factory_Menu_Buttons+0x9c>
    38ea:	aa cf       	rjmp	.-172    	; 0x3840 <Factory_Menu_Buttons>

000038ec <Action1>:
		break;
	}
}

void Action1(){
	Clock_Menu = 1;
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Clock_Menu+0x1>
    38f4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Clock_Menu>
	update_Clock_Menu();
    38f8:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <update_Clock_Menu>
	Clock_Menu_Buttons();
    38fc:	0e 94 4e 1b 	call	0x369c	; 0x369c <Clock_Menu_Buttons>
    3900:	08 95       	ret

00003902 <Action2>:
	
	
}

void Action2(){
	Alarm_Menu = 1;
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <Alarm_Menu+0x1>
    390a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <Alarm_Menu>
	update_Alarm_Menu();
    390e:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <update_Alarm_Menu>
	Alarm_Menu_Buttons();
    3912:	0e 94 33 1a 	call	0x3466	; 0x3466 <Alarm_Menu_Buttons>
    3916:	08 95       	ret

00003918 <Action3>:
	
}

void Action3(){
	Status_Menu = 1;
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	90 e0       	ldi	r25, 0x00	; 0
    391c:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <Status_Menu+0x1>
    3920:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Status_Menu>
	update_Status_Menu();
    3924:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <update_Status_Menu>
	Status_Menu_Buttons();
    3928:	0e 94 89 1a 	call	0x3512	; 0x3512 <Status_Menu_Buttons>
    392c:	08 95       	ret

0000392e <Action4>:
}

void Action4(){
	Tone_Menu = 1;
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <Tone_Menu+0x1>
    3936:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Tone_Menu>
	update_Tone_Menu();
    393a:	0e 94 39 0a 	call	0x1472	; 0x1472 <update_Tone_Menu>
	Tone_Menu_Buttons();
    393e:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <Tone_Menu_Buttons>
    3942:	08 95       	ret

00003944 <Action5>:
}

void Action5(){
	Factory_Menu = 1;
    3944:	81 e0       	ldi	r24, 0x01	; 1
    3946:	90 e0       	ldi	r25, 0x00	; 0
    3948:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <Factory_Menu+0x1>
    394c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Factory_Menu>
	update_Factory_Menu();
    3950:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <update_Factory_Menu>
	Factory_Menu_Buttons();
    3954:	0e 94 20 1c 	call	0x3840	; 0x3840 <Factory_Menu_Buttons>
    3958:	08 95       	ret

0000395a <Action6>:
}

void Action6(){                        //About US monologue
	LCD_Clear();
    395a:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_String("PROJECT LOCUS");
    395e:	80 e5       	ldi	r24, 0x50	; 80
    3960:	96 e0       	ldi	r25, 0x06	; 6
    3962:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	LCD_Command(0xC0);
    3966:	80 ec       	ldi	r24, 0xC0	; 192
    3968:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_String("Ver 1.0.0");
    396c:	8e e5       	ldi	r24, 0x5E	; 94
    396e:	96 e0       	ldi	r25, 0x06	; 6
    3970:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3974:	80 e2       	ldi	r24, 0x20	; 32
    3976:	9e e4       	ldi	r25, 0x4E	; 78
    3978:	05 c0       	rjmp	.+10     	; 0x3984 <Action6+0x2a>
    397a:	e0 e9       	ldi	r30, 0x90	; 144
    397c:	f1 e0       	ldi	r31, 0x01	; 1
    397e:	31 97       	sbiw	r30, 0x01	; 1
    3980:	f1 f7       	brne	.-4      	; 0x397e <Action6+0x24>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3982:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	c9 f7       	brne	.-14     	; 0x397a <Action6+0x20>
	_delay_ms(2000);
	LCD_Clear();
    3988:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_String("PROJECT BY:");
    398c:	88 e6       	ldi	r24, 0x68	; 104
    398e:	96 e0       	ldi	r25, 0x06	; 6
    3990:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	LCD_Command(0xC0);
    3994:	80 ec       	ldi	r24, 0xC0	; 192
    3996:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_String("SYAMAL");
    399a:	84 e7       	ldi	r24, 0x74	; 116
    399c:	96 e0       	ldi	r25, 0x06	; 6
    399e:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a2:	80 e2       	ldi	r24, 0x20	; 32
    39a4:	9e e4       	ldi	r25, 0x4E	; 78
    39a6:	05 c0       	rjmp	.+10     	; 0x39b2 <Action6+0x58>
    39a8:	e0 e9       	ldi	r30, 0x90	; 144
    39aa:	f1 e0       	ldi	r31, 0x01	; 1
    39ac:	31 97       	sbiw	r30, 0x01	; 1
    39ae:	f1 f7       	brne	.-4      	; 0x39ac <Action6+0x52>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b2:	00 97       	sbiw	r24, 0x00	; 0
    39b4:	c9 f7       	brne	.-14     	; 0x39a8 <Action6+0x4e>
	_delay_ms(2000);;
	LCD_Command(0xC0);
    39b6:	80 ec       	ldi	r24, 0xC0	; 192
    39b8:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_String("AAKKASH");
    39bc:	8b e7       	ldi	r24, 0x7B	; 123
    39be:	96 e0       	ldi	r25, 0x06	; 6
    39c0:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39c4:	80 e2       	ldi	r24, 0x20	; 32
    39c6:	9e e4       	ldi	r25, 0x4E	; 78
    39c8:	05 c0       	rjmp	.+10     	; 0x39d4 <Action6+0x7a>
    39ca:	e0 e9       	ldi	r30, 0x90	; 144
    39cc:	f1 e0       	ldi	r31, 0x01	; 1
    39ce:	31 97       	sbiw	r30, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <Action6+0x74>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d4:	00 97       	sbiw	r24, 0x00	; 0
    39d6:	c9 f7       	brne	.-14     	; 0x39ca <Action6+0x70>
	_delay_ms(2000);
	LCD_Command(0xC0);
    39d8:	80 ec       	ldi	r24, 0xC0	; 192
    39da:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_String("CHALINDU");
    39de:	83 e8       	ldi	r24, 0x83	; 131
    39e0:	96 e0       	ldi	r25, 0x06	; 6
    39e2:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e6:	80 e2       	ldi	r24, 0x20	; 32
    39e8:	9e e4       	ldi	r25, 0x4E	; 78
    39ea:	05 c0       	rjmp	.+10     	; 0x39f6 <Action6+0x9c>
    39ec:	e0 e9       	ldi	r30, 0x90	; 144
    39ee:	f1 e0       	ldi	r31, 0x01	; 1
    39f0:	31 97       	sbiw	r30, 0x01	; 1
    39f2:	f1 f7       	brne	.-4      	; 0x39f0 <Action6+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	c9 f7       	brne	.-14     	; 0x39ec <Action6+0x92>
	_delay_ms(2000);
	LCD_Command(0xC0);
    39fa:	80 ec       	ldi	r24, 0xC0	; 192
    39fc:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_String("AKILA     ");
    3a00:	8c e8       	ldi	r24, 0x8C	; 140
    3a02:	96 e0       	ldi	r25, 0x06	; 6
    3a04:	0e 94 00 0a 	call	0x1400	; 0x1400 <LCD_String>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a08:	80 e2       	ldi	r24, 0x20	; 32
    3a0a:	9e e4       	ldi	r25, 0x4E	; 78
    3a0c:	05 c0       	rjmp	.+10     	; 0x3a18 <Action6+0xbe>
    3a0e:	e0 e9       	ldi	r30, 0x90	; 144
    3a10:	f1 e0       	ldi	r31, 0x01	; 1
    3a12:	31 97       	sbiw	r30, 0x01	; 1
    3a14:	f1 f7       	brne	.-4      	; 0x3a12 <Action6+0xb8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a16:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a18:	00 97       	sbiw	r24, 0x00	; 0
    3a1a:	c9 f7       	brne	.-14     	; 0x3a0e <Action6+0xb4>
	_delay_ms(2000);
	LCD_Clear();
    3a1c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_String_xy(0,4,"THANK");
    3a20:	47 e9       	ldi	r20, 0x97	; 151
    3a22:	56 e0       	ldi	r21, 0x06	; 6
    3a24:	64 e0       	ldi	r22, 0x04	; 4
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
	LCD_Command(0xC0);
    3a2c:	80 ec       	ldi	r24, 0xC0	; 192
    3a2e:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_String_xy(1,5,"YOU:)");
    3a32:	4d e9       	ldi	r20, 0x9D	; 157
    3a34:	56 e0       	ldi	r21, 0x06	; 6
    3a36:	65 e0       	ldi	r22, 0x05	; 5
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3e:	80 e3       	ldi	r24, 0x30	; 48
    3a40:	95 e7       	ldi	r25, 0x75	; 117
    3a42:	05 c0       	rjmp	.+10     	; 0x3a4e <Action6+0xf4>
    3a44:	e0 e9       	ldi	r30, 0x90	; 144
    3a46:	f1 e0       	ldi	r31, 0x01	; 1
    3a48:	31 97       	sbiw	r30, 0x01	; 1
    3a4a:	f1 f7       	brne	.-4      	; 0x3a48 <Action6+0xee>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	c9 f7       	brne	.-14     	; 0x3a44 <Action6+0xea>
	_delay_ms(3000);
	updateMenu();
    3a52:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
    3a56:	08 95       	ret

00003a58 <executeAction>:
}

void executeAction()
{			
	switch (Menu) {
    3a58:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Menu>
    3a5c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Menu+0x1>
    3a60:	83 30       	cpi	r24, 0x03	; 3
    3a62:	91 05       	cpc	r25, r1
    3a64:	a1 f0       	breq	.+40     	; 0x3a8e <executeAction+0x36>
    3a66:	34 f4       	brge	.+12     	; 0x3a74 <executeAction+0x1c>
    3a68:	81 30       	cpi	r24, 0x01	; 1
    3a6a:	91 05       	cpc	r25, r1
    3a6c:	51 f0       	breq	.+20     	; 0x3a82 <executeAction+0x2a>
    3a6e:	02 97       	sbiw	r24, 0x02	; 2
    3a70:	59 f0       	breq	.+22     	; 0x3a88 <executeAction+0x30>
    3a72:	08 95       	ret
    3a74:	85 30       	cpi	r24, 0x05	; 5
    3a76:	91 05       	cpc	r25, r1
    3a78:	81 f0       	breq	.+32     	; 0x3a9a <executeAction+0x42>
    3a7a:	64 f0       	brlt	.+24     	; 0x3a94 <executeAction+0x3c>
    3a7c:	06 97       	sbiw	r24, 0x06	; 6
    3a7e:	81 f0       	breq	.+32     	; 0x3aa0 <executeAction+0x48>
    3a80:	08 95       	ret
		case 1:
		Action1();
    3a82:	0e 94 76 1c 	call	0x38ec	; 0x38ec <Action1>
		break;
    3a86:	08 95       	ret
		case 2:
		Action2();
    3a88:	0e 94 81 1c 	call	0x3902	; 0x3902 <Action2>
		break;
    3a8c:	08 95       	ret
		case 3:
		Action3();
    3a8e:	0e 94 8c 1c 	call	0x3918	; 0x3918 <Action3>
		break;
    3a92:	08 95       	ret
		case 4:
		Action4();
    3a94:	0e 94 97 1c 	call	0x392e	; 0x392e <Action4>
		break;
    3a98:	08 95       	ret
		case 5:
		Action5();
    3a9a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <Action5>
		break;
    3a9e:	08 95       	ret
		case 6:
		Action6();
    3aa0:	0e 94 ad 1c 	call	0x395a	; 0x395a <Action6>
    3aa4:	08 95       	ret

00003aa6 <Main_Menu_Buttons>:
{
	
	
	while(1)
	{
		DDRD=0x0f;
    3aa6:	8f e0       	ldi	r24, 0x0F	; 15
    3aa8:	8a b9       	out	0x0a, r24	; 10
		PORTD&=0b01111110;
    3aaa:	8b b1       	in	r24, 0x0b	; 11
    3aac:	8e 77       	andi	r24, 0x7E	; 126
    3aae:	8b b9       	out	0x0b, r24	; 11
		
		if (~PINC & (1<<PINC0))
    3ab0:	30 9b       	sbis	0x06, 0	; 6
    3ab2:	07 c0       	rjmp	.+14     	; 0x3ac2 <Main_Menu_Buttons+0x1c>
    3ab4:	0d c0       	rjmp	.+26     	; 0x3ad0 <Main_Menu_Buttons+0x2a>
    3ab6:	e0 e9       	ldi	r30, 0x90	; 144
    3ab8:	f1 e0       	ldi	r31, 0x01	; 1
    3aba:	31 97       	sbiw	r30, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <Main_Menu_Buttons+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	02 c0       	rjmp	.+4      	; 0x3ac6 <Main_Menu_Buttons+0x20>
    3ac2:	80 e1       	ldi	r24, 0x10	; 16
    3ac4:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac6:	00 97       	sbiw	r24, 0x00	; 0
    3ac8:	b1 f7       	brne	.-20     	; 0x3ab6 <Main_Menu_Buttons+0x10>
       {
		   _delay_ms(1000);
            executeAction();
    3aca:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <executeAction>
    3ace:	eb cf       	rjmp	.-42     	; 0x3aa6 <Main_Menu_Buttons>
			

		} 
            
	    else if (~PINC & (1<<PINC1)){
    3ad0:	31 99       	sbic	0x06, 1	; 6
    3ad2:	0a c0       	rjmp	.+20     	; 0x3ae8 <Main_Menu_Buttons+0x42>
			
			menu_can_access=true;
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <menu_can_access>
			LCD_Clear();
    3ada:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
			DDRD=0xf0;
    3ade:	80 ef       	ldi	r24, 0xF0	; 240
    3ae0:	8a b9       	out	0x0a, r24	; 10
			PORTD=0b01111111;
    3ae2:	8f e7       	ldi	r24, 0x7F	; 127
    3ae4:	8b b9       	out	0x0b, r24	; 11
			
			
		}
	
	}
 }
    3ae6:	08 95       	ret
			DDRD=0xf0;
			PORTD=0b01111111;
			break;
			
		}
		else if (~PIND & (1<<PIND4)){
    3ae8:	4c 99       	sbic	0x09, 4	; 9
    3aea:	16 c0       	rjmp	.+44     	; 0x3b18 <Main_Menu_Buttons+0x72>
			
			Menu--;
    3aec:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Menu>
    3af0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Menu+0x1>
    3af4:	01 97       	sbiw	r24, 0x01	; 1
    3af6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Menu+0x1>
    3afa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Menu>
			updateMenu();
    3afe:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b02:	80 e1       	ldi	r24, 0x10	; 16
    3b04:	97 e2       	ldi	r25, 0x27	; 39
    3b06:	05 c0       	rjmp	.+10     	; 0x3b12 <Main_Menu_Buttons+0x6c>
    3b08:	e0 e9       	ldi	r30, 0x90	; 144
    3b0a:	f1 e0       	ldi	r31, 0x01	; 1
    3b0c:	31 97       	sbiw	r30, 0x01	; 1
    3b0e:	f1 f7       	brne	.-4      	; 0x3b0c <Main_Menu_Buttons+0x66>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b10:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b12:	00 97       	sbiw	r24, 0x00	; 0
    3b14:	c9 f7       	brne	.-14     	; 0x3b08 <Main_Menu_Buttons+0x62>
    3b16:	c7 cf       	rjmp	.-114    	; 0x3aa6 <Main_Menu_Buttons>
			_delay_ms(1000);
			
			
		}
		else if (~PIND & (1<<PIND6)){
    3b18:	4e 99       	sbic	0x09, 6	; 9
    3b1a:	c5 cf       	rjmp	.-118    	; 0x3aa6 <Main_Menu_Buttons>
			
			Menu++;
    3b1c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Menu>
    3b20:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Menu+0x1>
    3b24:	01 96       	adiw	r24, 0x01	; 1
    3b26:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Menu+0x1>
    3b2a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Menu>
			updateMenu();
    3b2e:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b32:	80 e1       	ldi	r24, 0x10	; 16
    3b34:	97 e2       	ldi	r25, 0x27	; 39
    3b36:	05 c0       	rjmp	.+10     	; 0x3b42 <Main_Menu_Buttons+0x9c>
    3b38:	e0 e9       	ldi	r30, 0x90	; 144
    3b3a:	f1 e0       	ldi	r31, 0x01	; 1
    3b3c:	31 97       	sbiw	r30, 0x01	; 1
    3b3e:	f1 f7       	brne	.-4      	; 0x3b3c <Main_Menu_Buttons+0x96>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b42:	00 97       	sbiw	r24, 0x00	; 0
    3b44:	c9 f7       	brne	.-14     	; 0x3b38 <Main_Menu_Buttons+0x92>
    3b46:	af cf       	rjmp	.-162    	; 0x3aa6 <Main_Menu_Buttons>

00003b48 <tone>:
#define SPEAKER_PORT PORTD
#define SPEAKER_DDR DDRD


void tone(int SPEAKER_PIN, float frequency, float duration)
{
    3b48:	3f 92       	push	r3
    3b4a:	4f 92       	push	r4
    3b4c:	5f 92       	push	r5
    3b4e:	6f 92       	push	r6
    3b50:	7f 92       	push	r7
    3b52:	8f 92       	push	r8
    3b54:	9f 92       	push	r9
    3b56:	af 92       	push	r10
    3b58:	bf 92       	push	r11
    3b5a:	cf 92       	push	r12
    3b5c:	df 92       	push	r13
    3b5e:	ef 92       	push	r14
    3b60:	ff 92       	push	r15
    3b62:	0f 93       	push	r16
    3b64:	1f 93       	push	r17
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	00 d0       	rcall	.+0      	; 0x3b6c <tone+0x24>
    3b6c:	00 d0       	rcall	.+0      	; 0x3b6e <tone+0x26>
    3b6e:	00 d0       	rcall	.+0      	; 0x3b70 <tone+0x28>
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	38 2e       	mov	r3, r24
    3b76:	48 01       	movw	r8, r16
    3b78:	59 01       	movw	r10, r18
	long int i,samples;
	float period;
	float half_period;
	
	period = (1/frequency)*1000;
    3b7a:	9a 01       	movw	r18, r20
    3b7c:	ab 01       	movw	r20, r22
    3b7e:	60 e0       	ldi	r22, 0x00	; 0
    3b80:	70 e0       	ldi	r23, 0x00	; 0
    3b82:	80 e8       	ldi	r24, 0x80	; 128
    3b84:	9f e3       	ldi	r25, 0x3F	; 63
    3b86:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__divsf3>
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	4a e7       	ldi	r20, 0x7A	; 122
    3b90:	54 e4       	ldi	r21, 0x44	; 68
    3b92:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3b96:	6b 01       	movw	r12, r22
    3b98:	7c 01       	movw	r14, r24
	samples = duration/period;
    3b9a:	9b 01       	movw	r18, r22
    3b9c:	ac 01       	movw	r20, r24
    3b9e:	c5 01       	movw	r24, r10
    3ba0:	b4 01       	movw	r22, r8
    3ba2:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__divsf3>
    3ba6:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixsfsi>
    3baa:	2b 01       	movw	r4, r22
    3bac:	3c 01       	movw	r6, r24
	half_period = period/2;
    3bae:	20 e0       	ldi	r18, 0x00	; 0
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	40 e0       	ldi	r20, 0x00	; 0
    3bb4:	5f e3       	ldi	r21, 0x3F	; 63
    3bb6:	c7 01       	movw	r24, r14
    3bb8:	b6 01       	movw	r22, r12
    3bba:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3bbe:	69 83       	std	Y+1, r22	; 0x01
    3bc0:	7a 83       	std	Y+2, r23	; 0x02
    3bc2:	8b 83       	std	Y+3, r24	; 0x03
    3bc4:	9c 83       	std	Y+4, r25	; 0x04
	
	
	//half_period= (int)half_period;
	for(i=0;i<samples;i++)
    3bc6:	81 2c       	mov	r8, r1
    3bc8:	91 2c       	mov	r9, r1
    3bca:	54 01       	movw	r10, r8
    3bcc:	8b c0       	rjmp	.+278    	; 0x3ce4 <tone+0x19c>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3bce:	20 e0       	ldi	r18, 0x00	; 0
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	4a e7       	ldi	r20, 0x7A	; 122
    3bd4:	55 e4       	ldi	r21, 0x45	; 69
    3bd6:	69 81       	ldd	r22, Y+1	; 0x01
    3bd8:	7a 81       	ldd	r23, Y+2	; 0x02
    3bda:	8b 81       	ldd	r24, Y+3	; 0x03
    3bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bde:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3be2:	6b 01       	movw	r12, r22
    3be4:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e8       	ldi	r20, 0x80	; 128
    3bec:	5f e3       	ldi	r21, 0x3F	; 63
    3bee:	0e 94 66 21 	call	0x42cc	; 0x42cc <__cmpsf2>
    3bf2:	88 23       	and	r24, r24
    3bf4:	34 f1       	brlt	.+76     	; 0x3c42 <tone+0xfa>
		__ticks = 1;
	else if (__tmp > 65535)
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	3f ef       	ldi	r19, 0xFF	; 255
    3bfa:	4f e7       	ldi	r20, 0x7F	; 127
    3bfc:	57 e4       	ldi	r21, 0x47	; 71
    3bfe:	c7 01       	movw	r24, r14
    3c00:	b6 01       	movw	r22, r12
    3c02:	0e 94 c5 22 	call	0x458a	; 0x458a <__gesf2>
    3c06:	18 16       	cp	r1, r24
    3c08:	bc f4       	brge	.+46     	; 0x3c38 <tone+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	30 e0       	ldi	r19, 0x00	; 0
    3c0e:	40 e2       	ldi	r20, 0x20	; 32
    3c10:	51 e4       	ldi	r21, 0x41	; 65
    3c12:	69 81       	ldd	r22, Y+1	; 0x01
    3c14:	7a 81       	ldd	r23, Y+2	; 0x02
    3c16:	8b 81       	ldd	r24, Y+3	; 0x03
    3c18:	9c 81       	ldd	r25, Y+4	; 0x04
    3c1a:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3c1e:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__fixunssfsi>
    3c22:	06 c0       	rjmp	.+12     	; 0x3c30 <tone+0xe8>
    3c24:	80 e9       	ldi	r24, 0x90	; 144
    3c26:	91 e0       	ldi	r25, 0x01	; 1
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <tone+0xe0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2c:	61 50       	subi	r22, 0x01	; 1
    3c2e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c30:	61 15       	cp	r22, r1
    3c32:	71 05       	cpc	r23, r1
    3c34:	b9 f7       	brne	.-18     	; 0x3c24 <tone+0xdc>
    3c36:	0a c0       	rjmp	.+20     	; 0x3c4c <tone+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c38:	c7 01       	movw	r24, r14
    3c3a:	b6 01       	movw	r22, r12
    3c3c:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__fixunssfsi>
    3c40:	02 c0       	rjmp	.+4      	; 0x3c46 <tone+0xfe>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    3c42:	61 e0       	ldi	r22, 0x01	; 1
    3c44:	70 e0       	ldi	r23, 0x00	; 0
    3c46:	cb 01       	movw	r24, r22
    3c48:	01 97       	sbiw	r24, 0x01	; 1
    3c4a:	f1 f7       	brne	.-4      	; 0x3c48 <tone+0x100>
	{
		_delay_ms(half_period);
		SPEAKER_PORT |= (1 << SPEAKER_PIN);
    3c4c:	8b b1       	in	r24, 0x0b	; 11
    3c4e:	21 e0       	ldi	r18, 0x01	; 1
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	03 2c       	mov	r0, r3
    3c54:	02 c0       	rjmp	.+4      	; 0x3c5a <tone+0x112>
    3c56:	22 0f       	add	r18, r18
    3c58:	33 1f       	adc	r19, r19
    3c5a:	0a 94       	dec	r0
    3c5c:	e2 f7       	brpl	.-8      	; 0x3c56 <tone+0x10e>
    3c5e:	3e 83       	std	Y+6, r19	; 0x06
    3c60:	2d 83       	std	Y+5, r18	; 0x05
    3c62:	82 2b       	or	r24, r18
    3c64:	8b b9       	out	0x0b, r24	; 11
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e8       	ldi	r20, 0x80	; 128
    3c6c:	5f e3       	ldi	r21, 0x3F	; 63
    3c6e:	c7 01       	movw	r24, r14
    3c70:	b6 01       	movw	r22, r12
    3c72:	0e 94 66 21 	call	0x42cc	; 0x42cc <__cmpsf2>
    3c76:	88 23       	and	r24, r24
    3c78:	34 f1       	brlt	.+76     	; 0x3cc6 <tone+0x17e>
		__ticks = 1;
	else if (__tmp > 65535)
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	3f ef       	ldi	r19, 0xFF	; 255
    3c7e:	4f e7       	ldi	r20, 0x7F	; 127
    3c80:	57 e4       	ldi	r21, 0x47	; 71
    3c82:	c7 01       	movw	r24, r14
    3c84:	b6 01       	movw	r22, r12
    3c86:	0e 94 c5 22 	call	0x458a	; 0x458a <__gesf2>
    3c8a:	18 16       	cp	r1, r24
    3c8c:	bc f4       	brge	.+46     	; 0x3cbc <tone+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c8e:	20 e0       	ldi	r18, 0x00	; 0
    3c90:	30 e0       	ldi	r19, 0x00	; 0
    3c92:	40 e2       	ldi	r20, 0x20	; 32
    3c94:	51 e4       	ldi	r21, 0x41	; 65
    3c96:	69 81       	ldd	r22, Y+1	; 0x01
    3c98:	7a 81       	ldd	r23, Y+2	; 0x02
    3c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9e:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3ca2:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__fixunssfsi>
    3ca6:	06 c0       	rjmp	.+12     	; 0x3cb4 <tone+0x16c>
    3ca8:	80 e9       	ldi	r24, 0x90	; 144
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	01 97       	sbiw	r24, 0x01	; 1
    3cae:	f1 f7       	brne	.-4      	; 0x3cac <tone+0x164>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb0:	61 50       	subi	r22, 0x01	; 1
    3cb2:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb4:	61 15       	cp	r22, r1
    3cb6:	71 05       	cpc	r23, r1
    3cb8:	b9 f7       	brne	.-18     	; 0x3ca8 <tone+0x160>
    3cba:	0a c0       	rjmp	.+20     	; 0x3cd0 <tone+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cbc:	c7 01       	movw	r24, r14
    3cbe:	b6 01       	movw	r22, r12
    3cc0:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__fixunssfsi>
    3cc4:	02 c0       	rjmp	.+4      	; 0x3cca <tone+0x182>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    3cc6:	61 e0       	ldi	r22, 0x01	; 1
    3cc8:	70 e0       	ldi	r23, 0x00	; 0
    3cca:	cb 01       	movw	r24, r22
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <tone+0x184>
		_delay_ms(half_period);
		SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
    3cd0:	8b b1       	in	r24, 0x0b	; 11
    3cd2:	3d 81       	ldd	r19, Y+5	; 0x05
    3cd4:	30 95       	com	r19
    3cd6:	38 23       	and	r19, r24
    3cd8:	3b b9       	out	0x0b, r19	; 11
	samples = duration/period;
	half_period = period/2;
	
	
	//half_period= (int)half_period;
	for(i=0;i<samples;i++)
    3cda:	8f ef       	ldi	r24, 0xFF	; 255
    3cdc:	88 1a       	sub	r8, r24
    3cde:	98 0a       	sbc	r9, r24
    3ce0:	a8 0a       	sbc	r10, r24
    3ce2:	b8 0a       	sbc	r11, r24
    3ce4:	84 14       	cp	r8, r4
    3ce6:	95 04       	cpc	r9, r5
    3ce8:	a6 04       	cpc	r10, r6
    3cea:	b7 04       	cpc	r11, r7
    3cec:	0c f4       	brge	.+2      	; 0x3cf0 <tone+0x1a8>
    3cee:	6f cf       	rjmp	.-290    	; 0x3bce <tone+0x86>
		_delay_ms(half_period);
		SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
		
	}
	return;
}	
    3cf0:	26 96       	adiw	r28, 0x06	; 6
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	f8 94       	cli
    3cf6:	de bf       	out	0x3e, r29	; 62
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	cd bf       	out	0x3d, r28	; 61
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	1f 91       	pop	r17
    3d02:	0f 91       	pop	r16
    3d04:	ff 90       	pop	r15
    3d06:	ef 90       	pop	r14
    3d08:	df 90       	pop	r13
    3d0a:	cf 90       	pop	r12
    3d0c:	bf 90       	pop	r11
    3d0e:	af 90       	pop	r10
    3d10:	9f 90       	pop	r9
    3d12:	8f 90       	pop	r8
    3d14:	7f 90       	pop	r7
    3d16:	6f 90       	pop	r6
    3d18:	5f 90       	pop	r5
    3d1a:	4f 90       	pop	r4
    3d1c:	3f 90       	pop	r3
    3d1e:	08 95       	ret

00003d20 <noTone>:

void noTone(int SPEAKER_PIN)
{
	SPEAKER_DDR |= (1<<SPEAKER_PIN);
    3d20:	4a b1       	in	r20, 0x0a	; 10
    3d22:	21 e0       	ldi	r18, 0x01	; 1
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	b9 01       	movw	r22, r18
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <noTone+0xe>
    3d2a:	66 0f       	add	r22, r22
    3d2c:	77 1f       	adc	r23, r23
    3d2e:	8a 95       	dec	r24
    3d30:	e2 f7       	brpl	.-8      	; 0x3d2a <noTone+0xa>
    3d32:	cb 01       	movw	r24, r22
    3d34:	46 2b       	or	r20, r22
    3d36:	4a b9       	out	0x0a, r20	; 10
	SPEAKER_PORT &= ~(1<<SPEAKER_PIN);
    3d38:	9b b1       	in	r25, 0x0b	; 11
    3d3a:	80 95       	com	r24
    3d3c:	89 23       	and	r24, r25
    3d3e:	8b b9       	out	0x0b, r24	; 11
    3d40:	08 95       	ret

00003d42 <pirate_of>:
	
}


void pirate_of()      // function to play the pirate of the Caribbean sea
{
    3d42:	8f 92       	push	r8
    3d44:	9f 92       	push	r9
    3d46:	af 92       	push	r10
    3d48:	bf 92       	push	r11
    3d4a:	cf 92       	push	r12
    3d4c:	df 92       	push	r13
    3d4e:	ef 92       	push	r14
    3d50:	ff 92       	push	r15
    3d52:	0f 93       	push	r16
    3d54:	1f 93       	push	r17
    3d56:	cf 93       	push	r28
    3d58:	df 93       	push	r29
	const int totalNotes = sizeof(pcs_notes) / sizeof(int);
	for (int i = 0; i < totalNotes; i++)
    3d5a:	c0 e0       	ldi	r28, 0x00	; 0
    3d5c:	d0 e0       	ldi	r29, 0x00	; 0
    3d5e:	74 c0       	rjmp	.+232    	; 0x3e48 <pirate_of+0x106>
	{
		const int currentNote = pgm_read_word(&pcs_notes[i]);
    3d60:	ce 01       	movw	r24, r28
    3d62:	88 0f       	add	r24, r24
    3d64:	99 1f       	adc	r25, r25
    3d66:	8c 01       	movw	r16, r24
    3d68:	0c 55       	subi	r16, 0x5C	; 92
    3d6a:	14 4f       	sbci	r17, 0xF4	; 244
    3d6c:	f8 01       	movw	r30, r16
    3d6e:	e5 90       	lpm	r14, Z+
    3d70:	f4 90       	lpm	r15, Z
		float wait = pgm_read_word(&pcs_durations[i]) / pcs_tempo;
    3d72:	fc 01       	movw	r30, r24
    3d74:	e2 5f       	subi	r30, 0xF2	; 242
    3d76:	f5 4f       	sbci	r31, 0xF5	; 245
    3d78:	65 91       	lpm	r22, Z+
    3d7a:	74 91       	lpm	r23, Z
    3d7c:	80 e0       	ldi	r24, 0x00	; 0
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	0e 94 13 22 	call	0x4426	; 0x4426 <__floatunsisf>
    3d84:	20 e0       	ldi	r18, 0x00	; 0
    3d86:	30 e0       	ldi	r19, 0x00	; 0
    3d88:	40 ec       	ldi	r20, 0xC0	; 192
    3d8a:	5f e3       	ldi	r21, 0x3F	; 63
    3d8c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <__divsf3>
    3d90:	4b 01       	movw	r8, r22
    3d92:	5c 01       	movw	r10, r24
		if ( !(~PINC &(1<<PINC3))) // checks the play pause switch
    3d94:	33 9b       	sbis	0x06, 3	; 6
    3d96:	5c c0       	rjmp	.+184    	; 0x3e50 <pirate_of+0x10e>
		{
			if (currentNote != 0)
    3d98:	ef 28       	or	r14, r15
    3d9a:	99 f0       	breq	.+38     	; 0x3dc2 <pirate_of+0x80>
			{
				PORTC |= (1<<PORTC2);
    3d9c:	88 b1       	in	r24, 0x08	; 8
    3d9e:	84 60       	ori	r24, 0x04	; 4
    3da0:	88 b9       	out	0x08, r24	; 8
				tone(SPEAKER, pgm_read_word(&pcs_notes[i]), wait);
    3da2:	f8 01       	movw	r30, r16
    3da4:	65 91       	lpm	r22, Z+
    3da6:	74 91       	lpm	r23, Z
    3da8:	80 e0       	ldi	r24, 0x00	; 0
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	0e 94 13 22 	call	0x4426	; 0x4426 <__floatunsisf>
    3db0:	ab 01       	movw	r20, r22
    3db2:	bc 01       	movw	r22, r24
    3db4:	95 01       	movw	r18, r10
    3db6:	84 01       	movw	r16, r8
    3db8:	87 e0       	ldi	r24, 0x07	; 7
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <tone>
    3dc0:	04 c0       	rjmp	.+8      	; 0x3dca <pirate_of+0x88>
			}
			else
			{
				noTone(SPEAKER);
    3dc2:	87 e0       	ldi	r24, 0x07	; 7
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <noTone>
			}
			PORTC &= ~(1<<PORTC2);
    3dca:	88 b1       	in	r24, 0x08	; 8
    3dcc:	8b 7f       	andi	r24, 0xFB	; 251
    3dce:	88 b9       	out	0x08, r24	; 8

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3dd0:	20 e0       	ldi	r18, 0x00	; 0
    3dd2:	30 e0       	ldi	r19, 0x00	; 0
    3dd4:	4a e7       	ldi	r20, 0x7A	; 122
    3dd6:	55 e4       	ldi	r21, 0x45	; 69
    3dd8:	c5 01       	movw	r24, r10
    3dda:	b4 01       	movw	r22, r8
    3ddc:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3de0:	6b 01       	movw	r12, r22
    3de2:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    3de4:	20 e0       	ldi	r18, 0x00	; 0
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	40 e8       	ldi	r20, 0x80	; 128
    3dea:	5f e3       	ldi	r21, 0x3F	; 63
    3dec:	0e 94 66 21 	call	0x42cc	; 0x42cc <__cmpsf2>
    3df0:	88 23       	and	r24, r24
    3df2:	24 f1       	brlt	.+72     	; 0x3e3c <pirate_of+0xfa>
		__ticks = 1;
	else if (__tmp > 65535)
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	3f ef       	ldi	r19, 0xFF	; 255
    3df8:	4f e7       	ldi	r20, 0x7F	; 127
    3dfa:	57 e4       	ldi	r21, 0x47	; 71
    3dfc:	c7 01       	movw	r24, r14
    3dfe:	b6 01       	movw	r22, r12
    3e00:	0e 94 c5 22 	call	0x458a	; 0x458a <__gesf2>
    3e04:	18 16       	cp	r1, r24
    3e06:	ac f4       	brge	.+42     	; 0x3e32 <pirate_of+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e2       	ldi	r20, 0x20	; 32
    3e0e:	51 e4       	ldi	r21, 0x41	; 65
    3e10:	c5 01       	movw	r24, r10
    3e12:	b4 01       	movw	r22, r8
    3e14:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3e18:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__fixunssfsi>
    3e1c:	06 c0       	rjmp	.+12     	; 0x3e2a <pirate_of+0xe8>
    3e1e:	80 e9       	ldi	r24, 0x90	; 144
    3e20:	91 e0       	ldi	r25, 0x01	; 1
    3e22:	01 97       	sbiw	r24, 0x01	; 1
    3e24:	f1 f7       	brne	.-4      	; 0x3e22 <pirate_of+0xe0>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e26:	61 50       	subi	r22, 0x01	; 1
    3e28:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e2a:	61 15       	cp	r22, r1
    3e2c:	71 05       	cpc	r23, r1
    3e2e:	b9 f7       	brne	.-18     	; 0x3e1e <pirate_of+0xdc>
    3e30:	0a c0       	rjmp	.+20     	; 0x3e46 <pirate_of+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e32:	c7 01       	movw	r24, r14
    3e34:	b6 01       	movw	r22, r12
    3e36:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__fixunssfsi>
    3e3a:	02 c0       	rjmp	.+4      	; 0x3e40 <pirate_of+0xfe>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    3e3c:	61 e0       	ldi	r22, 0x01	; 1
    3e3e:	70 e0       	ldi	r23, 0x00	; 0
    3e40:	cb 01       	movw	r24, r22
    3e42:	01 97       	sbiw	r24, 0x01	; 1
    3e44:	f1 f7       	brne	.-4      	; 0x3e42 <pirate_of+0x100>


void pirate_of()      // function to play the pirate of the Caribbean sea
{
	const int totalNotes = sizeof(pcs_notes) / sizeof(int);
	for (int i = 0; i < totalNotes; i++)
    3e46:	21 96       	adiw	r28, 0x01	; 1
    3e48:	cb 3c       	cpi	r28, 0xCB	; 203
    3e4a:	d1 05       	cpc	r29, r1
    3e4c:	0c f4       	brge	.+2      	; 0x3e50 <pirate_of+0x10e>
    3e4e:	88 cf       	rjmp	.-240    	; 0x3d60 <pirate_of+0x1e>
		}
		
	}
	
	return;
}
    3e50:	df 91       	pop	r29
    3e52:	cf 91       	pop	r28
    3e54:	1f 91       	pop	r17
    3e56:	0f 91       	pop	r16
    3e58:	ff 90       	pop	r15
    3e5a:	ef 90       	pop	r14
    3e5c:	df 90       	pop	r13
    3e5e:	cf 90       	pop	r12
    3e60:	bf 90       	pop	r11
    3e62:	af 90       	pop	r10
    3e64:	9f 90       	pop	r9
    3e66:	8f 90       	pop	r8
    3e68:	08 95       	ret

00003e6a <play_melody>:



void play_melody(const int melody[],const int tempo,const int notes) // function to play any melody
{
    3e6a:	2f 92       	push	r2
    3e6c:	3f 92       	push	r3
    3e6e:	4f 92       	push	r4
    3e70:	5f 92       	push	r5
    3e72:	6f 92       	push	r6
    3e74:	7f 92       	push	r7
    3e76:	8f 92       	push	r8
    3e78:	9f 92       	push	r9
    3e7a:	af 92       	push	r10
    3e7c:	bf 92       	push	r11
    3e7e:	cf 92       	push	r12
    3e80:	df 92       	push	r13
    3e82:	ef 92       	push	r14
    3e84:	ff 92       	push	r15
    3e86:	0f 93       	push	r16
    3e88:	1f 93       	push	r17
    3e8a:	cf 93       	push	r28
    3e8c:	df 93       	push	r29
    3e8e:	00 d0       	rcall	.+0      	; 0x3e90 <play_melody+0x26>
    3e90:	00 d0       	rcall	.+0      	; 0x3e92 <play_melody+0x28>
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
    3e96:	7c 01       	movw	r14, r24
    3e98:	1a 01       	movw	r2, r20
	int wholenote = (60000 * 4) / tempo;
    3e9a:	9b 01       	movw	r18, r22
    3e9c:	77 0f       	add	r23, r23
    3e9e:	44 0b       	sbc	r20, r20
    3ea0:	55 0b       	sbc	r21, r21
    3ea2:	60 e8       	ldi	r22, 0x80	; 128
    3ea4:	79 ea       	ldi	r23, 0xA9	; 169
    3ea6:	83 e0       	ldi	r24, 0x03	; 3
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	0e 94 4b 23 	call	0x4696	; 0x4696 <__divmodsi4>
    3eae:	3a 83       	std	Y+2, r19	; 0x02
    3eb0:	29 83       	std	Y+1, r18	; 0x01
	int divider = 0, noteDuration = 0;
	
	// iterate over the notes of the melody.
	for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
    3eb2:	1c 82       	std	Y+4, r1	; 0x04
    3eb4:	1b 82       	std	Y+3, r1	; 0x03


void play_melody(const int melody[],const int tempo,const int notes) // function to play any melody
{
	int wholenote = (60000 * 4) / tempo;
	int divider = 0, noteDuration = 0;
    3eb6:	c1 2c       	mov	r12, r1
    3eb8:	d1 2c       	mov	r13, r1
	
	// iterate over the notes of the melody.
	for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
    3eba:	9e c0       	rjmp	.+316    	; 0x3ff8 <play_melody+0x18e>
		divider = (pgm_read_word(&melody[thisNote + 1]));
    3ebc:	0b 81       	ldd	r16, Y+3	; 0x03
    3ebe:	1c 81       	ldd	r17, Y+4	; 0x04
    3ec0:	f8 01       	movw	r30, r16
    3ec2:	31 96       	adiw	r30, 0x01	; 1
    3ec4:	ee 0f       	add	r30, r30
    3ec6:	ff 1f       	adc	r31, r31
    3ec8:	ee 0d       	add	r30, r14
    3eca:	ff 1d       	adc	r31, r15
    3ecc:	85 91       	lpm	r24, Z+
    3ece:	94 91       	lpm	r25, Z
    3ed0:	bc 01       	movw	r22, r24
		if (divider > 0) {
    3ed2:	18 16       	cp	r1, r24
    3ed4:	19 06       	cpc	r1, r25
    3ed6:	34 f4       	brge	.+12     	; 0x3ee4 <play_melody+0x7a>
			noteDuration = (wholenote) / divider;  // regular note, just proceed
    3ed8:	89 81       	ldd	r24, Y+1	; 0x01
    3eda:	9a 81       	ldd	r25, Y+2	; 0x02
    3edc:	0e 94 37 23 	call	0x466e	; 0x466e <__divmodhi4>
    3ee0:	6b 01       	movw	r12, r22
    3ee2:	19 c0       	rjmp	.+50     	; 0x3f16 <play_melody+0xac>
		}
		else if (divider < 0) {
    3ee4:	99 23       	and	r25, r25
    3ee6:	bc f4       	brge	.+46     	; 0x3f16 <play_melody+0xac>
			noteDuration = (wholenote) / (-1*(divider));// dotted notes are represented with negative durations!!
    3ee8:	66 27       	eor	r22, r22
    3eea:	77 27       	eor	r23, r23
    3eec:	68 1b       	sub	r22, r24
    3eee:	79 0b       	sbc	r23, r25
    3ef0:	89 81       	ldd	r24, Y+1	; 0x01
    3ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef4:	0e 94 37 23 	call	0x466e	; 0x466e <__divmodhi4>
			noteDuration *= 1.5; // increases the duration in half for dotted notes
    3ef8:	07 2e       	mov	r0, r23
    3efa:	00 0c       	add	r0, r0
    3efc:	88 0b       	sbc	r24, r24
    3efe:	99 0b       	sbc	r25, r25
    3f00:	0e 94 15 22 	call	0x442a	; 0x442a <__floatsisf>
    3f04:	20 e0       	ldi	r18, 0x00	; 0
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	40 ec       	ldi	r20, 0xC0	; 192
    3f0a:	5f e3       	ldi	r21, 0x3F	; 63
    3f0c:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3f10:	0e 94 dd 21 	call	0x43ba	; 0x43ba <__fixsfsi>
    3f14:	6b 01       	movw	r12, r22
		}
		
		
		
		if (!(~PINC &(1<<PINC3)))   // checks the play pause switch
    3f16:	33 9b       	sbis	0x06, 3	; 6
    3f18:	78 c0       	rjmp	.+240    	; 0x400a <play_melody+0x1a0>
		{
			PORTC |= (1<<PORTC2);
    3f1a:	88 b1       	in	r24, 0x08	; 8
    3f1c:	84 60       	ori	r24, 0x04	; 4
    3f1e:	88 b9       	out	0x08, r24	; 8
			tone(SPEAKER, (pgm_read_word(&melody[thisNote])), noteDuration * 0.9); //play the note for 90% of the duration, leaving 10% as a pause
    3f20:	b6 01       	movw	r22, r12
    3f22:	0d 2c       	mov	r0, r13
    3f24:	00 0c       	add	r0, r0
    3f26:	88 0b       	sbc	r24, r24
    3f28:	99 0b       	sbc	r25, r25
    3f2a:	0e 94 15 22 	call	0x442a	; 0x442a <__floatsisf>
    3f2e:	2b 01       	movw	r4, r22
    3f30:	3c 01       	movw	r6, r24
    3f32:	26 e6       	ldi	r18, 0x66	; 102
    3f34:	36 e6       	ldi	r19, 0x66	; 102
    3f36:	46 e6       	ldi	r20, 0x66	; 102
    3f38:	5f e3       	ldi	r21, 0x3F	; 63
    3f3a:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3f3e:	4b 01       	movw	r8, r22
    3f40:	5c 01       	movw	r10, r24
    3f42:	f8 01       	movw	r30, r16
    3f44:	ee 0f       	add	r30, r30
    3f46:	ff 1f       	adc	r31, r31
    3f48:	ee 0d       	add	r30, r14
    3f4a:	ff 1d       	adc	r31, r15
    3f4c:	65 91       	lpm	r22, Z+
    3f4e:	74 91       	lpm	r23, Z
    3f50:	80 e0       	ldi	r24, 0x00	; 0
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	0e 94 13 22 	call	0x4426	; 0x4426 <__floatunsisf>
    3f58:	ab 01       	movw	r20, r22
    3f5a:	bc 01       	movw	r22, r24
    3f5c:	95 01       	movw	r18, r10
    3f5e:	84 01       	movw	r16, r8
    3f60:	87 e0       	ldi	r24, 0x07	; 7
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <tone>
			PORTC &= ~(1<<PORTC2);
    3f68:	88 b1       	in	r24, 0x08	; 8
    3f6a:	8b 7f       	andi	r24, 0xFB	; 251
    3f6c:	88 b9       	out	0x08, r24	; 8

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	4a e7       	ldi	r20, 0x7A	; 122
    3f74:	55 e4       	ldi	r21, 0x45	; 69
    3f76:	c3 01       	movw	r24, r6
    3f78:	b2 01       	movw	r22, r4
    3f7a:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3f7e:	4b 01       	movw	r8, r22
    3f80:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	40 e8       	ldi	r20, 0x80	; 128
    3f88:	5f e3       	ldi	r21, 0x3F	; 63
    3f8a:	0e 94 66 21 	call	0x42cc	; 0x42cc <__cmpsf2>
    3f8e:	88 23       	and	r24, r24
    3f90:	24 f1       	brlt	.+72     	; 0x3fda <play_melody+0x170>
		__ticks = 1;
	else if (__tmp > 65535)
    3f92:	20 e0       	ldi	r18, 0x00	; 0
    3f94:	3f ef       	ldi	r19, 0xFF	; 255
    3f96:	4f e7       	ldi	r20, 0x7F	; 127
    3f98:	57 e4       	ldi	r21, 0x47	; 71
    3f9a:	c5 01       	movw	r24, r10
    3f9c:	b4 01       	movw	r22, r8
    3f9e:	0e 94 c5 22 	call	0x458a	; 0x458a <__gesf2>
    3fa2:	18 16       	cp	r1, r24
    3fa4:	ac f4       	brge	.+42     	; 0x3fd0 <play_melody+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	40 e2       	ldi	r20, 0x20	; 32
    3fac:	51 e4       	ldi	r21, 0x41	; 65
    3fae:	c3 01       	movw	r24, r6
    3fb0:	b2 01       	movw	r22, r4
    3fb2:	0e 94 ca 22 	call	0x4594	; 0x4594 <__mulsf3>
    3fb6:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__fixunssfsi>
    3fba:	06 c0       	rjmp	.+12     	; 0x3fc8 <play_melody+0x15e>
    3fbc:	80 e9       	ldi	r24, 0x90	; 144
    3fbe:	91 e0       	ldi	r25, 0x01	; 1
    3fc0:	01 97       	sbiw	r24, 0x01	; 1
    3fc2:	f1 f7       	brne	.-4      	; 0x3fc0 <play_melody+0x156>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc4:	61 50       	subi	r22, 0x01	; 1
    3fc6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc8:	61 15       	cp	r22, r1
    3fca:	71 05       	cpc	r23, r1
    3fcc:	b9 f7       	brne	.-18     	; 0x3fbc <play_melody+0x152>
    3fce:	0a c0       	rjmp	.+20     	; 0x3fe4 <play_melody+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd0:	c5 01       	movw	r24, r10
    3fd2:	b4 01       	movw	r22, r8
    3fd4:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__fixunssfsi>
    3fd8:	02 c0       	rjmp	.+4      	; 0x3fde <play_melody+0x174>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    3fda:	61 e0       	ldi	r22, 0x01	; 1
    3fdc:	70 e0       	ldi	r23, 0x00	; 0
    3fde:	cb 01       	movw	r24, r22
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	f1 f7       	brne	.-4      	; 0x3fe0 <play_melody+0x176>
			_delay_ms(noteDuration);
			
			noTone(SPEAKER);
    3fe4:	87 e0       	ldi	r24, 0x07	; 7
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <noTone>
{
	int wholenote = (60000 * 4) / tempo;
	int divider = 0, noteDuration = 0;
	
	// iterate over the notes of the melody.
	for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
    3fec:	2b 81       	ldd	r18, Y+3	; 0x03
    3fee:	3c 81       	ldd	r19, Y+4	; 0x04
    3ff0:	2e 5f       	subi	r18, 0xFE	; 254
    3ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ff4:	3c 83       	std	Y+4, r19	; 0x04
    3ff6:	2b 83       	std	Y+3, r18	; 0x03
    3ff8:	c1 01       	movw	r24, r2
    3ffa:	88 0f       	add	r24, r24
    3ffc:	99 1f       	adc	r25, r25
    3ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    4000:	3c 81       	ldd	r19, Y+4	; 0x04
    4002:	28 17       	cp	r18, r24
    4004:	39 07       	cpc	r19, r25
    4006:	0c f4       	brge	.+2      	; 0x400a <play_melody+0x1a0>
    4008:	59 cf       	rjmp	.-334    	; 0x3ebc <play_melody+0x52>
		
		
		
	}
	return;
}
    400a:	0f 90       	pop	r0
    400c:	0f 90       	pop	r0
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	df 91       	pop	r29
    4014:	cf 91       	pop	r28
    4016:	1f 91       	pop	r17
    4018:	0f 91       	pop	r16
    401a:	ff 90       	pop	r15
    401c:	ef 90       	pop	r14
    401e:	df 90       	pop	r13
    4020:	cf 90       	pop	r12
    4022:	bf 90       	pop	r11
    4024:	af 90       	pop	r10
    4026:	9f 90       	pop	r9
    4028:	8f 90       	pop	r8
    402a:	7f 90       	pop	r7
    402c:	6f 90       	pop	r6
    402e:	5f 90       	pop	r5
    4030:	4f 90       	pop	r4
    4032:	3f 90       	pop	r3
    4034:	2f 90       	pop	r2
    4036:	08 95       	ret

00004038 <song>:


void song(int Alarm_Tone){
	
	
	if (Alarm_Tone==1){pirate_of();}
    4038:	81 30       	cpi	r24, 0x01	; 1
    403a:	91 05       	cpc	r25, r1
    403c:	19 f4       	brne	.+6      	; 0x4044 <song+0xc>
    403e:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <pirate_of>
    4042:	08 95       	ret
	
	
	else if (Alarm_Tone==2){play_melody((got_melody), (got_tempo), (got_notes));}
    4044:	82 30       	cpi	r24, 0x02	; 2
    4046:	91 05       	cpc	r25, r1
    4048:	69 f4       	brne	.+26     	; 0x4064 <song+0x2c>
    404a:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <got_notes>
    404e:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <got_notes+0x1>
    4052:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <got_tempo>
    4056:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <got_tempo+0x1>
    405a:	86 e2       	ldi	r24, 0x26	; 38
    405c:	90 e1       	ldi	r25, 0x10	; 16
    405e:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <play_melody>
    4062:	08 95       	ret
	
	else if (Alarm_Tone==3){play_melody((fur_melody), (fur_tempo), (fur_notes));}
    4064:	83 30       	cpi	r24, 0x03	; 3
    4066:	91 05       	cpc	r25, r1
    4068:	69 f4       	brne	.+26     	; 0x4084 <song+0x4c>
    406a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    406e:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4072:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <fur_tempo>
    4076:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <fur_tempo+0x1>
    407a:	82 ea       	ldi	r24, 0xA2	; 162
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <play_melody>
    4082:	08 95       	ret
	
	else if (Alarm_Tone==4){play_melody((pink_melody), (pink_tempo), (pink_notes));}
    4084:	84 30       	cpi	r24, 0x04	; 4
    4086:	91 05       	cpc	r25, r1
    4088:	69 f4       	brne	.+26     	; 0x40a4 <song+0x6c>
    408a:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <pink_notes>
    408e:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <pink_notes+0x1>
    4092:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <pink_tempo>
    4096:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <pink_tempo+0x1>
    409a:	86 ec       	ldi	r24, 0xC6	; 198
    409c:	9e e0       	ldi	r25, 0x0E	; 14
    409e:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <play_melody>
    40a2:	08 95       	ret
	
	else if (Alarm_Tone==5){play_melody((turtis_melody), (turtis_tempo), (turtis_notes));}
    40a4:	05 97       	sbiw	r24, 0x05	; 5
    40a6:	61 f4       	brne	.+24     	; 0x40c0 <song+0x88>
    40a8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <turtis_notes>
    40ac:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <turtis_notes+0x1>
    40b0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <turtis_tempo>
    40b4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <turtis_tempo+0x1>
    40b8:	8a e3       	ldi	r24, 0x3A	; 58
    40ba:	9d e0       	ldi	r25, 0x0D	; 13
    40bc:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <play_melody>
    40c0:	08 95       	ret

000040c2 <Alarm_Ring>:
#include "String.h"
bool Alarm_status[5];



void Alarm_Ring(int Alarm_Tone,int hour, int minute, int second){          //Alarm Ringing condition
    40c2:	af 92       	push	r10
    40c4:	bf 92       	push	r11
    40c6:	cf 92       	push	r12
    40c8:	df 92       	push	r13
    40ca:	ef 92       	push	r14
    40cc:	ff 92       	push	r15
    40ce:	0f 93       	push	r16
    40d0:	1f 93       	push	r17
    40d2:	cf 93       	push	r28
    40d4:	df 93       	push	r29
    40d6:	5c 01       	movw	r10, r24
    40d8:	8b 01       	movw	r16, r22
    40da:	7a 01       	movw	r14, r20
    40dc:	69 01       	movw	r12, r18
	for (int i=0;i<5;i++){
    40de:	c0 e0       	ldi	r28, 0x00	; 0
    40e0:	d0 e0       	ldi	r29, 0x00	; 0
    40e2:	46 c0       	rjmp	.+140    	; 0x4170 <Alarm_Ring+0xae>
		if (Alarm_status[i]){
    40e4:	fe 01       	movw	r30, r28
    40e6:	ef 5d       	subi	r30, 0xDF	; 223
    40e8:	fe 4f       	sbci	r31, 0xFE	; 254
    40ea:	80 81       	ld	r24, Z
    40ec:	88 23       	and	r24, r24
    40ee:	09 f4       	brne	.+2      	; 0x40f2 <Alarm_Ring+0x30>
    40f0:	3e c0       	rjmp	.+124    	; 0x416e <Alarm_Ring+0xac>
			if ((Alarm[i][0]==hour) && (Alarm[i][1]==minute) && (00==second)){
    40f2:	fe 01       	movw	r30, r28
    40f4:	ee 0f       	add	r30, r30
    40f6:	ff 1f       	adc	r31, r31
    40f8:	ee 0f       	add	r30, r30
    40fa:	ff 1f       	adc	r31, r31
    40fc:	ea 5d       	subi	r30, 0xDA	; 218
    40fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4100:	80 81       	ld	r24, Z
    4102:	91 81       	ldd	r25, Z+1	; 0x01
    4104:	80 17       	cp	r24, r16
    4106:	91 07       	cpc	r25, r17
    4108:	91 f5       	brne	.+100    	; 0x416e <Alarm_Ring+0xac>
    410a:	fe 01       	movw	r30, r28
    410c:	ee 0f       	add	r30, r30
    410e:	ff 1f       	adc	r31, r31
    4110:	ee 0f       	add	r30, r30
    4112:	ff 1f       	adc	r31, r31
    4114:	ea 5d       	subi	r30, 0xDA	; 218
    4116:	fe 4f       	sbci	r31, 0xFE	; 254
    4118:	82 81       	ldd	r24, Z+2	; 0x02
    411a:	93 81       	ldd	r25, Z+3	; 0x03
    411c:	8e 15       	cp	r24, r14
    411e:	9f 05       	cpc	r25, r15
    4120:	31 f5       	brne	.+76     	; 0x416e <Alarm_Ring+0xac>
    4122:	c1 14       	cp	r12, r1
    4124:	d1 04       	cpc	r13, r1
    4126:	19 f5       	brne	.+70     	; 0x416e <Alarm_Ring+0xac>
				menu_can_access = false;
    4128:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <menu_can_access>
				LCD_Clear();
    412c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
				LCD_Ring_Print(Alarm[i][0],Alarm[i][1]);
    4130:	fe 01       	movw	r30, r28
    4132:	ee 0f       	add	r30, r30
    4134:	ff 1f       	adc	r31, r31
    4136:	ee 0f       	add	r30, r30
    4138:	ff 1f       	adc	r31, r31
    413a:	ea 5d       	subi	r30, 0xDA	; 218
    413c:	fe 4f       	sbci	r31, 0xFE	; 254
    413e:	62 81       	ldd	r22, Z+2	; 0x02
    4140:	73 81       	ldd	r23, Z+3	; 0x03
    4142:	80 81       	ld	r24, Z
    4144:	91 81       	ldd	r25, Z+1	; 0x01
    4146:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_Ring_Print>
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    414a:	80 e1       	ldi	r24, 0x10	; 16
    414c:	97 e2       	ldi	r25, 0x27	; 39
    414e:	05 c0       	rjmp	.+10     	; 0x415a <Alarm_Ring+0x98>
    4150:	e0 e9       	ldi	r30, 0x90	; 144
    4152:	f1 e0       	ldi	r31, 0x01	; 1
    4154:	31 97       	sbiw	r30, 0x01	; 1
    4156:	f1 f7       	brne	.-4      	; 0x4154 <Alarm_Ring+0x92>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4158:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    415a:	00 97       	sbiw	r24, 0x00	; 0
    415c:	c9 f7       	brne	.-14     	; 0x4150 <Alarm_Ring+0x8e>
				_delay_ms(1000);
				song(Alarm_Tone);
    415e:	c5 01       	movw	r24, r10
    4160:	0e 94 1c 20 	call	0x4038	; 0x4038 <song>
				LCD_Clear();
    4164:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
				menu_can_access = true;
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <menu_can_access>
bool Alarm_status[5];



void Alarm_Ring(int Alarm_Tone,int hour, int minute, int second){          //Alarm Ringing condition
	for (int i=0;i<5;i++){
    416e:	21 96       	adiw	r28, 0x01	; 1
    4170:	c5 30       	cpi	r28, 0x05	; 5
    4172:	d1 05       	cpc	r29, r1
    4174:	0c f4       	brge	.+2      	; 0x4178 <Alarm_Ring+0xb6>
    4176:	b6 cf       	rjmp	.-148    	; 0x40e4 <Alarm_Ring+0x22>
				LCD_Clear();
				menu_can_access = true;
			}
		}
	}
}
    4178:	df 91       	pop	r29
    417a:	cf 91       	pop	r28
    417c:	1f 91       	pop	r17
    417e:	0f 91       	pop	r16
    4180:	ff 90       	pop	r15
    4182:	ef 90       	pop	r14
    4184:	df 90       	pop	r13
    4186:	cf 90       	pop	r12
    4188:	bf 90       	pop	r11
    418a:	af 90       	pop	r10
    418c:	08 95       	ret

0000418e <main>:
int Alarm[5][2]={{10,05},{10,11},{10,8},{10,12},{10,13}};   // Alarm Times set for demonstration
bool Alarm_status[5]={true,true,true,false,false};     // Alarm status set for demonstration


int main(void)
{   DDRB = 0X0f;
    418e:	cf 93       	push	r28
    4190:	df 93       	push	r29
    4192:	00 d0       	rcall	.+0      	; 0x4194 <main+0x6>
    4194:	00 d0       	rcall	.+0      	; 0x4196 <main+0x8>
    4196:	00 d0       	rcall	.+0      	; 0x4198 <main+0xa>
    4198:	cd b7       	in	r28, 0x3d	; 61
    419a:	de b7       	in	r29, 0x3e	; 62
    419c:	8f e0       	ldi	r24, 0x0F	; 15
    419e:	84 b9       	out	0x04, r24	; 4
	DDRD = 0xf0;
    41a0:	80 ef       	ldi	r24, 0xF0	; 240
    41a2:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b01111111;
    41a4:	8f e7       	ldi	r24, 0x7F	; 127
    41a6:	8b b9       	out	0x0b, r24	; 11
	DDRC = 0b11000100;
    41a8:	84 ec       	ldi	r24, 0xC4	; 196
    41aa:	87 b9       	out	0x07, r24	; 7
	PORTC= 0b01111011;
    41ac:	8b e7       	ldi	r24, 0x7B	; 123
    41ae:	88 b9       	out	0x08, r24	; 8
	
	
	
	uint8_t year = 0;
    41b0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t month = 0;
    41b2:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t day = 0;
    41b4:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t hour = 0;
    41b6:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t minute = 0;
    41b8:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t second = 0;
    41ba:	1e 82       	std	Y+6, r1	; 0x06
	
	

	Setdate(21, 07, 05, 10, 04, 55);  // Time is setted for demonstartions purpose
    41bc:	0f 2e       	mov	r0, r31
    41be:	f7 e3       	ldi	r31, 0x37	; 55
    41c0:	ef 2e       	mov	r14, r31
    41c2:	f0 2d       	mov	r31, r0
    41c4:	04 e0       	ldi	r16, 0x04	; 4
    41c6:	2a e0       	ldi	r18, 0x0A	; 10
    41c8:	45 e0       	ldi	r20, 0x05	; 5
    41ca:	67 e0       	ldi	r22, 0x07	; 7
    41cc:	85 e1       	ldi	r24, 0x15	; 21
    41ce:	0e 94 cd 14 	call	0x299a	; 0x299a <Setdate>
	LCD_Init();
    41d2:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <LCD_Init>
	LCD_Clear();
    41d6:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
	LCD_String_xy(0,4,"WELCOME");
    41da:	43 ea       	ldi	r20, 0xA3	; 163
    41dc:	56 e0       	ldi	r21, 0x06	; 6
    41de:	64 e0       	ldi	r22, 0x04	; 4
    41e0:	80 e0       	ldi	r24, 0x00	; 0
    41e2:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
	LCD_Command(0xC0);
    41e6:	80 ec       	ldi	r24, 0xC0	; 192
    41e8:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_Command>
	LCD_String_xy(1,2,"-TEAM LOCUS-");
    41ec:	4b ea       	ldi	r20, 0xAB	; 171
    41ee:	56 e0       	ldi	r21, 0x06	; 6
    41f0:	62 e0       	ldi	r22, 0x02	; 2
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	0e 94 16 0a 	call	0x142c	; 0x142c <LCD_String_xy>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f8:	80 e1       	ldi	r24, 0x10	; 16
    41fa:	97 e2       	ldi	r25, 0x27	; 39
    41fc:	05 c0       	rjmp	.+10     	; 0x4208 <main+0x7a>
    41fe:	e0 e9       	ldi	r30, 0x90	; 144
    4200:	f1 e0       	ldi	r31, 0x01	; 1
    4202:	31 97       	sbiw	r30, 0x01	; 1
    4204:	f1 f7       	brne	.-4      	; 0x4202 <main+0x74>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4206:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4208:	00 97       	sbiw	r24, 0x00	; 0
    420a:	c9 f7       	brne	.-14     	; 0x41fe <main+0x70>
	_delay_ms(1000);
	LCD_Clear();
    420c:	0e 94 32 0a 	call	0x1464	; 0x1464 <LCD_Clear>
  
  
    while (1) 
    {
		
		Getdate(&year,&month,&day,&hour,&minute,&second);
    4210:	ce 01       	movw	r24, r28
    4212:	06 96       	adiw	r24, 0x06	; 6
    4214:	7c 01       	movw	r14, r24
    4216:	8e 01       	movw	r16, r28
    4218:	0b 5f       	subi	r16, 0xFB	; 251
    421a:	1f 4f       	sbci	r17, 0xFF	; 255
    421c:	9e 01       	movw	r18, r28
    421e:	2c 5f       	subi	r18, 0xFC	; 252
    4220:	3f 4f       	sbci	r19, 0xFF	; 255
    4222:	ae 01       	movw	r20, r28
    4224:	4d 5f       	subi	r20, 0xFD	; 253
    4226:	5f 4f       	sbci	r21, 0xFF	; 255
    4228:	be 01       	movw	r22, r28
    422a:	6e 5f       	subi	r22, 0xFE	; 254
    422c:	7f 4f       	sbci	r23, 0xFF	; 255
    422e:	05 97       	sbiw	r24, 0x05	; 5
    4230:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <Getdate>
		
		if (~PINC & (1<<PINC0))
    4234:	30 99       	sbic	0x06, 0	; 6
    4236:	17 c0       	rjmp	.+46     	; 0x4266 <main+0xd8>
		{   
			menu_can_access = false;
    4238:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <menu_can_access>
			Menu = 1;
    423c:	81 e0       	ldi	r24, 0x01	; 1
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <Menu+0x1>
    4244:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Menu>
			updateMenu();
    4248:	0e 94 b9 19 	call	0x3372	; 0x3372 <updateMenu>
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    424c:	80 e1       	ldi	r24, 0x10	; 16
    424e:	97 e2       	ldi	r25, 0x27	; 39
    4250:	05 c0       	rjmp	.+10     	; 0x425c <main+0xce>
    4252:	e0 e9       	ldi	r30, 0x90	; 144
    4254:	f1 e0       	ldi	r31, 0x01	; 1
    4256:	31 97       	sbiw	r30, 0x01	; 1
    4258:	f1 f7       	brne	.-4      	; 0x4256 <main+0xc8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    425a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	c9 f7       	brne	.-14     	; 0x4252 <main+0xc4>
			_delay_ms(1000);
			Main_Menu_Buttons();
    4260:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <Main_Menu_Buttons>
    4264:	d5 cf       	rjmp	.-86     	; 0x4210 <main+0x82>
		} else if(menu_can_access){
    4266:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <menu_can_access>
    426a:	88 23       	and	r24, r24
    426c:	89 f2       	breq	.-94     	; 0x4210 <main+0x82>
			
			LCD_Print(year,month,day,hour,minute,second);
    426e:	ee 80       	ldd	r14, Y+6	; 0x06
    4270:	f1 2c       	mov	r15, r1
    4272:	0d 81       	ldd	r16, Y+5	; 0x05
    4274:	10 e0       	ldi	r17, 0x00	; 0
    4276:	2c 81       	ldd	r18, Y+4	; 0x04
    4278:	30 e0       	ldi	r19, 0x00	; 0
    427a:	4b 81       	ldd	r20, Y+3	; 0x03
    427c:	50 e0       	ldi	r21, 0x00	; 0
    427e:	6a 81       	ldd	r22, Y+2	; 0x02
    4280:	70 e0       	ldi	r23, 0x00	; 0
    4282:	89 81       	ldd	r24, Y+1	; 0x01
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_Print>
			Current_Time[0]=year;	
    428a:	e8 eb       	ldi	r30, 0xB8	; 184
    428c:	f6 e0       	ldi	r31, 0x06	; 6
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	80 83       	st	Z, r24
			Current_Time[1]=month;
    4296:	8a 81       	ldd	r24, Y+2	; 0x02
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	93 83       	std	Z+3, r25	; 0x03
    429c:	82 83       	std	Z+2, r24	; 0x02
			Current_Time[2]=day;
    429e:	8b 81       	ldd	r24, Y+3	; 0x03
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	95 83       	std	Z+5, r25	; 0x05
    42a4:	84 83       	std	Z+4, r24	; 0x04
			Current_Time[3]=hour;
    42a6:	6c 81       	ldd	r22, Y+4	; 0x04
    42a8:	70 e0       	ldi	r23, 0x00	; 0
    42aa:	77 83       	std	Z+7, r23	; 0x07
    42ac:	66 83       	std	Z+6, r22	; 0x06
			Current_Time[4]=minute;
    42ae:	4d 81       	ldd	r20, Y+5	; 0x05
    42b0:	50 e0       	ldi	r21, 0x00	; 0
    42b2:	51 87       	std	Z+9, r21	; 0x09
    42b4:	40 87       	std	Z+8, r20	; 0x08
			Current_Time[5]=second;	
    42b6:	2e 81       	ldd	r18, Y+6	; 0x06
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	33 87       	std	Z+11, r19	; 0x0b
    42bc:	22 87       	std	Z+10, r18	; 0x0a
			Alarm_Ring(Alarm_tone,hour,minute,second);
    42be:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <Alarm_tone>
    42c2:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <Alarm_tone+0x1>
    42c6:	0e 94 61 20 	call	0x40c2	; 0x40c2 <Alarm_Ring>
    42ca:	a2 cf       	rjmp	.-188    	; 0x4210 <main+0x82>

000042cc <__cmpsf2>:
    42cc:	0e 94 50 22 	call	0x44a0	; 0x44a0 <__fp_cmp>
    42d0:	08 f4       	brcc	.+2      	; 0x42d4 <__cmpsf2+0x8>
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	08 95       	ret

000042d6 <__divsf3>:
    42d6:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__divsf3x>
    42da:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__fp_round>
    42de:	0e 94 84 22 	call	0x4508	; 0x4508 <__fp_pscB>
    42e2:	58 f0       	brcs	.+22     	; 0x42fa <__divsf3+0x24>
    42e4:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__fp_pscA>
    42e8:	40 f0       	brcs	.+16     	; 0x42fa <__divsf3+0x24>
    42ea:	29 f4       	brne	.+10     	; 0x42f6 <__divsf3+0x20>
    42ec:	5f 3f       	cpi	r21, 0xFF	; 255
    42ee:	29 f0       	breq	.+10     	; 0x42fa <__divsf3+0x24>
    42f0:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__fp_inf>
    42f4:	51 11       	cpse	r21, r1
    42f6:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_szero>
    42fa:	0c 94 7a 22 	jmp	0x44f4	; 0x44f4 <__fp_nan>

000042fe <__divsf3x>:
    42fe:	0e 94 9c 22 	call	0x4538	; 0x4538 <__fp_split3>
    4302:	68 f3       	brcs	.-38     	; 0x42de <__divsf3+0x8>

00004304 <__divsf3_pse>:
    4304:	99 23       	and	r25, r25
    4306:	b1 f3       	breq	.-20     	; 0x42f4 <__divsf3+0x1e>
    4308:	55 23       	and	r21, r21
    430a:	91 f3       	breq	.-28     	; 0x42f0 <__divsf3+0x1a>
    430c:	95 1b       	sub	r25, r21
    430e:	55 0b       	sbc	r21, r21
    4310:	bb 27       	eor	r27, r27
    4312:	aa 27       	eor	r26, r26
    4314:	62 17       	cp	r22, r18
    4316:	73 07       	cpc	r23, r19
    4318:	84 07       	cpc	r24, r20
    431a:	38 f0       	brcs	.+14     	; 0x432a <__divsf3_pse+0x26>
    431c:	9f 5f       	subi	r25, 0xFF	; 255
    431e:	5f 4f       	sbci	r21, 0xFF	; 255
    4320:	22 0f       	add	r18, r18
    4322:	33 1f       	adc	r19, r19
    4324:	44 1f       	adc	r20, r20
    4326:	aa 1f       	adc	r26, r26
    4328:	a9 f3       	breq	.-22     	; 0x4314 <__divsf3_pse+0x10>
    432a:	35 d0       	rcall	.+106    	; 0x4396 <__divsf3_pse+0x92>
    432c:	0e 2e       	mov	r0, r30
    432e:	3a f0       	brmi	.+14     	; 0x433e <__divsf3_pse+0x3a>
    4330:	e0 e8       	ldi	r30, 0x80	; 128
    4332:	32 d0       	rcall	.+100    	; 0x4398 <__divsf3_pse+0x94>
    4334:	91 50       	subi	r25, 0x01	; 1
    4336:	50 40       	sbci	r21, 0x00	; 0
    4338:	e6 95       	lsr	r30
    433a:	00 1c       	adc	r0, r0
    433c:	ca f7       	brpl	.-14     	; 0x4330 <__divsf3_pse+0x2c>
    433e:	2b d0       	rcall	.+86     	; 0x4396 <__divsf3_pse+0x92>
    4340:	fe 2f       	mov	r31, r30
    4342:	29 d0       	rcall	.+82     	; 0x4396 <__divsf3_pse+0x92>
    4344:	66 0f       	add	r22, r22
    4346:	77 1f       	adc	r23, r23
    4348:	88 1f       	adc	r24, r24
    434a:	bb 1f       	adc	r27, r27
    434c:	26 17       	cp	r18, r22
    434e:	37 07       	cpc	r19, r23
    4350:	48 07       	cpc	r20, r24
    4352:	ab 07       	cpc	r26, r27
    4354:	b0 e8       	ldi	r27, 0x80	; 128
    4356:	09 f0       	breq	.+2      	; 0x435a <__divsf3_pse+0x56>
    4358:	bb 0b       	sbc	r27, r27
    435a:	80 2d       	mov	r24, r0
    435c:	bf 01       	movw	r22, r30
    435e:	ff 27       	eor	r31, r31
    4360:	93 58       	subi	r25, 0x83	; 131
    4362:	5f 4f       	sbci	r21, 0xFF	; 255
    4364:	3a f0       	brmi	.+14     	; 0x4374 <__divsf3_pse+0x70>
    4366:	9e 3f       	cpi	r25, 0xFE	; 254
    4368:	51 05       	cpc	r21, r1
    436a:	78 f0       	brcs	.+30     	; 0x438a <__divsf3_pse+0x86>
    436c:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__fp_inf>
    4370:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_szero>
    4374:	5f 3f       	cpi	r21, 0xFF	; 255
    4376:	e4 f3       	brlt	.-8      	; 0x4370 <__divsf3_pse+0x6c>
    4378:	98 3e       	cpi	r25, 0xE8	; 232
    437a:	d4 f3       	brlt	.-12     	; 0x4370 <__divsf3_pse+0x6c>
    437c:	86 95       	lsr	r24
    437e:	77 95       	ror	r23
    4380:	67 95       	ror	r22
    4382:	b7 95       	ror	r27
    4384:	f7 95       	ror	r31
    4386:	9f 5f       	subi	r25, 0xFF	; 255
    4388:	c9 f7       	brne	.-14     	; 0x437c <__divsf3_pse+0x78>
    438a:	88 0f       	add	r24, r24
    438c:	91 1d       	adc	r25, r1
    438e:	96 95       	lsr	r25
    4390:	87 95       	ror	r24
    4392:	97 f9       	bld	r25, 7
    4394:	08 95       	ret
    4396:	e1 e0       	ldi	r30, 0x01	; 1
    4398:	66 0f       	add	r22, r22
    439a:	77 1f       	adc	r23, r23
    439c:	88 1f       	adc	r24, r24
    439e:	bb 1f       	adc	r27, r27
    43a0:	62 17       	cp	r22, r18
    43a2:	73 07       	cpc	r23, r19
    43a4:	84 07       	cpc	r24, r20
    43a6:	ba 07       	cpc	r27, r26
    43a8:	20 f0       	brcs	.+8      	; 0x43b2 <__divsf3_pse+0xae>
    43aa:	62 1b       	sub	r22, r18
    43ac:	73 0b       	sbc	r23, r19
    43ae:	84 0b       	sbc	r24, r20
    43b0:	ba 0b       	sbc	r27, r26
    43b2:	ee 1f       	adc	r30, r30
    43b4:	88 f7       	brcc	.-30     	; 0x4398 <__divsf3_pse+0x94>
    43b6:	e0 95       	com	r30
    43b8:	08 95       	ret

000043ba <__fixsfsi>:
    43ba:	0e 94 e4 21 	call	0x43c8	; 0x43c8 <__fixunssfsi>
    43be:	68 94       	set
    43c0:	b1 11       	cpse	r27, r1
    43c2:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_szero>
    43c6:	08 95       	ret

000043c8 <__fixunssfsi>:
    43c8:	0e 94 a4 22 	call	0x4548	; 0x4548 <__fp_splitA>
    43cc:	88 f0       	brcs	.+34     	; 0x43f0 <__fixunssfsi+0x28>
    43ce:	9f 57       	subi	r25, 0x7F	; 127
    43d0:	98 f0       	brcs	.+38     	; 0x43f8 <__fixunssfsi+0x30>
    43d2:	b9 2f       	mov	r27, r25
    43d4:	99 27       	eor	r25, r25
    43d6:	b7 51       	subi	r27, 0x17	; 23
    43d8:	b0 f0       	brcs	.+44     	; 0x4406 <__fixunssfsi+0x3e>
    43da:	e1 f0       	breq	.+56     	; 0x4414 <__fixunssfsi+0x4c>
    43dc:	66 0f       	add	r22, r22
    43de:	77 1f       	adc	r23, r23
    43e0:	88 1f       	adc	r24, r24
    43e2:	99 1f       	adc	r25, r25
    43e4:	1a f0       	brmi	.+6      	; 0x43ec <__fixunssfsi+0x24>
    43e6:	ba 95       	dec	r27
    43e8:	c9 f7       	brne	.-14     	; 0x43dc <__fixunssfsi+0x14>
    43ea:	14 c0       	rjmp	.+40     	; 0x4414 <__fixunssfsi+0x4c>
    43ec:	b1 30       	cpi	r27, 0x01	; 1
    43ee:	91 f0       	breq	.+36     	; 0x4414 <__fixunssfsi+0x4c>
    43f0:	0e 94 be 22 	call	0x457c	; 0x457c <__fp_zero>
    43f4:	b1 e0       	ldi	r27, 0x01	; 1
    43f6:	08 95       	ret
    43f8:	0c 94 be 22 	jmp	0x457c	; 0x457c <__fp_zero>
    43fc:	67 2f       	mov	r22, r23
    43fe:	78 2f       	mov	r23, r24
    4400:	88 27       	eor	r24, r24
    4402:	b8 5f       	subi	r27, 0xF8	; 248
    4404:	39 f0       	breq	.+14     	; 0x4414 <__fixunssfsi+0x4c>
    4406:	b9 3f       	cpi	r27, 0xF9	; 249
    4408:	cc f3       	brlt	.-14     	; 0x43fc <__fixunssfsi+0x34>
    440a:	86 95       	lsr	r24
    440c:	77 95       	ror	r23
    440e:	67 95       	ror	r22
    4410:	b3 95       	inc	r27
    4412:	d9 f7       	brne	.-10     	; 0x440a <__fixunssfsi+0x42>
    4414:	3e f4       	brtc	.+14     	; 0x4424 <__fixunssfsi+0x5c>
    4416:	90 95       	com	r25
    4418:	80 95       	com	r24
    441a:	70 95       	com	r23
    441c:	61 95       	neg	r22
    441e:	7f 4f       	sbci	r23, 0xFF	; 255
    4420:	8f 4f       	sbci	r24, 0xFF	; 255
    4422:	9f 4f       	sbci	r25, 0xFF	; 255
    4424:	08 95       	ret

00004426 <__floatunsisf>:
    4426:	e8 94       	clt
    4428:	09 c0       	rjmp	.+18     	; 0x443c <__floatsisf+0x12>

0000442a <__floatsisf>:
    442a:	97 fb       	bst	r25, 7
    442c:	3e f4       	brtc	.+14     	; 0x443c <__floatsisf+0x12>
    442e:	90 95       	com	r25
    4430:	80 95       	com	r24
    4432:	70 95       	com	r23
    4434:	61 95       	neg	r22
    4436:	7f 4f       	sbci	r23, 0xFF	; 255
    4438:	8f 4f       	sbci	r24, 0xFF	; 255
    443a:	9f 4f       	sbci	r25, 0xFF	; 255
    443c:	99 23       	and	r25, r25
    443e:	a9 f0       	breq	.+42     	; 0x446a <__floatsisf+0x40>
    4440:	f9 2f       	mov	r31, r25
    4442:	96 e9       	ldi	r25, 0x96	; 150
    4444:	bb 27       	eor	r27, r27
    4446:	93 95       	inc	r25
    4448:	f6 95       	lsr	r31
    444a:	87 95       	ror	r24
    444c:	77 95       	ror	r23
    444e:	67 95       	ror	r22
    4450:	b7 95       	ror	r27
    4452:	f1 11       	cpse	r31, r1
    4454:	f8 cf       	rjmp	.-16     	; 0x4446 <__floatsisf+0x1c>
    4456:	fa f4       	brpl	.+62     	; 0x4496 <__floatsisf+0x6c>
    4458:	bb 0f       	add	r27, r27
    445a:	11 f4       	brne	.+4      	; 0x4460 <__floatsisf+0x36>
    445c:	60 ff       	sbrs	r22, 0
    445e:	1b c0       	rjmp	.+54     	; 0x4496 <__floatsisf+0x6c>
    4460:	6f 5f       	subi	r22, 0xFF	; 255
    4462:	7f 4f       	sbci	r23, 0xFF	; 255
    4464:	8f 4f       	sbci	r24, 0xFF	; 255
    4466:	9f 4f       	sbci	r25, 0xFF	; 255
    4468:	16 c0       	rjmp	.+44     	; 0x4496 <__floatsisf+0x6c>
    446a:	88 23       	and	r24, r24
    446c:	11 f0       	breq	.+4      	; 0x4472 <__floatsisf+0x48>
    446e:	96 e9       	ldi	r25, 0x96	; 150
    4470:	11 c0       	rjmp	.+34     	; 0x4494 <__floatsisf+0x6a>
    4472:	77 23       	and	r23, r23
    4474:	21 f0       	breq	.+8      	; 0x447e <__floatsisf+0x54>
    4476:	9e e8       	ldi	r25, 0x8E	; 142
    4478:	87 2f       	mov	r24, r23
    447a:	76 2f       	mov	r23, r22
    447c:	05 c0       	rjmp	.+10     	; 0x4488 <__floatsisf+0x5e>
    447e:	66 23       	and	r22, r22
    4480:	71 f0       	breq	.+28     	; 0x449e <__floatsisf+0x74>
    4482:	96 e8       	ldi	r25, 0x86	; 134
    4484:	86 2f       	mov	r24, r22
    4486:	70 e0       	ldi	r23, 0x00	; 0
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	2a f0       	brmi	.+10     	; 0x4496 <__floatsisf+0x6c>
    448c:	9a 95       	dec	r25
    448e:	66 0f       	add	r22, r22
    4490:	77 1f       	adc	r23, r23
    4492:	88 1f       	adc	r24, r24
    4494:	da f7       	brpl	.-10     	; 0x448c <__floatsisf+0x62>
    4496:	88 0f       	add	r24, r24
    4498:	96 95       	lsr	r25
    449a:	87 95       	ror	r24
    449c:	97 f9       	bld	r25, 7
    449e:	08 95       	ret

000044a0 <__fp_cmp>:
    44a0:	99 0f       	add	r25, r25
    44a2:	00 08       	sbc	r0, r0
    44a4:	55 0f       	add	r21, r21
    44a6:	aa 0b       	sbc	r26, r26
    44a8:	e0 e8       	ldi	r30, 0x80	; 128
    44aa:	fe ef       	ldi	r31, 0xFE	; 254
    44ac:	16 16       	cp	r1, r22
    44ae:	17 06       	cpc	r1, r23
    44b0:	e8 07       	cpc	r30, r24
    44b2:	f9 07       	cpc	r31, r25
    44b4:	c0 f0       	brcs	.+48     	; 0x44e6 <__fp_cmp+0x46>
    44b6:	12 16       	cp	r1, r18
    44b8:	13 06       	cpc	r1, r19
    44ba:	e4 07       	cpc	r30, r20
    44bc:	f5 07       	cpc	r31, r21
    44be:	98 f0       	brcs	.+38     	; 0x44e6 <__fp_cmp+0x46>
    44c0:	62 1b       	sub	r22, r18
    44c2:	73 0b       	sbc	r23, r19
    44c4:	84 0b       	sbc	r24, r20
    44c6:	95 0b       	sbc	r25, r21
    44c8:	39 f4       	brne	.+14     	; 0x44d8 <__fp_cmp+0x38>
    44ca:	0a 26       	eor	r0, r26
    44cc:	61 f0       	breq	.+24     	; 0x44e6 <__fp_cmp+0x46>
    44ce:	23 2b       	or	r18, r19
    44d0:	24 2b       	or	r18, r20
    44d2:	25 2b       	or	r18, r21
    44d4:	21 f4       	brne	.+8      	; 0x44de <__fp_cmp+0x3e>
    44d6:	08 95       	ret
    44d8:	0a 26       	eor	r0, r26
    44da:	09 f4       	brne	.+2      	; 0x44de <__fp_cmp+0x3e>
    44dc:	a1 40       	sbci	r26, 0x01	; 1
    44de:	a6 95       	lsr	r26
    44e0:	8f ef       	ldi	r24, 0xFF	; 255
    44e2:	81 1d       	adc	r24, r1
    44e4:	81 1d       	adc	r24, r1
    44e6:	08 95       	ret

000044e8 <__fp_inf>:
    44e8:	97 f9       	bld	r25, 7
    44ea:	9f 67       	ori	r25, 0x7F	; 127
    44ec:	80 e8       	ldi	r24, 0x80	; 128
    44ee:	70 e0       	ldi	r23, 0x00	; 0
    44f0:	60 e0       	ldi	r22, 0x00	; 0
    44f2:	08 95       	ret

000044f4 <__fp_nan>:
    44f4:	9f ef       	ldi	r25, 0xFF	; 255
    44f6:	80 ec       	ldi	r24, 0xC0	; 192
    44f8:	08 95       	ret

000044fa <__fp_pscA>:
    44fa:	00 24       	eor	r0, r0
    44fc:	0a 94       	dec	r0
    44fe:	16 16       	cp	r1, r22
    4500:	17 06       	cpc	r1, r23
    4502:	18 06       	cpc	r1, r24
    4504:	09 06       	cpc	r0, r25
    4506:	08 95       	ret

00004508 <__fp_pscB>:
    4508:	00 24       	eor	r0, r0
    450a:	0a 94       	dec	r0
    450c:	12 16       	cp	r1, r18
    450e:	13 06       	cpc	r1, r19
    4510:	14 06       	cpc	r1, r20
    4512:	05 06       	cpc	r0, r21
    4514:	08 95       	ret

00004516 <__fp_round>:
    4516:	09 2e       	mov	r0, r25
    4518:	03 94       	inc	r0
    451a:	00 0c       	add	r0, r0
    451c:	11 f4       	brne	.+4      	; 0x4522 <__fp_round+0xc>
    451e:	88 23       	and	r24, r24
    4520:	52 f0       	brmi	.+20     	; 0x4536 <__fp_round+0x20>
    4522:	bb 0f       	add	r27, r27
    4524:	40 f4       	brcc	.+16     	; 0x4536 <__fp_round+0x20>
    4526:	bf 2b       	or	r27, r31
    4528:	11 f4       	brne	.+4      	; 0x452e <__fp_round+0x18>
    452a:	60 ff       	sbrs	r22, 0
    452c:	04 c0       	rjmp	.+8      	; 0x4536 <__fp_round+0x20>
    452e:	6f 5f       	subi	r22, 0xFF	; 255
    4530:	7f 4f       	sbci	r23, 0xFF	; 255
    4532:	8f 4f       	sbci	r24, 0xFF	; 255
    4534:	9f 4f       	sbci	r25, 0xFF	; 255
    4536:	08 95       	ret

00004538 <__fp_split3>:
    4538:	57 fd       	sbrc	r21, 7
    453a:	90 58       	subi	r25, 0x80	; 128
    453c:	44 0f       	add	r20, r20
    453e:	55 1f       	adc	r21, r21
    4540:	59 f0       	breq	.+22     	; 0x4558 <__fp_splitA+0x10>
    4542:	5f 3f       	cpi	r21, 0xFF	; 255
    4544:	71 f0       	breq	.+28     	; 0x4562 <__fp_splitA+0x1a>
    4546:	47 95       	ror	r20

00004548 <__fp_splitA>:
    4548:	88 0f       	add	r24, r24
    454a:	97 fb       	bst	r25, 7
    454c:	99 1f       	adc	r25, r25
    454e:	61 f0       	breq	.+24     	; 0x4568 <__fp_splitA+0x20>
    4550:	9f 3f       	cpi	r25, 0xFF	; 255
    4552:	79 f0       	breq	.+30     	; 0x4572 <__fp_splitA+0x2a>
    4554:	87 95       	ror	r24
    4556:	08 95       	ret
    4558:	12 16       	cp	r1, r18
    455a:	13 06       	cpc	r1, r19
    455c:	14 06       	cpc	r1, r20
    455e:	55 1f       	adc	r21, r21
    4560:	f2 cf       	rjmp	.-28     	; 0x4546 <__fp_split3+0xe>
    4562:	46 95       	lsr	r20
    4564:	f1 df       	rcall	.-30     	; 0x4548 <__fp_splitA>
    4566:	08 c0       	rjmp	.+16     	; 0x4578 <__fp_splitA+0x30>
    4568:	16 16       	cp	r1, r22
    456a:	17 06       	cpc	r1, r23
    456c:	18 06       	cpc	r1, r24
    456e:	99 1f       	adc	r25, r25
    4570:	f1 cf       	rjmp	.-30     	; 0x4554 <__fp_splitA+0xc>
    4572:	86 95       	lsr	r24
    4574:	71 05       	cpc	r23, r1
    4576:	61 05       	cpc	r22, r1
    4578:	08 94       	sec
    457a:	08 95       	ret

0000457c <__fp_zero>:
    457c:	e8 94       	clt

0000457e <__fp_szero>:
    457e:	bb 27       	eor	r27, r27
    4580:	66 27       	eor	r22, r22
    4582:	77 27       	eor	r23, r23
    4584:	cb 01       	movw	r24, r22
    4586:	97 f9       	bld	r25, 7
    4588:	08 95       	ret

0000458a <__gesf2>:
    458a:	0e 94 50 22 	call	0x44a0	; 0x44a0 <__fp_cmp>
    458e:	08 f4       	brcc	.+2      	; 0x4592 <__gesf2+0x8>
    4590:	8f ef       	ldi	r24, 0xFF	; 255
    4592:	08 95       	ret

00004594 <__mulsf3>:
    4594:	0e 94 dd 22 	call	0x45ba	; 0x45ba <__mulsf3x>
    4598:	0c 94 8b 22 	jmp	0x4516	; 0x4516 <__fp_round>
    459c:	0e 94 7d 22 	call	0x44fa	; 0x44fa <__fp_pscA>
    45a0:	38 f0       	brcs	.+14     	; 0x45b0 <__mulsf3+0x1c>
    45a2:	0e 94 84 22 	call	0x4508	; 0x4508 <__fp_pscB>
    45a6:	20 f0       	brcs	.+8      	; 0x45b0 <__mulsf3+0x1c>
    45a8:	95 23       	and	r25, r21
    45aa:	11 f0       	breq	.+4      	; 0x45b0 <__mulsf3+0x1c>
    45ac:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__fp_inf>
    45b0:	0c 94 7a 22 	jmp	0x44f4	; 0x44f4 <__fp_nan>
    45b4:	11 24       	eor	r1, r1
    45b6:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_szero>

000045ba <__mulsf3x>:
    45ba:	0e 94 9c 22 	call	0x4538	; 0x4538 <__fp_split3>
    45be:	70 f3       	brcs	.-36     	; 0x459c <__mulsf3+0x8>

000045c0 <__mulsf3_pse>:
    45c0:	95 9f       	mul	r25, r21
    45c2:	c1 f3       	breq	.-16     	; 0x45b4 <__mulsf3+0x20>
    45c4:	95 0f       	add	r25, r21
    45c6:	50 e0       	ldi	r21, 0x00	; 0
    45c8:	55 1f       	adc	r21, r21
    45ca:	62 9f       	mul	r22, r18
    45cc:	f0 01       	movw	r30, r0
    45ce:	72 9f       	mul	r23, r18
    45d0:	bb 27       	eor	r27, r27
    45d2:	f0 0d       	add	r31, r0
    45d4:	b1 1d       	adc	r27, r1
    45d6:	63 9f       	mul	r22, r19
    45d8:	aa 27       	eor	r26, r26
    45da:	f0 0d       	add	r31, r0
    45dc:	b1 1d       	adc	r27, r1
    45de:	aa 1f       	adc	r26, r26
    45e0:	64 9f       	mul	r22, r20
    45e2:	66 27       	eor	r22, r22
    45e4:	b0 0d       	add	r27, r0
    45e6:	a1 1d       	adc	r26, r1
    45e8:	66 1f       	adc	r22, r22
    45ea:	82 9f       	mul	r24, r18
    45ec:	22 27       	eor	r18, r18
    45ee:	b0 0d       	add	r27, r0
    45f0:	a1 1d       	adc	r26, r1
    45f2:	62 1f       	adc	r22, r18
    45f4:	73 9f       	mul	r23, r19
    45f6:	b0 0d       	add	r27, r0
    45f8:	a1 1d       	adc	r26, r1
    45fa:	62 1f       	adc	r22, r18
    45fc:	83 9f       	mul	r24, r19
    45fe:	a0 0d       	add	r26, r0
    4600:	61 1d       	adc	r22, r1
    4602:	22 1f       	adc	r18, r18
    4604:	74 9f       	mul	r23, r20
    4606:	33 27       	eor	r19, r19
    4608:	a0 0d       	add	r26, r0
    460a:	61 1d       	adc	r22, r1
    460c:	23 1f       	adc	r18, r19
    460e:	84 9f       	mul	r24, r20
    4610:	60 0d       	add	r22, r0
    4612:	21 1d       	adc	r18, r1
    4614:	82 2f       	mov	r24, r18
    4616:	76 2f       	mov	r23, r22
    4618:	6a 2f       	mov	r22, r26
    461a:	11 24       	eor	r1, r1
    461c:	9f 57       	subi	r25, 0x7F	; 127
    461e:	50 40       	sbci	r21, 0x00	; 0
    4620:	9a f0       	brmi	.+38     	; 0x4648 <__mulsf3_pse+0x88>
    4622:	f1 f0       	breq	.+60     	; 0x4660 <__mulsf3_pse+0xa0>
    4624:	88 23       	and	r24, r24
    4626:	4a f0       	brmi	.+18     	; 0x463a <__mulsf3_pse+0x7a>
    4628:	ee 0f       	add	r30, r30
    462a:	ff 1f       	adc	r31, r31
    462c:	bb 1f       	adc	r27, r27
    462e:	66 1f       	adc	r22, r22
    4630:	77 1f       	adc	r23, r23
    4632:	88 1f       	adc	r24, r24
    4634:	91 50       	subi	r25, 0x01	; 1
    4636:	50 40       	sbci	r21, 0x00	; 0
    4638:	a9 f7       	brne	.-22     	; 0x4624 <__mulsf3_pse+0x64>
    463a:	9e 3f       	cpi	r25, 0xFE	; 254
    463c:	51 05       	cpc	r21, r1
    463e:	80 f0       	brcs	.+32     	; 0x4660 <__mulsf3_pse+0xa0>
    4640:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__fp_inf>
    4644:	0c 94 bf 22 	jmp	0x457e	; 0x457e <__fp_szero>
    4648:	5f 3f       	cpi	r21, 0xFF	; 255
    464a:	e4 f3       	brlt	.-8      	; 0x4644 <__mulsf3_pse+0x84>
    464c:	98 3e       	cpi	r25, 0xE8	; 232
    464e:	d4 f3       	brlt	.-12     	; 0x4644 <__mulsf3_pse+0x84>
    4650:	86 95       	lsr	r24
    4652:	77 95       	ror	r23
    4654:	67 95       	ror	r22
    4656:	b7 95       	ror	r27
    4658:	f7 95       	ror	r31
    465a:	e7 95       	ror	r30
    465c:	9f 5f       	subi	r25, 0xFF	; 255
    465e:	c1 f7       	brne	.-16     	; 0x4650 <__mulsf3_pse+0x90>
    4660:	fe 2b       	or	r31, r30
    4662:	88 0f       	add	r24, r24
    4664:	91 1d       	adc	r25, r1
    4666:	96 95       	lsr	r25
    4668:	87 95       	ror	r24
    466a:	97 f9       	bld	r25, 7
    466c:	08 95       	ret

0000466e <__divmodhi4>:
    466e:	97 fb       	bst	r25, 7
    4670:	07 2e       	mov	r0, r23
    4672:	16 f4       	brtc	.+4      	; 0x4678 <__divmodhi4+0xa>
    4674:	00 94       	com	r0
    4676:	07 d0       	rcall	.+14     	; 0x4686 <__divmodhi4_neg1>
    4678:	77 fd       	sbrc	r23, 7
    467a:	09 d0       	rcall	.+18     	; 0x468e <__divmodhi4_neg2>
    467c:	0e 94 7f 23 	call	0x46fe	; 0x46fe <__udivmodhi4>
    4680:	07 fc       	sbrc	r0, 7
    4682:	05 d0       	rcall	.+10     	; 0x468e <__divmodhi4_neg2>
    4684:	3e f4       	brtc	.+14     	; 0x4694 <__divmodhi4_exit>

00004686 <__divmodhi4_neg1>:
    4686:	90 95       	com	r25
    4688:	81 95       	neg	r24
    468a:	9f 4f       	sbci	r25, 0xFF	; 255
    468c:	08 95       	ret

0000468e <__divmodhi4_neg2>:
    468e:	70 95       	com	r23
    4690:	61 95       	neg	r22
    4692:	7f 4f       	sbci	r23, 0xFF	; 255

00004694 <__divmodhi4_exit>:
    4694:	08 95       	ret

00004696 <__divmodsi4>:
    4696:	05 2e       	mov	r0, r21
    4698:	97 fb       	bst	r25, 7
    469a:	1e f4       	brtc	.+6      	; 0x46a2 <__divmodsi4+0xc>
    469c:	00 94       	com	r0
    469e:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__negsi2>
    46a2:	57 fd       	sbrc	r21, 7
    46a4:	07 d0       	rcall	.+14     	; 0x46b4 <__divmodsi4_neg2>
    46a6:	0e 94 93 23 	call	0x4726	; 0x4726 <__udivmodsi4>
    46aa:	07 fc       	sbrc	r0, 7
    46ac:	03 d0       	rcall	.+6      	; 0x46b4 <__divmodsi4_neg2>
    46ae:	4e f4       	brtc	.+18     	; 0x46c2 <__divmodsi4_exit>
    46b0:	0c 94 62 23 	jmp	0x46c4	; 0x46c4 <__negsi2>

000046b4 <__divmodsi4_neg2>:
    46b4:	50 95       	com	r21
    46b6:	40 95       	com	r20
    46b8:	30 95       	com	r19
    46ba:	21 95       	neg	r18
    46bc:	3f 4f       	sbci	r19, 0xFF	; 255
    46be:	4f 4f       	sbci	r20, 0xFF	; 255
    46c0:	5f 4f       	sbci	r21, 0xFF	; 255

000046c2 <__divmodsi4_exit>:
    46c2:	08 95       	ret

000046c4 <__negsi2>:
    46c4:	90 95       	com	r25
    46c6:	80 95       	com	r24
    46c8:	70 95       	com	r23
    46ca:	61 95       	neg	r22
    46cc:	7f 4f       	sbci	r23, 0xFF	; 255
    46ce:	8f 4f       	sbci	r24, 0xFF	; 255
    46d0:	9f 4f       	sbci	r25, 0xFF	; 255
    46d2:	08 95       	ret

000046d4 <__tablejump2__>:
    46d4:	ee 0f       	add	r30, r30
    46d6:	ff 1f       	adc	r31, r31
    46d8:	05 90       	lpm	r0, Z+
    46da:	f4 91       	lpm	r31, Z
    46dc:	e0 2d       	mov	r30, r0
    46de:	09 94       	ijmp

000046e0 <__umulhisi3>:
    46e0:	a2 9f       	mul	r26, r18
    46e2:	b0 01       	movw	r22, r0
    46e4:	b3 9f       	mul	r27, r19
    46e6:	c0 01       	movw	r24, r0
    46e8:	a3 9f       	mul	r26, r19
    46ea:	70 0d       	add	r23, r0
    46ec:	81 1d       	adc	r24, r1
    46ee:	11 24       	eor	r1, r1
    46f0:	91 1d       	adc	r25, r1
    46f2:	b2 9f       	mul	r27, r18
    46f4:	70 0d       	add	r23, r0
    46f6:	81 1d       	adc	r24, r1
    46f8:	11 24       	eor	r1, r1
    46fa:	91 1d       	adc	r25, r1
    46fc:	08 95       	ret

000046fe <__udivmodhi4>:
    46fe:	aa 1b       	sub	r26, r26
    4700:	bb 1b       	sub	r27, r27
    4702:	51 e1       	ldi	r21, 0x11	; 17
    4704:	07 c0       	rjmp	.+14     	; 0x4714 <__udivmodhi4_ep>

00004706 <__udivmodhi4_loop>:
    4706:	aa 1f       	adc	r26, r26
    4708:	bb 1f       	adc	r27, r27
    470a:	a6 17       	cp	r26, r22
    470c:	b7 07       	cpc	r27, r23
    470e:	10 f0       	brcs	.+4      	; 0x4714 <__udivmodhi4_ep>
    4710:	a6 1b       	sub	r26, r22
    4712:	b7 0b       	sbc	r27, r23

00004714 <__udivmodhi4_ep>:
    4714:	88 1f       	adc	r24, r24
    4716:	99 1f       	adc	r25, r25
    4718:	5a 95       	dec	r21
    471a:	a9 f7       	brne	.-22     	; 0x4706 <__udivmodhi4_loop>
    471c:	80 95       	com	r24
    471e:	90 95       	com	r25
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	08 95       	ret

00004726 <__udivmodsi4>:
    4726:	a1 e2       	ldi	r26, 0x21	; 33
    4728:	1a 2e       	mov	r1, r26
    472a:	aa 1b       	sub	r26, r26
    472c:	bb 1b       	sub	r27, r27
    472e:	fd 01       	movw	r30, r26
    4730:	0d c0       	rjmp	.+26     	; 0x474c <__udivmodsi4_ep>

00004732 <__udivmodsi4_loop>:
    4732:	aa 1f       	adc	r26, r26
    4734:	bb 1f       	adc	r27, r27
    4736:	ee 1f       	adc	r30, r30
    4738:	ff 1f       	adc	r31, r31
    473a:	a2 17       	cp	r26, r18
    473c:	b3 07       	cpc	r27, r19
    473e:	e4 07       	cpc	r30, r20
    4740:	f5 07       	cpc	r31, r21
    4742:	20 f0       	brcs	.+8      	; 0x474c <__udivmodsi4_ep>
    4744:	a2 1b       	sub	r26, r18
    4746:	b3 0b       	sbc	r27, r19
    4748:	e4 0b       	sbc	r30, r20
    474a:	f5 0b       	sbc	r31, r21

0000474c <__udivmodsi4_ep>:
    474c:	66 1f       	adc	r22, r22
    474e:	77 1f       	adc	r23, r23
    4750:	88 1f       	adc	r24, r24
    4752:	99 1f       	adc	r25, r25
    4754:	1a 94       	dec	r1
    4756:	69 f7       	brne	.-38     	; 0x4732 <__udivmodsi4_loop>
    4758:	60 95       	com	r22
    475a:	70 95       	com	r23
    475c:	80 95       	com	r24
    475e:	90 95       	com	r25
    4760:	9b 01       	movw	r18, r22
    4762:	ac 01       	movw	r20, r24
    4764:	bd 01       	movw	r22, r26
    4766:	cf 01       	movw	r24, r30
    4768:	08 95       	ret

0000476a <itoa>:
    476a:	45 32       	cpi	r20, 0x25	; 37
    476c:	51 05       	cpc	r21, r1
    476e:	20 f4       	brcc	.+8      	; 0x4778 <itoa+0xe>
    4770:	42 30       	cpi	r20, 0x02	; 2
    4772:	10 f0       	brcs	.+4      	; 0x4778 <itoa+0xe>
    4774:	0c 94 c0 23 	jmp	0x4780	; 0x4780 <__itoa_ncheck>
    4778:	fb 01       	movw	r30, r22
    477a:	10 82       	st	Z, r1
    477c:	cb 01       	movw	r24, r22
    477e:	08 95       	ret

00004780 <__itoa_ncheck>:
    4780:	bb 27       	eor	r27, r27
    4782:	4a 30       	cpi	r20, 0x0A	; 10
    4784:	31 f4       	brne	.+12     	; 0x4792 <__itoa_ncheck+0x12>
    4786:	99 23       	and	r25, r25
    4788:	22 f4       	brpl	.+8      	; 0x4792 <__itoa_ncheck+0x12>
    478a:	bd e2       	ldi	r27, 0x2D	; 45
    478c:	90 95       	com	r25
    478e:	81 95       	neg	r24
    4790:	9f 4f       	sbci	r25, 0xFF	; 255
    4792:	0c 94 cc 23 	jmp	0x4798	; 0x4798 <__utoa_common>

00004796 <__utoa_ncheck>:
    4796:	bb 27       	eor	r27, r27

00004798 <__utoa_common>:
    4798:	fb 01       	movw	r30, r22
    479a:	55 27       	eor	r21, r21
    479c:	aa 27       	eor	r26, r26
    479e:	88 0f       	add	r24, r24
    47a0:	99 1f       	adc	r25, r25
    47a2:	aa 1f       	adc	r26, r26
    47a4:	a4 17       	cp	r26, r20
    47a6:	10 f0       	brcs	.+4      	; 0x47ac <__utoa_common+0x14>
    47a8:	a4 1b       	sub	r26, r20
    47aa:	83 95       	inc	r24
    47ac:	50 51       	subi	r21, 0x10	; 16
    47ae:	b9 f7       	brne	.-18     	; 0x479e <__utoa_common+0x6>
    47b0:	a0 5d       	subi	r26, 0xD0	; 208
    47b2:	aa 33       	cpi	r26, 0x3A	; 58
    47b4:	08 f0       	brcs	.+2      	; 0x47b8 <__utoa_common+0x20>
    47b6:	a9 5d       	subi	r26, 0xD9	; 217
    47b8:	a1 93       	st	Z+, r26
    47ba:	00 97       	sbiw	r24, 0x00	; 0
    47bc:	79 f7       	brne	.-34     	; 0x479c <__utoa_common+0x4>
    47be:	b1 11       	cpse	r27, r1
    47c0:	b1 93       	st	Z+, r27
    47c2:	11 92       	st	Z+, r1
    47c4:	cb 01       	movw	r24, r22
    47c6:	0c 94 fe 25 	jmp	0x4bfc	; 0x4bfc <strrev>

000047ca <sprintf>:
    47ca:	ae e0       	ldi	r26, 0x0E	; 14
    47cc:	b0 e0       	ldi	r27, 0x00	; 0
    47ce:	eb ee       	ldi	r30, 0xEB	; 235
    47d0:	f3 e2       	ldi	r31, 0x23	; 35
    47d2:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__prologue_saves__+0x1c>
    47d6:	0d 89       	ldd	r16, Y+21	; 0x15
    47d8:	1e 89       	ldd	r17, Y+22	; 0x16
    47da:	86 e0       	ldi	r24, 0x06	; 6
    47dc:	8c 83       	std	Y+4, r24	; 0x04
    47de:	1a 83       	std	Y+2, r17	; 0x02
    47e0:	09 83       	std	Y+1, r16	; 0x01
    47e2:	8f ef       	ldi	r24, 0xFF	; 255
    47e4:	9f e7       	ldi	r25, 0x7F	; 127
    47e6:	9e 83       	std	Y+6, r25	; 0x06
    47e8:	8d 83       	std	Y+5, r24	; 0x05
    47ea:	ae 01       	movw	r20, r28
    47ec:	47 5e       	subi	r20, 0xE7	; 231
    47ee:	5f 4f       	sbci	r21, 0xFF	; 255
    47f0:	6f 89       	ldd	r22, Y+23	; 0x17
    47f2:	78 8d       	ldd	r23, Y+24	; 0x18
    47f4:	ce 01       	movw	r24, r28
    47f6:	01 96       	adiw	r24, 0x01	; 1
    47f8:	0e 94 07 24 	call	0x480e	; 0x480e <vfprintf>
    47fc:	ef 81       	ldd	r30, Y+7	; 0x07
    47fe:	f8 85       	ldd	r31, Y+8	; 0x08
    4800:	e0 0f       	add	r30, r16
    4802:	f1 1f       	adc	r31, r17
    4804:	10 82       	st	Z, r1
    4806:	2e 96       	adiw	r28, 0x0e	; 14
    4808:	e4 e0       	ldi	r30, 0x04	; 4
    480a:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__epilogue_restores__+0x1c>

0000480e <vfprintf>:
    480e:	ab e0       	ldi	r26, 0x0B	; 11
    4810:	b0 e0       	ldi	r27, 0x00	; 0
    4812:	ed e0       	ldi	r30, 0x0D	; 13
    4814:	f4 e2       	ldi	r31, 0x24	; 36
    4816:	0c 94 a8 26 	jmp	0x4d50	; 0x4d50 <__prologue_saves__>
    481a:	6c 01       	movw	r12, r24
    481c:	7b 01       	movw	r14, r22
    481e:	8a 01       	movw	r16, r20
    4820:	fc 01       	movw	r30, r24
    4822:	17 82       	std	Z+7, r1	; 0x07
    4824:	16 82       	std	Z+6, r1	; 0x06
    4826:	83 81       	ldd	r24, Z+3	; 0x03
    4828:	81 ff       	sbrs	r24, 1
    482a:	cc c1       	rjmp	.+920    	; 0x4bc4 <vfprintf+0x3b6>
    482c:	ce 01       	movw	r24, r28
    482e:	01 96       	adiw	r24, 0x01	; 1
    4830:	3c 01       	movw	r6, r24
    4832:	f6 01       	movw	r30, r12
    4834:	93 81       	ldd	r25, Z+3	; 0x03
    4836:	f7 01       	movw	r30, r14
    4838:	93 fd       	sbrc	r25, 3
    483a:	85 91       	lpm	r24, Z+
    483c:	93 ff       	sbrs	r25, 3
    483e:	81 91       	ld	r24, Z+
    4840:	7f 01       	movw	r14, r30
    4842:	88 23       	and	r24, r24
    4844:	09 f4       	brne	.+2      	; 0x4848 <vfprintf+0x3a>
    4846:	ba c1       	rjmp	.+884    	; 0x4bbc <vfprintf+0x3ae>
    4848:	85 32       	cpi	r24, 0x25	; 37
    484a:	39 f4       	brne	.+14     	; 0x485a <vfprintf+0x4c>
    484c:	93 fd       	sbrc	r25, 3
    484e:	85 91       	lpm	r24, Z+
    4850:	93 ff       	sbrs	r25, 3
    4852:	81 91       	ld	r24, Z+
    4854:	7f 01       	movw	r14, r30
    4856:	85 32       	cpi	r24, 0x25	; 37
    4858:	29 f4       	brne	.+10     	; 0x4864 <vfprintf+0x56>
    485a:	b6 01       	movw	r22, r12
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <fputc>
    4862:	e7 cf       	rjmp	.-50     	; 0x4832 <vfprintf+0x24>
    4864:	91 2c       	mov	r9, r1
    4866:	21 2c       	mov	r2, r1
    4868:	31 2c       	mov	r3, r1
    486a:	ff e1       	ldi	r31, 0x1F	; 31
    486c:	f3 15       	cp	r31, r3
    486e:	d8 f0       	brcs	.+54     	; 0x48a6 <vfprintf+0x98>
    4870:	8b 32       	cpi	r24, 0x2B	; 43
    4872:	79 f0       	breq	.+30     	; 0x4892 <vfprintf+0x84>
    4874:	38 f4       	brcc	.+14     	; 0x4884 <vfprintf+0x76>
    4876:	80 32       	cpi	r24, 0x20	; 32
    4878:	79 f0       	breq	.+30     	; 0x4898 <vfprintf+0x8a>
    487a:	83 32       	cpi	r24, 0x23	; 35
    487c:	a1 f4       	brne	.+40     	; 0x48a6 <vfprintf+0x98>
    487e:	23 2d       	mov	r18, r3
    4880:	20 61       	ori	r18, 0x10	; 16
    4882:	1d c0       	rjmp	.+58     	; 0x48be <vfprintf+0xb0>
    4884:	8d 32       	cpi	r24, 0x2D	; 45
    4886:	61 f0       	breq	.+24     	; 0x48a0 <vfprintf+0x92>
    4888:	80 33       	cpi	r24, 0x30	; 48
    488a:	69 f4       	brne	.+26     	; 0x48a6 <vfprintf+0x98>
    488c:	23 2d       	mov	r18, r3
    488e:	21 60       	ori	r18, 0x01	; 1
    4890:	16 c0       	rjmp	.+44     	; 0x48be <vfprintf+0xb0>
    4892:	83 2d       	mov	r24, r3
    4894:	82 60       	ori	r24, 0x02	; 2
    4896:	38 2e       	mov	r3, r24
    4898:	e3 2d       	mov	r30, r3
    489a:	e4 60       	ori	r30, 0x04	; 4
    489c:	3e 2e       	mov	r3, r30
    489e:	2a c0       	rjmp	.+84     	; 0x48f4 <vfprintf+0xe6>
    48a0:	f3 2d       	mov	r31, r3
    48a2:	f8 60       	ori	r31, 0x08	; 8
    48a4:	1d c0       	rjmp	.+58     	; 0x48e0 <vfprintf+0xd2>
    48a6:	37 fc       	sbrc	r3, 7
    48a8:	2d c0       	rjmp	.+90     	; 0x4904 <vfprintf+0xf6>
    48aa:	20 ed       	ldi	r18, 0xD0	; 208
    48ac:	28 0f       	add	r18, r24
    48ae:	2a 30       	cpi	r18, 0x0A	; 10
    48b0:	40 f0       	brcs	.+16     	; 0x48c2 <vfprintf+0xb4>
    48b2:	8e 32       	cpi	r24, 0x2E	; 46
    48b4:	b9 f4       	brne	.+46     	; 0x48e4 <vfprintf+0xd6>
    48b6:	36 fc       	sbrc	r3, 6
    48b8:	81 c1       	rjmp	.+770    	; 0x4bbc <vfprintf+0x3ae>
    48ba:	23 2d       	mov	r18, r3
    48bc:	20 64       	ori	r18, 0x40	; 64
    48be:	32 2e       	mov	r3, r18
    48c0:	19 c0       	rjmp	.+50     	; 0x48f4 <vfprintf+0xe6>
    48c2:	36 fe       	sbrs	r3, 6
    48c4:	06 c0       	rjmp	.+12     	; 0x48d2 <vfprintf+0xc4>
    48c6:	8a e0       	ldi	r24, 0x0A	; 10
    48c8:	98 9e       	mul	r9, r24
    48ca:	20 0d       	add	r18, r0
    48cc:	11 24       	eor	r1, r1
    48ce:	92 2e       	mov	r9, r18
    48d0:	11 c0       	rjmp	.+34     	; 0x48f4 <vfprintf+0xe6>
    48d2:	ea e0       	ldi	r30, 0x0A	; 10
    48d4:	2e 9e       	mul	r2, r30
    48d6:	20 0d       	add	r18, r0
    48d8:	11 24       	eor	r1, r1
    48da:	22 2e       	mov	r2, r18
    48dc:	f3 2d       	mov	r31, r3
    48de:	f0 62       	ori	r31, 0x20	; 32
    48e0:	3f 2e       	mov	r3, r31
    48e2:	08 c0       	rjmp	.+16     	; 0x48f4 <vfprintf+0xe6>
    48e4:	8c 36       	cpi	r24, 0x6C	; 108
    48e6:	21 f4       	brne	.+8      	; 0x48f0 <vfprintf+0xe2>
    48e8:	83 2d       	mov	r24, r3
    48ea:	80 68       	ori	r24, 0x80	; 128
    48ec:	38 2e       	mov	r3, r24
    48ee:	02 c0       	rjmp	.+4      	; 0x48f4 <vfprintf+0xe6>
    48f0:	88 36       	cpi	r24, 0x68	; 104
    48f2:	41 f4       	brne	.+16     	; 0x4904 <vfprintf+0xf6>
    48f4:	f7 01       	movw	r30, r14
    48f6:	93 fd       	sbrc	r25, 3
    48f8:	85 91       	lpm	r24, Z+
    48fa:	93 ff       	sbrs	r25, 3
    48fc:	81 91       	ld	r24, Z+
    48fe:	7f 01       	movw	r14, r30
    4900:	81 11       	cpse	r24, r1
    4902:	b3 cf       	rjmp	.-154    	; 0x486a <vfprintf+0x5c>
    4904:	98 2f       	mov	r25, r24
    4906:	9f 7d       	andi	r25, 0xDF	; 223
    4908:	95 54       	subi	r25, 0x45	; 69
    490a:	93 30       	cpi	r25, 0x03	; 3
    490c:	28 f4       	brcc	.+10     	; 0x4918 <vfprintf+0x10a>
    490e:	0c 5f       	subi	r16, 0xFC	; 252
    4910:	1f 4f       	sbci	r17, 0xFF	; 255
    4912:	9f e3       	ldi	r25, 0x3F	; 63
    4914:	99 83       	std	Y+1, r25	; 0x01
    4916:	0d c0       	rjmp	.+26     	; 0x4932 <vfprintf+0x124>
    4918:	83 36       	cpi	r24, 0x63	; 99
    491a:	31 f0       	breq	.+12     	; 0x4928 <vfprintf+0x11a>
    491c:	83 37       	cpi	r24, 0x73	; 115
    491e:	71 f0       	breq	.+28     	; 0x493c <vfprintf+0x12e>
    4920:	83 35       	cpi	r24, 0x53	; 83
    4922:	09 f0       	breq	.+2      	; 0x4926 <vfprintf+0x118>
    4924:	59 c0       	rjmp	.+178    	; 0x49d8 <vfprintf+0x1ca>
    4926:	21 c0       	rjmp	.+66     	; 0x496a <vfprintf+0x15c>
    4928:	f8 01       	movw	r30, r16
    492a:	80 81       	ld	r24, Z
    492c:	89 83       	std	Y+1, r24	; 0x01
    492e:	0e 5f       	subi	r16, 0xFE	; 254
    4930:	1f 4f       	sbci	r17, 0xFF	; 255
    4932:	88 24       	eor	r8, r8
    4934:	83 94       	inc	r8
    4936:	91 2c       	mov	r9, r1
    4938:	53 01       	movw	r10, r6
    493a:	13 c0       	rjmp	.+38     	; 0x4962 <vfprintf+0x154>
    493c:	28 01       	movw	r4, r16
    493e:	f2 e0       	ldi	r31, 0x02	; 2
    4940:	4f 0e       	add	r4, r31
    4942:	51 1c       	adc	r5, r1
    4944:	f8 01       	movw	r30, r16
    4946:	a0 80       	ld	r10, Z
    4948:	b1 80       	ldd	r11, Z+1	; 0x01
    494a:	36 fe       	sbrs	r3, 6
    494c:	03 c0       	rjmp	.+6      	; 0x4954 <vfprintf+0x146>
    494e:	69 2d       	mov	r22, r9
    4950:	70 e0       	ldi	r23, 0x00	; 0
    4952:	02 c0       	rjmp	.+4      	; 0x4958 <vfprintf+0x14a>
    4954:	6f ef       	ldi	r22, 0xFF	; 255
    4956:	7f ef       	ldi	r23, 0xFF	; 255
    4958:	c5 01       	movw	r24, r10
    495a:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <strnlen>
    495e:	4c 01       	movw	r8, r24
    4960:	82 01       	movw	r16, r4
    4962:	f3 2d       	mov	r31, r3
    4964:	ff 77       	andi	r31, 0x7F	; 127
    4966:	3f 2e       	mov	r3, r31
    4968:	16 c0       	rjmp	.+44     	; 0x4996 <vfprintf+0x188>
    496a:	28 01       	movw	r4, r16
    496c:	22 e0       	ldi	r18, 0x02	; 2
    496e:	42 0e       	add	r4, r18
    4970:	51 1c       	adc	r5, r1
    4972:	f8 01       	movw	r30, r16
    4974:	a0 80       	ld	r10, Z
    4976:	b1 80       	ldd	r11, Z+1	; 0x01
    4978:	36 fe       	sbrs	r3, 6
    497a:	03 c0       	rjmp	.+6      	; 0x4982 <vfprintf+0x174>
    497c:	69 2d       	mov	r22, r9
    497e:	70 e0       	ldi	r23, 0x00	; 0
    4980:	02 c0       	rjmp	.+4      	; 0x4986 <vfprintf+0x178>
    4982:	6f ef       	ldi	r22, 0xFF	; 255
    4984:	7f ef       	ldi	r23, 0xFF	; 255
    4986:	c5 01       	movw	r24, r10
    4988:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <strnlen_P>
    498c:	4c 01       	movw	r8, r24
    498e:	f3 2d       	mov	r31, r3
    4990:	f0 68       	ori	r31, 0x80	; 128
    4992:	3f 2e       	mov	r3, r31
    4994:	82 01       	movw	r16, r4
    4996:	33 fc       	sbrc	r3, 3
    4998:	1b c0       	rjmp	.+54     	; 0x49d0 <vfprintf+0x1c2>
    499a:	82 2d       	mov	r24, r2
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	88 16       	cp	r8, r24
    49a0:	99 06       	cpc	r9, r25
    49a2:	b0 f4       	brcc	.+44     	; 0x49d0 <vfprintf+0x1c2>
    49a4:	b6 01       	movw	r22, r12
    49a6:	80 e2       	ldi	r24, 0x20	; 32
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <fputc>
    49ae:	2a 94       	dec	r2
    49b0:	f4 cf       	rjmp	.-24     	; 0x499a <vfprintf+0x18c>
    49b2:	f5 01       	movw	r30, r10
    49b4:	37 fc       	sbrc	r3, 7
    49b6:	85 91       	lpm	r24, Z+
    49b8:	37 fe       	sbrs	r3, 7
    49ba:	81 91       	ld	r24, Z+
    49bc:	5f 01       	movw	r10, r30
    49be:	b6 01       	movw	r22, r12
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <fputc>
    49c6:	21 10       	cpse	r2, r1
    49c8:	2a 94       	dec	r2
    49ca:	21 e0       	ldi	r18, 0x01	; 1
    49cc:	82 1a       	sub	r8, r18
    49ce:	91 08       	sbc	r9, r1
    49d0:	81 14       	cp	r8, r1
    49d2:	91 04       	cpc	r9, r1
    49d4:	71 f7       	brne	.-36     	; 0x49b2 <vfprintf+0x1a4>
    49d6:	e8 c0       	rjmp	.+464    	; 0x4ba8 <vfprintf+0x39a>
    49d8:	84 36       	cpi	r24, 0x64	; 100
    49da:	11 f0       	breq	.+4      	; 0x49e0 <vfprintf+0x1d2>
    49dc:	89 36       	cpi	r24, 0x69	; 105
    49de:	41 f5       	brne	.+80     	; 0x4a30 <vfprintf+0x222>
    49e0:	f8 01       	movw	r30, r16
    49e2:	37 fe       	sbrs	r3, 7
    49e4:	07 c0       	rjmp	.+14     	; 0x49f4 <vfprintf+0x1e6>
    49e6:	60 81       	ld	r22, Z
    49e8:	71 81       	ldd	r23, Z+1	; 0x01
    49ea:	82 81       	ldd	r24, Z+2	; 0x02
    49ec:	93 81       	ldd	r25, Z+3	; 0x03
    49ee:	0c 5f       	subi	r16, 0xFC	; 252
    49f0:	1f 4f       	sbci	r17, 0xFF	; 255
    49f2:	08 c0       	rjmp	.+16     	; 0x4a04 <vfprintf+0x1f6>
    49f4:	60 81       	ld	r22, Z
    49f6:	71 81       	ldd	r23, Z+1	; 0x01
    49f8:	07 2e       	mov	r0, r23
    49fa:	00 0c       	add	r0, r0
    49fc:	88 0b       	sbc	r24, r24
    49fe:	99 0b       	sbc	r25, r25
    4a00:	0e 5f       	subi	r16, 0xFE	; 254
    4a02:	1f 4f       	sbci	r17, 0xFF	; 255
    4a04:	f3 2d       	mov	r31, r3
    4a06:	ff 76       	andi	r31, 0x6F	; 111
    4a08:	3f 2e       	mov	r3, r31
    4a0a:	97 ff       	sbrs	r25, 7
    4a0c:	09 c0       	rjmp	.+18     	; 0x4a20 <vfprintf+0x212>
    4a0e:	90 95       	com	r25
    4a10:	80 95       	com	r24
    4a12:	70 95       	com	r23
    4a14:	61 95       	neg	r22
    4a16:	7f 4f       	sbci	r23, 0xFF	; 255
    4a18:	8f 4f       	sbci	r24, 0xFF	; 255
    4a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    4a1c:	f0 68       	ori	r31, 0x80	; 128
    4a1e:	3f 2e       	mov	r3, r31
    4a20:	2a e0       	ldi	r18, 0x0A	; 10
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	a3 01       	movw	r20, r6
    4a26:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__ultoa_invert>
    4a2a:	88 2e       	mov	r8, r24
    4a2c:	86 18       	sub	r8, r6
    4a2e:	45 c0       	rjmp	.+138    	; 0x4aba <vfprintf+0x2ac>
    4a30:	85 37       	cpi	r24, 0x75	; 117
    4a32:	31 f4       	brne	.+12     	; 0x4a40 <vfprintf+0x232>
    4a34:	23 2d       	mov	r18, r3
    4a36:	2f 7e       	andi	r18, 0xEF	; 239
    4a38:	b2 2e       	mov	r11, r18
    4a3a:	2a e0       	ldi	r18, 0x0A	; 10
    4a3c:	30 e0       	ldi	r19, 0x00	; 0
    4a3e:	25 c0       	rjmp	.+74     	; 0x4a8a <vfprintf+0x27c>
    4a40:	93 2d       	mov	r25, r3
    4a42:	99 7f       	andi	r25, 0xF9	; 249
    4a44:	b9 2e       	mov	r11, r25
    4a46:	8f 36       	cpi	r24, 0x6F	; 111
    4a48:	c1 f0       	breq	.+48     	; 0x4a7a <vfprintf+0x26c>
    4a4a:	18 f4       	brcc	.+6      	; 0x4a52 <vfprintf+0x244>
    4a4c:	88 35       	cpi	r24, 0x58	; 88
    4a4e:	79 f0       	breq	.+30     	; 0x4a6e <vfprintf+0x260>
    4a50:	b5 c0       	rjmp	.+362    	; 0x4bbc <vfprintf+0x3ae>
    4a52:	80 37       	cpi	r24, 0x70	; 112
    4a54:	19 f0       	breq	.+6      	; 0x4a5c <vfprintf+0x24e>
    4a56:	88 37       	cpi	r24, 0x78	; 120
    4a58:	21 f0       	breq	.+8      	; 0x4a62 <vfprintf+0x254>
    4a5a:	b0 c0       	rjmp	.+352    	; 0x4bbc <vfprintf+0x3ae>
    4a5c:	e9 2f       	mov	r30, r25
    4a5e:	e0 61       	ori	r30, 0x10	; 16
    4a60:	be 2e       	mov	r11, r30
    4a62:	b4 fe       	sbrs	r11, 4
    4a64:	0d c0       	rjmp	.+26     	; 0x4a80 <vfprintf+0x272>
    4a66:	fb 2d       	mov	r31, r11
    4a68:	f4 60       	ori	r31, 0x04	; 4
    4a6a:	bf 2e       	mov	r11, r31
    4a6c:	09 c0       	rjmp	.+18     	; 0x4a80 <vfprintf+0x272>
    4a6e:	34 fe       	sbrs	r3, 4
    4a70:	0a c0       	rjmp	.+20     	; 0x4a86 <vfprintf+0x278>
    4a72:	29 2f       	mov	r18, r25
    4a74:	26 60       	ori	r18, 0x06	; 6
    4a76:	b2 2e       	mov	r11, r18
    4a78:	06 c0       	rjmp	.+12     	; 0x4a86 <vfprintf+0x278>
    4a7a:	28 e0       	ldi	r18, 0x08	; 8
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	05 c0       	rjmp	.+10     	; 0x4a8a <vfprintf+0x27c>
    4a80:	20 e1       	ldi	r18, 0x10	; 16
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	02 c0       	rjmp	.+4      	; 0x4a8a <vfprintf+0x27c>
    4a86:	20 e1       	ldi	r18, 0x10	; 16
    4a88:	32 e0       	ldi	r19, 0x02	; 2
    4a8a:	f8 01       	movw	r30, r16
    4a8c:	b7 fe       	sbrs	r11, 7
    4a8e:	07 c0       	rjmp	.+14     	; 0x4a9e <vfprintf+0x290>
    4a90:	60 81       	ld	r22, Z
    4a92:	71 81       	ldd	r23, Z+1	; 0x01
    4a94:	82 81       	ldd	r24, Z+2	; 0x02
    4a96:	93 81       	ldd	r25, Z+3	; 0x03
    4a98:	0c 5f       	subi	r16, 0xFC	; 252
    4a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a9c:	06 c0       	rjmp	.+12     	; 0x4aaa <vfprintf+0x29c>
    4a9e:	60 81       	ld	r22, Z
    4aa0:	71 81       	ldd	r23, Z+1	; 0x01
    4aa2:	80 e0       	ldi	r24, 0x00	; 0
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	0e 5f       	subi	r16, 0xFE	; 254
    4aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aaa:	a3 01       	movw	r20, r6
    4aac:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__ultoa_invert>
    4ab0:	88 2e       	mov	r8, r24
    4ab2:	86 18       	sub	r8, r6
    4ab4:	fb 2d       	mov	r31, r11
    4ab6:	ff 77       	andi	r31, 0x7F	; 127
    4ab8:	3f 2e       	mov	r3, r31
    4aba:	36 fe       	sbrs	r3, 6
    4abc:	0d c0       	rjmp	.+26     	; 0x4ad8 <vfprintf+0x2ca>
    4abe:	23 2d       	mov	r18, r3
    4ac0:	2e 7f       	andi	r18, 0xFE	; 254
    4ac2:	a2 2e       	mov	r10, r18
    4ac4:	89 14       	cp	r8, r9
    4ac6:	58 f4       	brcc	.+22     	; 0x4ade <vfprintf+0x2d0>
    4ac8:	34 fe       	sbrs	r3, 4
    4aca:	0b c0       	rjmp	.+22     	; 0x4ae2 <vfprintf+0x2d4>
    4acc:	32 fc       	sbrc	r3, 2
    4ace:	09 c0       	rjmp	.+18     	; 0x4ae2 <vfprintf+0x2d4>
    4ad0:	83 2d       	mov	r24, r3
    4ad2:	8e 7e       	andi	r24, 0xEE	; 238
    4ad4:	a8 2e       	mov	r10, r24
    4ad6:	05 c0       	rjmp	.+10     	; 0x4ae2 <vfprintf+0x2d4>
    4ad8:	b8 2c       	mov	r11, r8
    4ada:	a3 2c       	mov	r10, r3
    4adc:	03 c0       	rjmp	.+6      	; 0x4ae4 <vfprintf+0x2d6>
    4ade:	b8 2c       	mov	r11, r8
    4ae0:	01 c0       	rjmp	.+2      	; 0x4ae4 <vfprintf+0x2d6>
    4ae2:	b9 2c       	mov	r11, r9
    4ae4:	a4 fe       	sbrs	r10, 4
    4ae6:	0f c0       	rjmp	.+30     	; 0x4b06 <vfprintf+0x2f8>
    4ae8:	fe 01       	movw	r30, r28
    4aea:	e8 0d       	add	r30, r8
    4aec:	f1 1d       	adc	r31, r1
    4aee:	80 81       	ld	r24, Z
    4af0:	80 33       	cpi	r24, 0x30	; 48
    4af2:	21 f4       	brne	.+8      	; 0x4afc <vfprintf+0x2ee>
    4af4:	9a 2d       	mov	r25, r10
    4af6:	99 7e       	andi	r25, 0xE9	; 233
    4af8:	a9 2e       	mov	r10, r25
    4afa:	09 c0       	rjmp	.+18     	; 0x4b0e <vfprintf+0x300>
    4afc:	a2 fe       	sbrs	r10, 2
    4afe:	06 c0       	rjmp	.+12     	; 0x4b0c <vfprintf+0x2fe>
    4b00:	b3 94       	inc	r11
    4b02:	b3 94       	inc	r11
    4b04:	04 c0       	rjmp	.+8      	; 0x4b0e <vfprintf+0x300>
    4b06:	8a 2d       	mov	r24, r10
    4b08:	86 78       	andi	r24, 0x86	; 134
    4b0a:	09 f0       	breq	.+2      	; 0x4b0e <vfprintf+0x300>
    4b0c:	b3 94       	inc	r11
    4b0e:	a3 fc       	sbrc	r10, 3
    4b10:	11 c0       	rjmp	.+34     	; 0x4b34 <vfprintf+0x326>
    4b12:	a0 fe       	sbrs	r10, 0
    4b14:	06 c0       	rjmp	.+12     	; 0x4b22 <vfprintf+0x314>
    4b16:	b2 14       	cp	r11, r2
    4b18:	88 f4       	brcc	.+34     	; 0x4b3c <vfprintf+0x32e>
    4b1a:	28 0c       	add	r2, r8
    4b1c:	92 2c       	mov	r9, r2
    4b1e:	9b 18       	sub	r9, r11
    4b20:	0e c0       	rjmp	.+28     	; 0x4b3e <vfprintf+0x330>
    4b22:	b2 14       	cp	r11, r2
    4b24:	60 f4       	brcc	.+24     	; 0x4b3e <vfprintf+0x330>
    4b26:	b6 01       	movw	r22, r12
    4b28:	80 e2       	ldi	r24, 0x20	; 32
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <fputc>
    4b30:	b3 94       	inc	r11
    4b32:	f7 cf       	rjmp	.-18     	; 0x4b22 <vfprintf+0x314>
    4b34:	b2 14       	cp	r11, r2
    4b36:	18 f4       	brcc	.+6      	; 0x4b3e <vfprintf+0x330>
    4b38:	2b 18       	sub	r2, r11
    4b3a:	02 c0       	rjmp	.+4      	; 0x4b40 <vfprintf+0x332>
    4b3c:	98 2c       	mov	r9, r8
    4b3e:	21 2c       	mov	r2, r1
    4b40:	a4 fe       	sbrs	r10, 4
    4b42:	10 c0       	rjmp	.+32     	; 0x4b64 <vfprintf+0x356>
    4b44:	b6 01       	movw	r22, r12
    4b46:	80 e3       	ldi	r24, 0x30	; 48
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <fputc>
    4b4e:	a2 fe       	sbrs	r10, 2
    4b50:	17 c0       	rjmp	.+46     	; 0x4b80 <vfprintf+0x372>
    4b52:	a1 fc       	sbrc	r10, 1
    4b54:	03 c0       	rjmp	.+6      	; 0x4b5c <vfprintf+0x34e>
    4b56:	88 e7       	ldi	r24, 0x78	; 120
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	02 c0       	rjmp	.+4      	; 0x4b60 <vfprintf+0x352>
    4b5c:	88 e5       	ldi	r24, 0x58	; 88
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	b6 01       	movw	r22, r12
    4b62:	0c c0       	rjmp	.+24     	; 0x4b7c <vfprintf+0x36e>
    4b64:	8a 2d       	mov	r24, r10
    4b66:	86 78       	andi	r24, 0x86	; 134
    4b68:	59 f0       	breq	.+22     	; 0x4b80 <vfprintf+0x372>
    4b6a:	a1 fe       	sbrs	r10, 1
    4b6c:	02 c0       	rjmp	.+4      	; 0x4b72 <vfprintf+0x364>
    4b6e:	8b e2       	ldi	r24, 0x2B	; 43
    4b70:	01 c0       	rjmp	.+2      	; 0x4b74 <vfprintf+0x366>
    4b72:	80 e2       	ldi	r24, 0x20	; 32
    4b74:	a7 fc       	sbrc	r10, 7
    4b76:	8d e2       	ldi	r24, 0x2D	; 45
    4b78:	b6 01       	movw	r22, r12
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <fputc>
    4b80:	89 14       	cp	r8, r9
    4b82:	38 f4       	brcc	.+14     	; 0x4b92 <vfprintf+0x384>
    4b84:	b6 01       	movw	r22, r12
    4b86:	80 e3       	ldi	r24, 0x30	; 48
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <fputc>
    4b8e:	9a 94       	dec	r9
    4b90:	f7 cf       	rjmp	.-18     	; 0x4b80 <vfprintf+0x372>
    4b92:	8a 94       	dec	r8
    4b94:	f3 01       	movw	r30, r6
    4b96:	e8 0d       	add	r30, r8
    4b98:	f1 1d       	adc	r31, r1
    4b9a:	80 81       	ld	r24, Z
    4b9c:	b6 01       	movw	r22, r12
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <fputc>
    4ba4:	81 10       	cpse	r8, r1
    4ba6:	f5 cf       	rjmp	.-22     	; 0x4b92 <vfprintf+0x384>
    4ba8:	22 20       	and	r2, r2
    4baa:	09 f4       	brne	.+2      	; 0x4bae <vfprintf+0x3a0>
    4bac:	42 ce       	rjmp	.-892    	; 0x4832 <vfprintf+0x24>
    4bae:	b6 01       	movw	r22, r12
    4bb0:	80 e2       	ldi	r24, 0x20	; 32
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <fputc>
    4bb8:	2a 94       	dec	r2
    4bba:	f6 cf       	rjmp	.-20     	; 0x4ba8 <vfprintf+0x39a>
    4bbc:	f6 01       	movw	r30, r12
    4bbe:	86 81       	ldd	r24, Z+6	; 0x06
    4bc0:	97 81       	ldd	r25, Z+7	; 0x07
    4bc2:	02 c0       	rjmp	.+4      	; 0x4bc8 <vfprintf+0x3ba>
    4bc4:	8f ef       	ldi	r24, 0xFF	; 255
    4bc6:	9f ef       	ldi	r25, 0xFF	; 255
    4bc8:	2b 96       	adiw	r28, 0x0b	; 11
    4bca:	e2 e1       	ldi	r30, 0x12	; 18
    4bcc:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <__epilogue_restores__>

00004bd0 <strnlen_P>:
    4bd0:	fc 01       	movw	r30, r24
    4bd2:	05 90       	lpm	r0, Z+
    4bd4:	61 50       	subi	r22, 0x01	; 1
    4bd6:	70 40       	sbci	r23, 0x00	; 0
    4bd8:	01 10       	cpse	r0, r1
    4bda:	d8 f7       	brcc	.-10     	; 0x4bd2 <strnlen_P+0x2>
    4bdc:	80 95       	com	r24
    4bde:	90 95       	com	r25
    4be0:	8e 0f       	add	r24, r30
    4be2:	9f 1f       	adc	r25, r31
    4be4:	08 95       	ret

00004be6 <strnlen>:
    4be6:	fc 01       	movw	r30, r24
    4be8:	61 50       	subi	r22, 0x01	; 1
    4bea:	70 40       	sbci	r23, 0x00	; 0
    4bec:	01 90       	ld	r0, Z+
    4bee:	01 10       	cpse	r0, r1
    4bf0:	d8 f7       	brcc	.-10     	; 0x4be8 <strnlen+0x2>
    4bf2:	80 95       	com	r24
    4bf4:	90 95       	com	r25
    4bf6:	8e 0f       	add	r24, r30
    4bf8:	9f 1f       	adc	r25, r31
    4bfa:	08 95       	ret

00004bfc <strrev>:
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	fc 01       	movw	r30, r24
    4c00:	67 2f       	mov	r22, r23
    4c02:	71 91       	ld	r23, Z+
    4c04:	77 23       	and	r23, r23
    4c06:	e1 f7       	brne	.-8      	; 0x4c00 <strrev+0x4>
    4c08:	32 97       	sbiw	r30, 0x02	; 2
    4c0a:	04 c0       	rjmp	.+8      	; 0x4c14 <strrev+0x18>
    4c0c:	7c 91       	ld	r23, X
    4c0e:	6d 93       	st	X+, r22
    4c10:	70 83       	st	Z, r23
    4c12:	62 91       	ld	r22, -Z
    4c14:	ae 17       	cp	r26, r30
    4c16:	bf 07       	cpc	r27, r31
    4c18:	c8 f3       	brcs	.-14     	; 0x4c0c <strrev+0x10>
    4c1a:	08 95       	ret

00004c1c <fputc>:
    4c1c:	0f 93       	push	r16
    4c1e:	1f 93       	push	r17
    4c20:	cf 93       	push	r28
    4c22:	df 93       	push	r29
    4c24:	fb 01       	movw	r30, r22
    4c26:	23 81       	ldd	r18, Z+3	; 0x03
    4c28:	21 fd       	sbrc	r18, 1
    4c2a:	03 c0       	rjmp	.+6      	; 0x4c32 <fputc+0x16>
    4c2c:	8f ef       	ldi	r24, 0xFF	; 255
    4c2e:	9f ef       	ldi	r25, 0xFF	; 255
    4c30:	2c c0       	rjmp	.+88     	; 0x4c8a <fputc+0x6e>
    4c32:	22 ff       	sbrs	r18, 2
    4c34:	16 c0       	rjmp	.+44     	; 0x4c62 <fputc+0x46>
    4c36:	46 81       	ldd	r20, Z+6	; 0x06
    4c38:	57 81       	ldd	r21, Z+7	; 0x07
    4c3a:	24 81       	ldd	r18, Z+4	; 0x04
    4c3c:	35 81       	ldd	r19, Z+5	; 0x05
    4c3e:	42 17       	cp	r20, r18
    4c40:	53 07       	cpc	r21, r19
    4c42:	44 f4       	brge	.+16     	; 0x4c54 <fputc+0x38>
    4c44:	a0 81       	ld	r26, Z
    4c46:	b1 81       	ldd	r27, Z+1	; 0x01
    4c48:	9d 01       	movw	r18, r26
    4c4a:	2f 5f       	subi	r18, 0xFF	; 255
    4c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c4e:	31 83       	std	Z+1, r19	; 0x01
    4c50:	20 83       	st	Z, r18
    4c52:	8c 93       	st	X, r24
    4c54:	26 81       	ldd	r18, Z+6	; 0x06
    4c56:	37 81       	ldd	r19, Z+7	; 0x07
    4c58:	2f 5f       	subi	r18, 0xFF	; 255
    4c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5c:	37 83       	std	Z+7, r19	; 0x07
    4c5e:	26 83       	std	Z+6, r18	; 0x06
    4c60:	14 c0       	rjmp	.+40     	; 0x4c8a <fputc+0x6e>
    4c62:	8b 01       	movw	r16, r22
    4c64:	ec 01       	movw	r28, r24
    4c66:	fb 01       	movw	r30, r22
    4c68:	00 84       	ldd	r0, Z+8	; 0x08
    4c6a:	f1 85       	ldd	r31, Z+9	; 0x09
    4c6c:	e0 2d       	mov	r30, r0
    4c6e:	09 95       	icall
    4c70:	89 2b       	or	r24, r25
    4c72:	e1 f6       	brne	.-72     	; 0x4c2c <fputc+0x10>
    4c74:	d8 01       	movw	r26, r16
    4c76:	16 96       	adiw	r26, 0x06	; 6
    4c78:	8d 91       	ld	r24, X+
    4c7a:	9c 91       	ld	r25, X
    4c7c:	17 97       	sbiw	r26, 0x07	; 7
    4c7e:	01 96       	adiw	r24, 0x01	; 1
    4c80:	17 96       	adiw	r26, 0x07	; 7
    4c82:	9c 93       	st	X, r25
    4c84:	8e 93       	st	-X, r24
    4c86:	16 97       	sbiw	r26, 0x06	; 6
    4c88:	ce 01       	movw	r24, r28
    4c8a:	df 91       	pop	r29
    4c8c:	cf 91       	pop	r28
    4c8e:	1f 91       	pop	r17
    4c90:	0f 91       	pop	r16
    4c92:	08 95       	ret

00004c94 <__ultoa_invert>:
    4c94:	fa 01       	movw	r30, r20
    4c96:	aa 27       	eor	r26, r26
    4c98:	28 30       	cpi	r18, 0x08	; 8
    4c9a:	51 f1       	breq	.+84     	; 0x4cf0 <__ultoa_invert+0x5c>
    4c9c:	20 31       	cpi	r18, 0x10	; 16
    4c9e:	81 f1       	breq	.+96     	; 0x4d00 <__ultoa_invert+0x6c>
    4ca0:	e8 94       	clt
    4ca2:	6f 93       	push	r22
    4ca4:	6e 7f       	andi	r22, 0xFE	; 254
    4ca6:	6e 5f       	subi	r22, 0xFE	; 254
    4ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    4caa:	8f 4f       	sbci	r24, 0xFF	; 255
    4cac:	9f 4f       	sbci	r25, 0xFF	; 255
    4cae:	af 4f       	sbci	r26, 0xFF	; 255
    4cb0:	b1 e0       	ldi	r27, 0x01	; 1
    4cb2:	3e d0       	rcall	.+124    	; 0x4d30 <__ultoa_invert+0x9c>
    4cb4:	b4 e0       	ldi	r27, 0x04	; 4
    4cb6:	3c d0       	rcall	.+120    	; 0x4d30 <__ultoa_invert+0x9c>
    4cb8:	67 0f       	add	r22, r23
    4cba:	78 1f       	adc	r23, r24
    4cbc:	89 1f       	adc	r24, r25
    4cbe:	9a 1f       	adc	r25, r26
    4cc0:	a1 1d       	adc	r26, r1
    4cc2:	68 0f       	add	r22, r24
    4cc4:	79 1f       	adc	r23, r25
    4cc6:	8a 1f       	adc	r24, r26
    4cc8:	91 1d       	adc	r25, r1
    4cca:	a1 1d       	adc	r26, r1
    4ccc:	6a 0f       	add	r22, r26
    4cce:	71 1d       	adc	r23, r1
    4cd0:	81 1d       	adc	r24, r1
    4cd2:	91 1d       	adc	r25, r1
    4cd4:	a1 1d       	adc	r26, r1
    4cd6:	20 d0       	rcall	.+64     	; 0x4d18 <__ultoa_invert+0x84>
    4cd8:	09 f4       	brne	.+2      	; 0x4cdc <__ultoa_invert+0x48>
    4cda:	68 94       	set
    4cdc:	3f 91       	pop	r19
    4cde:	2a e0       	ldi	r18, 0x0A	; 10
    4ce0:	26 9f       	mul	r18, r22
    4ce2:	11 24       	eor	r1, r1
    4ce4:	30 19       	sub	r19, r0
    4ce6:	30 5d       	subi	r19, 0xD0	; 208
    4ce8:	31 93       	st	Z+, r19
    4cea:	de f6       	brtc	.-74     	; 0x4ca2 <__ultoa_invert+0xe>
    4cec:	cf 01       	movw	r24, r30
    4cee:	08 95       	ret
    4cf0:	46 2f       	mov	r20, r22
    4cf2:	47 70       	andi	r20, 0x07	; 7
    4cf4:	40 5d       	subi	r20, 0xD0	; 208
    4cf6:	41 93       	st	Z+, r20
    4cf8:	b3 e0       	ldi	r27, 0x03	; 3
    4cfa:	0f d0       	rcall	.+30     	; 0x4d1a <__ultoa_invert+0x86>
    4cfc:	c9 f7       	brne	.-14     	; 0x4cf0 <__ultoa_invert+0x5c>
    4cfe:	f6 cf       	rjmp	.-20     	; 0x4cec <__ultoa_invert+0x58>
    4d00:	46 2f       	mov	r20, r22
    4d02:	4f 70       	andi	r20, 0x0F	; 15
    4d04:	40 5d       	subi	r20, 0xD0	; 208
    4d06:	4a 33       	cpi	r20, 0x3A	; 58
    4d08:	18 f0       	brcs	.+6      	; 0x4d10 <__ultoa_invert+0x7c>
    4d0a:	49 5d       	subi	r20, 0xD9	; 217
    4d0c:	31 fd       	sbrc	r19, 1
    4d0e:	40 52       	subi	r20, 0x20	; 32
    4d10:	41 93       	st	Z+, r20
    4d12:	02 d0       	rcall	.+4      	; 0x4d18 <__ultoa_invert+0x84>
    4d14:	a9 f7       	brne	.-22     	; 0x4d00 <__ultoa_invert+0x6c>
    4d16:	ea cf       	rjmp	.-44     	; 0x4cec <__ultoa_invert+0x58>
    4d18:	b4 e0       	ldi	r27, 0x04	; 4
    4d1a:	a6 95       	lsr	r26
    4d1c:	97 95       	ror	r25
    4d1e:	87 95       	ror	r24
    4d20:	77 95       	ror	r23
    4d22:	67 95       	ror	r22
    4d24:	ba 95       	dec	r27
    4d26:	c9 f7       	brne	.-14     	; 0x4d1a <__ultoa_invert+0x86>
    4d28:	00 97       	sbiw	r24, 0x00	; 0
    4d2a:	61 05       	cpc	r22, r1
    4d2c:	71 05       	cpc	r23, r1
    4d2e:	08 95       	ret
    4d30:	9b 01       	movw	r18, r22
    4d32:	ac 01       	movw	r20, r24
    4d34:	0a 2e       	mov	r0, r26
    4d36:	06 94       	lsr	r0
    4d38:	57 95       	ror	r21
    4d3a:	47 95       	ror	r20
    4d3c:	37 95       	ror	r19
    4d3e:	27 95       	ror	r18
    4d40:	ba 95       	dec	r27
    4d42:	c9 f7       	brne	.-14     	; 0x4d36 <__ultoa_invert+0xa2>
    4d44:	62 0f       	add	r22, r18
    4d46:	73 1f       	adc	r23, r19
    4d48:	84 1f       	adc	r24, r20
    4d4a:	95 1f       	adc	r25, r21
    4d4c:	a0 1d       	adc	r26, r0
    4d4e:	08 95       	ret

00004d50 <__prologue_saves__>:
    4d50:	2f 92       	push	r2
    4d52:	3f 92       	push	r3
    4d54:	4f 92       	push	r4
    4d56:	5f 92       	push	r5
    4d58:	6f 92       	push	r6
    4d5a:	7f 92       	push	r7
    4d5c:	8f 92       	push	r8
    4d5e:	9f 92       	push	r9
    4d60:	af 92       	push	r10
    4d62:	bf 92       	push	r11
    4d64:	cf 92       	push	r12
    4d66:	df 92       	push	r13
    4d68:	ef 92       	push	r14
    4d6a:	ff 92       	push	r15
    4d6c:	0f 93       	push	r16
    4d6e:	1f 93       	push	r17
    4d70:	cf 93       	push	r28
    4d72:	df 93       	push	r29
    4d74:	cd b7       	in	r28, 0x3d	; 61
    4d76:	de b7       	in	r29, 0x3e	; 62
    4d78:	ca 1b       	sub	r28, r26
    4d7a:	db 0b       	sbc	r29, r27
    4d7c:	0f b6       	in	r0, 0x3f	; 63
    4d7e:	f8 94       	cli
    4d80:	de bf       	out	0x3e, r29	; 62
    4d82:	0f be       	out	0x3f, r0	; 63
    4d84:	cd bf       	out	0x3d, r28	; 61
    4d86:	09 94       	ijmp

00004d88 <__epilogue_restores__>:
    4d88:	2a 88       	ldd	r2, Y+18	; 0x12
    4d8a:	39 88       	ldd	r3, Y+17	; 0x11
    4d8c:	48 88       	ldd	r4, Y+16	; 0x10
    4d8e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d90:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d92:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d94:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d96:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d98:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d9a:	b9 84       	ldd	r11, Y+9	; 0x09
    4d9c:	c8 84       	ldd	r12, Y+8	; 0x08
    4d9e:	df 80       	ldd	r13, Y+7	; 0x07
    4da0:	ee 80       	ldd	r14, Y+6	; 0x06
    4da2:	fd 80       	ldd	r15, Y+5	; 0x05
    4da4:	0c 81       	ldd	r16, Y+4	; 0x04
    4da6:	1b 81       	ldd	r17, Y+3	; 0x03
    4da8:	aa 81       	ldd	r26, Y+2	; 0x02
    4daa:	b9 81       	ldd	r27, Y+1	; 0x01
    4dac:	ce 0f       	add	r28, r30
    4dae:	d1 1d       	adc	r29, r1
    4db0:	0f b6       	in	r0, 0x3f	; 63
    4db2:	f8 94       	cli
    4db4:	de bf       	out	0x3e, r29	; 62
    4db6:	0f be       	out	0x3f, r0	; 63
    4db8:	cd bf       	out	0x3d, r28	; 61
    4dba:	ed 01       	movw	r28, r26
    4dbc:	08 95       	ret

00004dbe <_exit>:
    4dbe:	f8 94       	cli

00004dc0 <__stop_program>:
    4dc0:	ff cf       	rjmp	.-2      	; 0x4dc0 <__stop_program>
