
att02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006ca  00800100  00000bd8  00000c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bd8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00001316  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e97  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000870  00000000  00000000  0000227f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076b  00000000  00000000  00002aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  0000325c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000053f  00000000  00000000  000033dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009d1  00000000  00000000  0000391b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000042ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	17 e0       	ldi	r17, 0x07	; 7
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 3c       	cpi	r26, 0xCA	; 202
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 9c 02 	call	0x538	; 0x538 <main>
  8e:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z9pirate_ofv>:
	//}
}


void pirate_of()      // function to play the pirate of the Caribbean sea
{
  96:	8f 92       	push	r8
  98:	9f 92       	push	r9
  9a:	af 92       	push	r10
  9c:	bf 92       	push	r11
  9e:	cf 92       	push	r12
  a0:	df 92       	push	r13
  a2:	ef 92       	push	r14
  a4:	ff 92       	push	r15
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
	const int totalNotes = sizeof(pcs_notes) / sizeof(int);
	for (int i = 0; i < totalNotes; i++)
  ae:	c0 e0       	ldi	r28, 0x00	; 0
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  b2:	cb 3c       	cpi	r28, 0xCB	; 203
  b4:	d1 05       	cpc	r29, r1
  b6:	0c f0       	brlt	.+2      	; 0xba <_Z9pirate_ofv+0x24>
  b8:	c4 c0       	rjmp	.+392    	; 0x242 <_Z9pirate_ofv+0x1ac>
	{
		const int currentNote = pcs_notes[i];
  ba:	ce 01       	movw	r24, r28
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	fc 01       	movw	r30, r24
  c2:	e8 5d       	subi	r30, 0xD8	; 216
  c4:	fb 4f       	sbci	r31, 0xFB	; 251
  c6:	00 81       	ld	r16, Z
  c8:	11 81       	ldd	r17, Z+1	; 0x01
		float wait = pcs_durations[i] / songSpeed;
  ca:	fc 01       	movw	r30, r24
  cc:	ee 56       	subi	r30, 0x6E	; 110
  ce:	fd 4f       	sbci	r31, 0xFD	; 253
  d0:	60 81       	ld	r22, Z
  d2:	71 81       	ldd	r23, Z+1	; 0x01
  d4:	07 2e       	mov	r0, r23
  d6:	00 0c       	add	r0, r0
  d8:	88 0b       	sbc	r24, r24
  da:	99 0b       	sbc	r25, r25
  dc:	0e 94 5f 04 	call	0x8be	; 0x8be <__floatsisf>
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	40 ec       	ldi	r20, 0xC0	; 192
  e6:	5f e3       	ldi	r21, 0x3F	; 63
  e8:	0e 94 b5 03 	call	0x76a	; 0x76a <__divsf3>
  ec:	6b 01       	movw	r12, r22
  ee:	7c 01       	movw	r14, r24
		
		if ((~PIND &(1<<PIND4)) && !((~PIND &(1<<PIND5))|(~PIND &(1<<PIND3)))) // checks the play pause switch
  f0:	4c 99       	sbic	0x09, 4	; 9
  f2:	14 c0       	rjmp	.+40     	; 0x11c <_Z9pirate_ofv+0x86>
  f4:	89 b1       	in	r24, 0x09	; 9
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	80 95       	com	r24
  fa:	90 95       	com	r25
  fc:	9c 01       	movw	r18, r24
  fe:	20 72       	andi	r18, 0x20	; 32
 100:	33 27       	eor	r19, r19
 102:	99 b1       	in	r25, 0x09	; 9
 104:	89 2f       	mov	r24, r25
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	80 95       	com	r24
 10a:	90 95       	com	r25
 10c:	88 70       	andi	r24, 0x08	; 8
 10e:	99 27       	eor	r25, r25
 110:	82 2b       	or	r24, r18
 112:	93 2b       	or	r25, r19
 114:	89 2b       	or	r24, r25
 116:	21 f0       	breq	.+8      	; 0x120 <_Z9pirate_ofv+0x8a>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	03 c0       	rjmp	.+6      	; 0x122 <_Z9pirate_ofv+0x8c>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	01 c0       	rjmp	.+2      	; 0x122 <_Z9pirate_ofv+0x8c>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	88 23       	and	r24, r24
 124:	09 f4       	brne	.+2      	; 0x128 <_Z9pirate_ofv+0x92>
 126:	5e c0       	rjmp	.+188    	; 0x1e4 <_Z9pirate_ofv+0x14e>
		{
			if (currentNote != 0)
 128:	01 2b       	or	r16, r17
 12a:	c9 f0       	breq	.+50     	; 0x15e <_Z9pirate_ofv+0xc8>
			{
				PORTB |= (1<<PORTB0);
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	85 b9       	out	0x05, r24	; 5
				tone(SPEAKER, pcs_notes[i], wait);
 132:	fe 01       	movw	r30, r28
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e8 5d       	subi	r30, 0xD8	; 216
 13a:	fb 4f       	sbci	r31, 0xFB	; 251
 13c:	60 81       	ld	r22, Z
 13e:	71 81       	ldd	r23, Z+1	; 0x01
 140:	07 2e       	mov	r0, r23
 142:	00 0c       	add	r0, r0
 144:	88 0b       	sbc	r24, r24
 146:	99 0b       	sbc	r25, r25
 148:	0e 94 5f 04 	call	0x8be	; 0x8be <__floatsisf>
 14c:	ab 01       	movw	r20, r22
 14e:	bc 01       	movw	r22, r24
 150:	97 01       	movw	r18, r14
 152:	86 01       	movw	r16, r12
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z4toneiff>
 15c:	04 c0       	rjmp	.+8      	; 0x166 <_Z9pirate_ofv+0xd0>
			}
			else
			{
				noTone(SPEAKER);
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z6noTonei>
			}
			PORTB &= ~(1<<PORTB0);
 166:	85 b1       	in	r24, 0x05	; 5
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	85 b9       	out	0x05, r24	; 5

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	4a e7       	ldi	r20, 0x7A	; 122
 172:	55 e4       	ldi	r21, 0x45	; 69
 174:	c7 01       	movw	r24, r14
 176:	b6 01       	movw	r22, r12
 178:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 17c:	4b 01       	movw	r8, r22
 17e:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	40 e8       	ldi	r20, 0x80	; 128
 186:	5f e3       	ldi	r21, 0x3F	; 63
 188:	0e 94 b0 03 	call	0x760	; 0x760 <__cmpsf2>
 18c:	88 23       	and	r24, r24
 18e:	1c f1       	brlt	.+70     	; 0x1d6 <_Z9pirate_ofv+0x140>
		__ticks = 1;
	else if (__tmp > 65535)
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	3f ef       	ldi	r19, 0xFF	; 255
 194:	4f e7       	ldi	r20, 0x7F	; 127
 196:	57 e4       	ldi	r21, 0x47	; 71
 198:	c5 01       	movw	r24, r10
 19a:	b4 01       	movw	r22, r8
 19c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__gesf2>
 1a0:	18 16       	cp	r1, r24
 1a2:	a4 f4       	brge	.+40     	; 0x1cc <_Z9pirate_ofv+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	40 e2       	ldi	r20, 0x20	; 32
 1aa:	51 e4       	ldi	r21, 0x41	; 65
 1ac:	c7 01       	movw	r24, r14
 1ae:	b6 01       	movw	r22, r12
 1b0:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 1b4:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixunssfsi>
		while(__ticks)
 1b8:	61 15       	cp	r22, r1
 1ba:	71 05       	cpc	r23, r1
 1bc:	89 f0       	breq	.+34     	; 0x1e0 <_Z9pirate_ofv+0x14a>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 1be:	80 e9       	ldi	r24, 0x90	; 144
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <_Z9pirate_ofv+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	61 50       	subi	r22, 0x01	; 1
 1c8:	71 09       	sbc	r23, r1
 1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <_Z9pirate_ofv+0x122>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1cc:	c5 01       	movw	r24, r10
 1ce:	b4 01       	movw	r22, r8
 1d0:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixunssfsi>
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <_Z9pirate_ofv+0x144>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	cb 01       	movw	r24, r22
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <_Z9pirate_ofv+0x146>


void pirate_of()      // function to play the pirate of the Caribbean sea
{
	const int totalNotes = sizeof(pcs_notes) / sizeof(int);
	for (int i = 0; i < totalNotes; i++)
 1e0:	21 96       	adiw	r28, 0x01	; 1
 1e2:	67 cf       	rjmp	.-306    	; 0xb2 <_Z9pirate_ofv+0x1c>
			
			
		}
		else // Play tone if currentNote is not 0 frequency, otherwise pause (noTone)
		{
			noTone(SPEAKER);
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z6noTonei>
			if (~PIND &(1<<PIND5)){
 1ec:	4d 99       	sbic	0x09, 5	; 9
 1ee:	14 c0       	rjmp	.+40     	; 0x218 <_Z9pirate_ofv+0x182>
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	97 e2       	ldi	r25, 0x27	; 39
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f4:	00 97       	sbiw	r24, 0x00	; 0
 1f6:	31 f0       	breq	.+12     	; 0x204 <_Z9pirate_ofv+0x16e>
 1f8:	e0 e9       	ldi	r30, 0x90	; 144
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <_Z9pirate_ofv+0x166>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f8 cf       	rjmp	.-16     	; 0x1f4 <_Z9pirate_ofv+0x15e>
				_delay_ms(1000);
				temp++;
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 216:	15 c0       	rjmp	.+42     	; 0x242 <_Z9pirate_ofv+0x1ac>
			}
			else if (~PIND &(1<<PIND3)){
 218:	4b 99       	sbic	0x09, 3	; 9
 21a:	13 c0       	rjmp	.+38     	; 0x242 <_Z9pirate_ofv+0x1ac>
 21c:	80 e1       	ldi	r24, 0x10	; 16
 21e:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	31 f0       	breq	.+12     	; 0x230 <_Z9pirate_ofv+0x19a>
 224:	e0 e9       	ldi	r30, 0x90	; 144
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <_Z9pirate_ofv+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f8 cf       	rjmp	.-16     	; 0x220 <_Z9pirate_ofv+0x18a>
				_delay_ms(1000);
				temp--;
 230:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 234:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 23e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			}
			break;
		}
	}
	return;
}
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	9f 90       	pop	r9
 258:	8f 90       	pop	r8
 25a:	08 95       	ret

0000025c <_Z11play_melodyPiii>:



void play_melody(int melody[],int tempo, int notes) // function to play any melody
{
 25c:	2f 92       	push	r2
 25e:	3f 92       	push	r3
 260:	4f 92       	push	r4
 262:	5f 92       	push	r5
 264:	6f 92       	push	r6
 266:	7f 92       	push	r7
 268:	8f 92       	push	r8
 26a:	9f 92       	push	r9
 26c:	af 92       	push	r10
 26e:	bf 92       	push	r11
 270:	cf 92       	push	r12
 272:	df 92       	push	r13
 274:	ef 92       	push	r14
 276:	ff 92       	push	r15
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	00 d0       	rcall	.+0      	; 0x282 <_Z11play_melodyPiii+0x26>
 282:	00 d0       	rcall	.+0      	; 0x284 <_Z11play_melodyPiii+0x28>
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	7c 01       	movw	r14, r24
 28a:	1a 01       	movw	r2, r20
	
	

	int wholenote = (60000 * 4) / tempo;
 28c:	9b 01       	movw	r18, r22
 28e:	77 0f       	add	r23, r23
 290:	44 0b       	sbc	r20, r20
 292:	55 0b       	sbc	r21, r21
 294:	60 e8       	ldi	r22, 0x80	; 128
 296:	79 ea       	ldi	r23, 0xA9	; 169
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 95 05 	call	0xb2a	; 0xb2a <__divmodsi4>
 2a0:	3a 83       	std	Y+2, r19	; 0x02
 2a2:	29 83       	std	Y+1, r18	; 0x01

	int divider = 0, noteDuration = 0;
	// iterate over the notes of the melody.
	for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
 2a4:	1c 82       	std	Y+4, r1	; 0x04
 2a6:	1b 82       	std	Y+3, r1	; 0x03
	
	

	int wholenote = (60000 * 4) / tempo;

	int divider = 0, noteDuration = 0;
 2a8:	c1 2c       	mov	r12, r1
 2aa:	d1 2c       	mov	r13, r1
	// iterate over the notes of the melody.
	for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
 2ac:	c1 01       	movw	r24, r2
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	2b 81       	ldd	r18, Y+3	; 0x03
 2b4:	3c 81       	ldd	r19, Y+4	; 0x04
 2b6:	28 17       	cp	r18, r24
 2b8:	39 07       	cpc	r19, r25
 2ba:	0c f0       	brlt	.+2      	; 0x2be <_Z11play_melodyPiii+0x62>
 2bc:	e4 c0       	rjmp	.+456    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		divider = melody[thisNote + 1];
 2be:	89 01       	movw	r16, r18
 2c0:	f9 01       	movw	r30, r18
 2c2:	31 96       	adiw	r30, 0x01	; 1
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	ee 0d       	add	r30, r14
 2ca:	ff 1d       	adc	r31, r15
 2cc:	60 81       	ld	r22, Z
 2ce:	71 81       	ldd	r23, Z+1	; 0x01
		if (divider > 0) {
 2d0:	16 16       	cp	r1, r22
 2d2:	17 06       	cpc	r1, r23
 2d4:	34 f4       	brge	.+12     	; 0x2e2 <_Z11play_melodyPiii+0x86>
			noteDuration = (wholenote) / divider;  // regular note, just proceed
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	9a 81       	ldd	r25, Y+2	; 0x02
 2da:	0e 94 81 05 	call	0xb02	; 0xb02 <__divmodhi4>
 2de:	6b 01       	movw	r12, r22
 2e0:	18 c0       	rjmp	.+48     	; 0x312 <_Z11play_melodyPiii+0xb6>
		}
		else if (divider < 0) {
 2e2:	77 23       	and	r23, r23
 2e4:	b4 f4       	brge	.+44     	; 0x312 <_Z11play_melodyPiii+0xb6>
			noteDuration = (wholenote) / (-1*(divider));// dotted notes are represented with negative durations!!
 2e6:	71 95       	neg	r23
 2e8:	61 95       	neg	r22
 2ea:	71 09       	sbc	r23, r1
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	9a 81       	ldd	r25, Y+2	; 0x02
 2f0:	0e 94 81 05 	call	0xb02	; 0xb02 <__divmodhi4>
			noteDuration *= 1.5; // increases the duration in half for dotted notes
 2f4:	07 2e       	mov	r0, r23
 2f6:	00 0c       	add	r0, r0
 2f8:	88 0b       	sbc	r24, r24
 2fa:	99 0b       	sbc	r25, r25
 2fc:	0e 94 5f 04 	call	0x8be	; 0x8be <__floatsisf>
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 ec       	ldi	r20, 0xC0	; 192
 306:	5f e3       	ldi	r21, 0x3F	; 63
 308:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 30c:	0e 94 27 04 	call	0x84e	; 0x84e <__fixsfsi>
 310:	6b 01       	movw	r12, r22
		}
		
		if ((~PIND &(1<<PIND4)) && !((~PIND&(1<<PIND5))|(~PIND&(1<<PIND3))))  // checks the play pause switch
 312:	4c 99       	sbic	0x09, 4	; 9
 314:	13 c0       	rjmp	.+38     	; 0x33c <_Z11play_melodyPiii+0xe0>
 316:	89 b1       	in	r24, 0x09	; 9
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	80 95       	com	r24
 31c:	90 95       	com	r25
 31e:	9c 01       	movw	r18, r24
 320:	20 72       	andi	r18, 0x20	; 32
 322:	33 27       	eor	r19, r19
 324:	89 b1       	in	r24, 0x09	; 9
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	88 70       	andi	r24, 0x08	; 8
 32e:	99 27       	eor	r25, r25
 330:	82 2b       	or	r24, r18
 332:	93 2b       	or	r25, r19
 334:	89 2b       	or	r24, r25
 336:	21 f0       	breq	.+8      	; 0x340 <_Z11play_melodyPiii+0xe4>
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	03 c0       	rjmp	.+6      	; 0x342 <_Z11play_melodyPiii+0xe6>
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	01 c0       	rjmp	.+2      	; 0x342 <_Z11play_melodyPiii+0xe6>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	88 23       	and	r24, r24
 344:	09 f4       	brne	.+2      	; 0x348 <_Z11play_melodyPiii+0xec>
 346:	70 c0       	rjmp	.+224    	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		{
			PORTB |= (1<<PORTB0);
 348:	85 b1       	in	r24, 0x05	; 5
 34a:	81 60       	ori	r24, 0x01	; 1
 34c:	85 b9       	out	0x05, r24	; 5
			tone(SPEAKER, melody[thisNote], noteDuration * 0.9); //play the note for 90% of the duration, leaving 10% as a pause
 34e:	b6 01       	movw	r22, r12
 350:	0d 2c       	mov	r0, r13
 352:	00 0c       	add	r0, r0
 354:	88 0b       	sbc	r24, r24
 356:	99 0b       	sbc	r25, r25
 358:	0e 94 5f 04 	call	0x8be	; 0x8be <__floatsisf>
 35c:	2b 01       	movw	r4, r22
 35e:	3c 01       	movw	r6, r24
 360:	26 e6       	ldi	r18, 0x66	; 102
 362:	36 e6       	ldi	r19, 0x66	; 102
 364:	46 e6       	ldi	r20, 0x66	; 102
 366:	5f e3       	ldi	r21, 0x3F	; 63
 368:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 36c:	4b 01       	movw	r8, r22
 36e:	5c 01       	movw	r10, r24
 370:	00 0f       	add	r16, r16
 372:	11 1f       	adc	r17, r17
 374:	f7 01       	movw	r30, r14
 376:	e0 0f       	add	r30, r16
 378:	f1 1f       	adc	r31, r17
 37a:	60 81       	ld	r22, Z
 37c:	71 81       	ldd	r23, Z+1	; 0x01
 37e:	07 2e       	mov	r0, r23
 380:	00 0c       	add	r0, r0
 382:	88 0b       	sbc	r24, r24
 384:	99 0b       	sbc	r25, r25
 386:	0e 94 5f 04 	call	0x8be	; 0x8be <__floatsisf>
 38a:	ab 01       	movw	r20, r22
 38c:	bc 01       	movw	r22, r24
 38e:	95 01       	movw	r18, r10
 390:	84 01       	movw	r16, r8
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 b5 02 	call	0x56a	; 0x56a <_Z4toneiff>
			PORTB &= ~(1<<PORTB0);
 39a:	85 b1       	in	r24, 0x05	; 5
 39c:	8e 7f       	andi	r24, 0xFE	; 254
 39e:	85 b9       	out	0x05, r24	; 5

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	4a e7       	ldi	r20, 0x7A	; 122
 3a6:	55 e4       	ldi	r21, 0x45	; 69
 3a8:	c3 01       	movw	r24, r6
 3aa:	b2 01       	movw	r22, r4
 3ac:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 3b0:	4b 01       	movw	r8, r22
 3b2:	5c 01       	movw	r10, r24
	if (__tmp < 1.0)
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e8       	ldi	r20, 0x80	; 128
 3ba:	5f e3       	ldi	r21, 0x3F	; 63
 3bc:	0e 94 b0 03 	call	0x760	; 0x760 <__cmpsf2>
 3c0:	88 23       	and	r24, r24
 3c2:	1c f1       	brlt	.+70     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
		__ticks = 1;
	else if (__tmp > 65535)
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	3f ef       	ldi	r19, 0xFF	; 255
 3c8:	4f e7       	ldi	r20, 0x7F	; 127
 3ca:	57 e4       	ldi	r21, 0x47	; 71
 3cc:	c5 01       	movw	r24, r10
 3ce:	b4 01       	movw	r22, r8
 3d0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__gesf2>
 3d4:	18 16       	cp	r1, r24
 3d6:	a4 f4       	brge	.+40     	; 0x400 <__EEPROM_REGION_LENGTH__>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3d8:	20 e0       	ldi	r18, 0x00	; 0
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	40 e2       	ldi	r20, 0x20	; 32
 3de:	51 e4       	ldi	r21, 0x41	; 65
 3e0:	c3 01       	movw	r24, r6
 3e2:	b2 01       	movw	r22, r4
 3e4:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 3e8:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixunssfsi>
		while(__ticks)
 3ec:	61 15       	cp	r22, r1
 3ee:	71 05       	cpc	r23, r1
 3f0:	89 f0       	breq	.+34     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3f2:	80 e9       	ldi	r24, 0x90	; 144
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <_Z11play_melodyPiii+0x19a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3fa:	61 50       	subi	r22, 0x01	; 1
 3fc:	71 09       	sbc	r23, r1
 3fe:	f6 cf       	rjmp	.-20     	; 0x3ec <_Z11play_melodyPiii+0x190>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 400:	c5 01       	movw	r24, r10
 402:	b4 01       	movw	r22, r8
 404:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixunssfsi>
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	70 e0       	ldi	r23, 0x00	; 0
 40e:	cb 01       	movw	r24, r22
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			_delay_ms(noteDuration);
			
			noTone(SPEAKER);
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z6noTonei>

	int wholenote = (60000 * 4) / tempo;

	int divider = 0, noteDuration = 0;
	// iterate over the notes of the melody.
	for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
 41c:	8b 81       	ldd	r24, Y+3	; 0x03
 41e:	9c 81       	ldd	r25, Y+4	; 0x04
 420:	02 96       	adiw	r24, 0x02	; 2
 422:	9c 83       	std	Y+4, r25	; 0x04
 424:	8b 83       	std	Y+3, r24	; 0x03
 426:	42 cf       	rjmp	.-380    	; 0x2ac <_Z11play_melodyPiii+0x50>
			
			noTone(SPEAKER);
			
		}
		else{
			noTone(SPEAKER);
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z6noTonei>
			if (~PIND&(1<<PIND5)){
 430:	4d 99       	sbic	0x09, 5	; 9
 432:	14 c0       	rjmp	.+40     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 434:	80 e1       	ldi	r24, 0x10	; 16
 436:	97 e2       	ldi	r25, 0x27	; 39
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	31 f0       	breq	.+12     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 43c:	e0 e9       	ldi	r30, 0x90	; 144
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	31 97       	sbiw	r30, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f8 cf       	rjmp	.-16     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
				_delay_ms(1000);
				temp++;
 448:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 44c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 450:	01 96       	adiw	r24, 0x01	; 1
 452:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 456:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 45a:	15 c0       	rjmp	.+42     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
			}
			else if (~PIND&(1<<PIND3)){
 45c:	4b 99       	sbic	0x09, 3	; 9
 45e:	13 c0       	rjmp	.+38     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 460:	80 e1       	ldi	r24, 0x10	; 16
 462:	97 e2       	ldi	r25, 0x27	; 39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	31 f0       	breq	.+12     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 468:	e0 e9       	ldi	r30, 0x90	; 144
 46a:	f1 e0       	ldi	r31, 0x01	; 1
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f8 cf       	rjmp	.-16     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
				_delay_ms(1000);
				temp--;
 474:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 478:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 482:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
		}
		
	}
	return;
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	bf 90       	pop	r11
 4a0:	af 90       	pop	r10
 4a2:	9f 90       	pop	r9
 4a4:	8f 90       	pop	r8
 4a6:	7f 90       	pop	r7
 4a8:	6f 90       	pop	r6
 4aa:	5f 90       	pop	r5
 4ac:	4f 90       	pop	r4
 4ae:	3f 90       	pop	r3
 4b0:	2f 90       	pop	r2
 4b2:	08 95       	ret

000004b4 <_Z4songv>:
		}
	}
}
	
void song(){
	if (temp>3){temp = 1;}
 4b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4bc:	04 97       	sbiw	r24, 0x04	; 4
 4be:	34 f0       	brlt	.+12     	; 0x4cc <_Z4songv+0x18>
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (temp<1){temp = 3;}
 4cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4d4:	18 16       	cp	r1, r24
 4d6:	19 06       	cpc	r1, r25
 4d8:	34 f0       	brlt	.+12     	; 0x4e6 <_Z4songv+0x32>
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (temp==1){
 4e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	91 05       	cpc	r25, r1
 4f2:	19 f4       	brne	.+6      	; 0x4fa <_Z4songv+0x46>
		pirate_of();
 4f4:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9pirate_ofv>
 4f8:	08 95       	ret
		
	}
	else if (temp==2){
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	91 05       	cpc	r25, r1
 4fe:	69 f4       	brne	.+26     	; 0x51a <_Z4songv+0x66>
		play_melody(got_melody, got_tempo, got_notes);
 500:	40 91 be 05 	lds	r20, 0x05BE	; 0x8005be <got_notes>
 504:	50 91 bf 05 	lds	r21, 0x05BF	; 0x8005bf <got_notes+0x1>
 508:	60 91 c8 07 	lds	r22, 0x07C8	; 0x8007c8 <got_tempo>
 50c:	70 91 c9 07 	lds	r23, 0x07C9	; 0x8007c9 <got_tempo+0x1>
 510:	80 ec       	ldi	r24, 0xC0	; 192
 512:	95 e0       	ldi	r25, 0x05	; 5
 514:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z11play_melodyPiii>
 518:	08 95       	ret
		
		
	}
	else if (temp==3){
 51a:	03 97       	sbiw	r24, 0x03	; 3
 51c:	61 f4       	brne	.+24     	; 0x536 <_Z4songv+0x82>
		play_melody(turtis_melody, turtis_tempo, turtis_notes);
 51e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <turtis_notes>
 522:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <turtis_notes+0x1>
 526:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <turtis_tempo>
 52a:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <turtis_tempo+0x1>
 52e:	84 e0       	ldi	r24, 0x04	; 4
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z11play_melodyPiii>
 536:	08 95       	ret

00000538 <main>:
int temp = 1;


int main(void)
{
	DDRB =0x05;
 538:	85 e0       	ldi	r24, 0x05	; 5
 53a:	84 b9       	out	0x04, r24	; 4
	DDRD =0x00;
 53c:	1a b8       	out	0x0a, r1	; 10
	
	PORTD |= (1<<PORTD3);
 53e:	8b b1       	in	r24, 0x0b	; 11
 540:	88 60       	ori	r24, 0x08	; 8
 542:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PORTD4);
 544:	8b b1       	in	r24, 0x0b	; 11
 546:	80 61       	ori	r24, 0x10	; 16
 548:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<PORTD5);
 54a:	8b b1       	in	r24, 0x0b	; 11
 54c:	80 62       	ori	r24, 0x20	; 32
 54e:	8b b9       	out	0x0b, r24	; 11
	/* Replace with your application code */
    while (1) 
    {
		if (~PIND&(1<<PIND4))
 550:	4c 99       	sbic	0x09, 4	; 9
 552:	03 c0       	rjmp	.+6      	; 0x55a <main+0x22>
		{
			//PORTB |= (1<<PORTB0);
			song();
 554:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_Z4songv>
 558:	fb cf       	rjmp	.-10     	; 0x550 <main+0x18>
			
		}
		else{
			PORTB &= ~(1<<PORTB0);
 55a:	85 b1       	in	r24, 0x05	; 5
 55c:	8e 7f       	andi	r24, 0xFE	; 254
 55e:	85 b9       	out	0x05, r24	; 5
			noTone(SPEAKER);
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 9f 03 	call	0x73e	; 0x73e <_Z6noTonei>
 568:	f3 cf       	rjmp	.-26     	; 0x550 <main+0x18>

0000056a <_Z4toneiff>:
#define SPEAKER_PORT PORTB
#define SPEAKER_DDR DDRB


void tone(int SPEAKER_PIN, float frequency, float duration)
{
 56a:	3f 92       	push	r3
 56c:	4f 92       	push	r4
 56e:	5f 92       	push	r5
 570:	6f 92       	push	r6
 572:	7f 92       	push	r7
 574:	8f 92       	push	r8
 576:	9f 92       	push	r9
 578:	af 92       	push	r10
 57a:	bf 92       	push	r11
 57c:	cf 92       	push	r12
 57e:	df 92       	push	r13
 580:	ef 92       	push	r14
 582:	ff 92       	push	r15
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	00 d0       	rcall	.+0      	; 0x58e <_Z4toneiff+0x24>
 58e:	00 d0       	rcall	.+0      	; 0x590 <_Z4toneiff+0x26>
 590:	00 d0       	rcall	.+0      	; 0x592 <_Z4toneiff+0x28>
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
 596:	38 2e       	mov	r3, r24
 598:	48 01       	movw	r8, r16
 59a:	59 01       	movw	r10, r18
	long int i,samples;
	float period;
	float half_period;
	
	period = (1/frequency)*1000;
 59c:	9a 01       	movw	r18, r20
 59e:	ab 01       	movw	r20, r22
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	9f e3       	ldi	r25, 0x3F	; 63
 5a8:	0e 94 b5 03 	call	0x76a	; 0x76a <__divsf3>
 5ac:	20 e0       	ldi	r18, 0x00	; 0
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	4a e7       	ldi	r20, 0x7A	; 122
 5b2:	54 e4       	ldi	r21, 0x44	; 68
 5b4:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 5b8:	6b 01       	movw	r12, r22
 5ba:	7c 01       	movw	r14, r24
	samples = duration/period;
 5bc:	9b 01       	movw	r18, r22
 5be:	ac 01       	movw	r20, r24
 5c0:	c5 01       	movw	r24, r10
 5c2:	b4 01       	movw	r22, r8
 5c4:	0e 94 b5 03 	call	0x76a	; 0x76a <__divsf3>
 5c8:	0e 94 27 04 	call	0x84e	; 0x84e <__fixsfsi>
 5cc:	2b 01       	movw	r4, r22
 5ce:	3c 01       	movw	r6, r24
	half_period = period/2;
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	5f e3       	ldi	r21, 0x3F	; 63
 5d8:	c7 01       	movw	r24, r14
 5da:	b6 01       	movw	r22, r12
 5dc:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 5e0:	69 83       	std	Y+1, r22	; 0x01
 5e2:	7a 83       	std	Y+2, r23	; 0x02
 5e4:	8b 83       	std	Y+3, r24	; 0x03
 5e6:	9c 83       	std	Y+4, r25	; 0x04
	
	
	//half_period= (int)half_period;
	for(i=0;i<samples;i++)
 5e8:	81 2c       	mov	r8, r1
 5ea:	91 2c       	mov	r9, r1
 5ec:	54 01       	movw	r10, r8
 5ee:	84 14       	cp	r8, r4
 5f0:	95 04       	cpc	r9, r5
 5f2:	a6 04       	cpc	r10, r6
 5f4:	b7 04       	cpc	r11, r7
 5f6:	0c f0       	brlt	.+2      	; 0x5fa <_Z4toneiff+0x90>
 5f8:	8a c0       	rjmp	.+276    	; 0x70e <_Z4toneiff+0x1a4>

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	4a e7       	ldi	r20, 0x7A	; 122
 600:	55 e4       	ldi	r21, 0x45	; 69
 602:	69 81       	ldd	r22, Y+1	; 0x01
 604:	7a 81       	ldd	r23, Y+2	; 0x02
 606:	8b 81       	ldd	r24, Y+3	; 0x03
 608:	9c 81       	ldd	r25, Y+4	; 0x04
 60a:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 60e:	6b 01       	movw	r12, r22
 610:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 612:	20 e0       	ldi	r18, 0x00	; 0
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	40 e8       	ldi	r20, 0x80	; 128
 618:	5f e3       	ldi	r21, 0x3F	; 63
 61a:	0e 94 b0 03 	call	0x760	; 0x760 <__cmpsf2>
 61e:	88 23       	and	r24, r24
 620:	2c f1       	brlt	.+74     	; 0x66c <_Z4toneiff+0x102>
		__ticks = 1;
	else if (__tmp > 65535)
 622:	20 e0       	ldi	r18, 0x00	; 0
 624:	3f ef       	ldi	r19, 0xFF	; 255
 626:	4f e7       	ldi	r20, 0x7F	; 127
 628:	57 e4       	ldi	r21, 0x47	; 71
 62a:	c7 01       	movw	r24, r14
 62c:	b6 01       	movw	r22, r12
 62e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__gesf2>
 632:	18 16       	cp	r1, r24
 634:	b4 f4       	brge	.+44     	; 0x662 <_Z4toneiff+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 636:	20 e0       	ldi	r18, 0x00	; 0
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 e2       	ldi	r20, 0x20	; 32
 63c:	51 e4       	ldi	r21, 0x41	; 65
 63e:	69 81       	ldd	r22, Y+1	; 0x01
 640:	7a 81       	ldd	r23, Y+2	; 0x02
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	9c 81       	ldd	r25, Y+4	; 0x04
 646:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 64a:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixunssfsi>
		while(__ticks)
 64e:	61 15       	cp	r22, r1
 650:	71 05       	cpc	r23, r1
 652:	89 f0       	breq	.+34     	; 0x676 <_Z4toneiff+0x10c>
 654:	80 e9       	ldi	r24, 0x90	; 144
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <_Z4toneiff+0xee>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 65c:	61 50       	subi	r22, 0x01	; 1
 65e:	71 09       	sbc	r23, r1
 660:	f6 cf       	rjmp	.-20     	; 0x64e <_Z4toneiff+0xe4>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 662:	c7 01       	movw	r24, r14
 664:	b6 01       	movw	r22, r12
 666:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixunssfsi>
 66a:	02 c0       	rjmp	.+4      	; 0x670 <_Z4toneiff+0x106>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	cb 01       	movw	r24, r22
 672:	01 97       	sbiw	r24, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <_Z4toneiff+0x108>
	{
		_delay_ms(half_period);
		SPEAKER_PORT |= (1 << SPEAKER_PIN);
 676:	85 b1       	in	r24, 0x05	; 5
 678:	21 e0       	ldi	r18, 0x01	; 1
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	03 2c       	mov	r0, r3
 67e:	02 c0       	rjmp	.+4      	; 0x684 <_Z4toneiff+0x11a>
 680:	22 0f       	add	r18, r18
 682:	33 1f       	adc	r19, r19
 684:	0a 94       	dec	r0
 686:	e2 f7       	brpl	.-8      	; 0x680 <_Z4toneiff+0x116>
 688:	3e 83       	std	Y+6, r19	; 0x06
 68a:	2d 83       	std	Y+5, r18	; 0x05
 68c:	82 2b       	or	r24, r18
 68e:	85 b9       	out	0x05, r24	; 5
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 690:	20 e0       	ldi	r18, 0x00	; 0
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	40 e8       	ldi	r20, 0x80	; 128
 696:	5f e3       	ldi	r21, 0x3F	; 63
 698:	c7 01       	movw	r24, r14
 69a:	b6 01       	movw	r22, r12
 69c:	0e 94 b0 03 	call	0x760	; 0x760 <__cmpsf2>
 6a0:	88 23       	and	r24, r24
 6a2:	2c f1       	brlt	.+74     	; 0x6ee <_Z4toneiff+0x184>
		__ticks = 1;
	else if (__tmp > 65535)
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	3f ef       	ldi	r19, 0xFF	; 255
 6a8:	4f e7       	ldi	r20, 0x7F	; 127
 6aa:	57 e4       	ldi	r21, 0x47	; 71
 6ac:	c7 01       	movw	r24, r14
 6ae:	b6 01       	movw	r22, r12
 6b0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__gesf2>
 6b4:	18 16       	cp	r1, r24
 6b6:	b4 f4       	brge	.+44     	; 0x6e4 <_Z4toneiff+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 6b8:	20 e0       	ldi	r18, 0x00	; 0
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	40 e2       	ldi	r20, 0x20	; 32
 6be:	51 e4       	ldi	r21, 0x41	; 65
 6c0:	69 81       	ldd	r22, Y+1	; 0x01
 6c2:	7a 81       	ldd	r23, Y+2	; 0x02
 6c4:	8b 81       	ldd	r24, Y+3	; 0x03
 6c6:	9c 81       	ldd	r25, Y+4	; 0x04
 6c8:	0e 94 14 05 	call	0xa28	; 0xa28 <__mulsf3>
 6cc:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixunssfsi>
		while(__ticks)
 6d0:	61 15       	cp	r22, r1
 6d2:	71 05       	cpc	r23, r1
 6d4:	89 f0       	breq	.+34     	; 0x6f8 <_Z4toneiff+0x18e>
 6d6:	80 e9       	ldi	r24, 0x90	; 144
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <_Z4toneiff+0x170>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6de:	61 50       	subi	r22, 0x01	; 1
 6e0:	71 09       	sbc	r23, r1
 6e2:	f6 cf       	rjmp	.-20     	; 0x6d0 <_Z4toneiff+0x166>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 6e4:	c7 01       	movw	r24, r14
 6e6:	b6 01       	movw	r22, r12
 6e8:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixunssfsi>
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <_Z4toneiff+0x188>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 6ee:	61 e0       	ldi	r22, 0x01	; 1
 6f0:	70 e0       	ldi	r23, 0x00	; 0
 6f2:	cb 01       	movw	r24, r22
 6f4:	01 97       	sbiw	r24, 0x01	; 1
 6f6:	f1 f7       	brne	.-4      	; 0x6f4 <_Z4toneiff+0x18a>
		_delay_ms(half_period);
		SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
 6f8:	85 b1       	in	r24, 0x05	; 5
 6fa:	3d 81       	ldd	r19, Y+5	; 0x05
 6fc:	30 95       	com	r19
 6fe:	38 23       	and	r19, r24
 700:	35 b9       	out	0x05, r19	; 5
	samples = duration/period;
	half_period = period/2;
	
	
	//half_period= (int)half_period;
	for(i=0;i<samples;i++)
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	88 1a       	sub	r8, r24
 706:	98 0a       	sbc	r9, r24
 708:	a8 0a       	sbc	r10, r24
 70a:	b8 0a       	sbc	r11, r24
 70c:	70 cf       	rjmp	.-288    	; 0x5ee <_Z4toneiff+0x84>
		_delay_ms(half_period);
		SPEAKER_PORT &= ~(1 << SPEAKER_PIN);
		
	}
	return;
}	
 70e:	26 96       	adiw	r28, 0x06	; 6
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	ff 90       	pop	r15
 724:	ef 90       	pop	r14
 726:	df 90       	pop	r13
 728:	cf 90       	pop	r12
 72a:	bf 90       	pop	r11
 72c:	af 90       	pop	r10
 72e:	9f 90       	pop	r9
 730:	8f 90       	pop	r8
 732:	7f 90       	pop	r7
 734:	6f 90       	pop	r6
 736:	5f 90       	pop	r5
 738:	4f 90       	pop	r4
 73a:	3f 90       	pop	r3
 73c:	08 95       	ret

0000073e <_Z6noTonei>:

void noTone(int SPEAKER_PIN)
{
	SPEAKER_DDR |= (1<<SPEAKER_PIN);
 73e:	44 b1       	in	r20, 0x04	; 4
 740:	21 e0       	ldi	r18, 0x01	; 1
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	b9 01       	movw	r22, r18
 746:	02 c0       	rjmp	.+4      	; 0x74c <_Z6noTonei+0xe>
 748:	66 0f       	add	r22, r22
 74a:	77 1f       	adc	r23, r23
 74c:	8a 95       	dec	r24
 74e:	e2 f7       	brpl	.-8      	; 0x748 <_Z6noTonei+0xa>
 750:	cb 01       	movw	r24, r22
 752:	46 2b       	or	r20, r22
 754:	44 b9       	out	0x04, r20	; 4
	SPEAKER_PORT &= ~(1<<SPEAKER_PIN);
 756:	95 b1       	in	r25, 0x05	; 5
 758:	80 95       	com	r24
 75a:	89 23       	and	r24, r25
 75c:	85 b9       	out	0x05, r24	; 5
 75e:	08 95       	ret

00000760 <__cmpsf2>:
 760:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_cmp>
 764:	08 f4       	brcc	.+2      	; 0x768 <__cmpsf2+0x8>
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	08 95       	ret

0000076a <__divsf3>:
 76a:	0e 94 c9 03 	call	0x792	; 0x792 <__divsf3x>
 76e:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_round>
 772:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_pscB>
 776:	58 f0       	brcs	.+22     	; 0x78e <__divsf3+0x24>
 778:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_pscA>
 77c:	40 f0       	brcs	.+16     	; 0x78e <__divsf3+0x24>
 77e:	29 f4       	brne	.+10     	; 0x78a <__divsf3+0x20>
 780:	5f 3f       	cpi	r21, 0xFF	; 255
 782:	29 f0       	breq	.+10     	; 0x78e <__divsf3+0x24>
 784:	0c 94 be 04 	jmp	0x97c	; 0x97c <__fp_inf>
 788:	51 11       	cpse	r21, r1
 78a:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_szero>
 78e:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_nan>

00000792 <__divsf3x>:
 792:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__fp_split3>
 796:	68 f3       	brcs	.-38     	; 0x772 <__divsf3+0x8>

00000798 <__divsf3_pse>:
 798:	99 23       	and	r25, r25
 79a:	b1 f3       	breq	.-20     	; 0x788 <__divsf3+0x1e>
 79c:	55 23       	and	r21, r21
 79e:	91 f3       	breq	.-28     	; 0x784 <__divsf3+0x1a>
 7a0:	95 1b       	sub	r25, r21
 7a2:	55 0b       	sbc	r21, r21
 7a4:	bb 27       	eor	r27, r27
 7a6:	aa 27       	eor	r26, r26
 7a8:	62 17       	cp	r22, r18
 7aa:	73 07       	cpc	r23, r19
 7ac:	84 07       	cpc	r24, r20
 7ae:	38 f0       	brcs	.+14     	; 0x7be <__divsf3_pse+0x26>
 7b0:	9f 5f       	subi	r25, 0xFF	; 255
 7b2:	5f 4f       	sbci	r21, 0xFF	; 255
 7b4:	22 0f       	add	r18, r18
 7b6:	33 1f       	adc	r19, r19
 7b8:	44 1f       	adc	r20, r20
 7ba:	aa 1f       	adc	r26, r26
 7bc:	a9 f3       	breq	.-22     	; 0x7a8 <__divsf3_pse+0x10>
 7be:	35 d0       	rcall	.+106    	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7c0:	0e 2e       	mov	r0, r30
 7c2:	3a f0       	brmi	.+14     	; 0x7d2 <__divsf3_pse+0x3a>
 7c4:	e0 e8       	ldi	r30, 0x80	; 128
 7c6:	32 d0       	rcall	.+100    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7c8:	91 50       	subi	r25, 0x01	; 1
 7ca:	50 40       	sbci	r21, 0x00	; 0
 7cc:	e6 95       	lsr	r30
 7ce:	00 1c       	adc	r0, r0
 7d0:	ca f7       	brpl	.-14     	; 0x7c4 <__divsf3_pse+0x2c>
 7d2:	2b d0       	rcall	.+86     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7d4:	fe 2f       	mov	r31, r30
 7d6:	29 d0       	rcall	.+82     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7d8:	66 0f       	add	r22, r22
 7da:	77 1f       	adc	r23, r23
 7dc:	88 1f       	adc	r24, r24
 7de:	bb 1f       	adc	r27, r27
 7e0:	26 17       	cp	r18, r22
 7e2:	37 07       	cpc	r19, r23
 7e4:	48 07       	cpc	r20, r24
 7e6:	ab 07       	cpc	r26, r27
 7e8:	b0 e8       	ldi	r27, 0x80	; 128
 7ea:	09 f0       	breq	.+2      	; 0x7ee <__divsf3_pse+0x56>
 7ec:	bb 0b       	sbc	r27, r27
 7ee:	80 2d       	mov	r24, r0
 7f0:	bf 01       	movw	r22, r30
 7f2:	ff 27       	eor	r31, r31
 7f4:	93 58       	subi	r25, 0x83	; 131
 7f6:	5f 4f       	sbci	r21, 0xFF	; 255
 7f8:	3a f0       	brmi	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fa:	9e 3f       	cpi	r25, 0xFE	; 254
 7fc:	51 05       	cpc	r21, r1
 7fe:	78 f0       	brcs	.+30     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 800:	0c 94 be 04 	jmp	0x97c	; 0x97c <__fp_inf>
 804:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_szero>
 808:	5f 3f       	cpi	r21, 0xFF	; 255
 80a:	e4 f3       	brlt	.-8      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 80c:	98 3e       	cpi	r25, 0xE8	; 232
 80e:	d4 f3       	brlt	.-12     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 810:	86 95       	lsr	r24
 812:	77 95       	ror	r23
 814:	67 95       	ror	r22
 816:	b7 95       	ror	r27
 818:	f7 95       	ror	r31
 81a:	9f 5f       	subi	r25, 0xFF	; 255
 81c:	c9 f7       	brne	.-14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 81e:	88 0f       	add	r24, r24
 820:	91 1d       	adc	r25, r1
 822:	96 95       	lsr	r25
 824:	87 95       	ror	r24
 826:	97 f9       	bld	r25, 7
 828:	08 95       	ret
 82a:	e1 e0       	ldi	r30, 0x01	; 1
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	bb 1f       	adc	r27, r27
 834:	62 17       	cp	r22, r18
 836:	73 07       	cpc	r23, r19
 838:	84 07       	cpc	r24, r20
 83a:	ba 07       	cpc	r27, r26
 83c:	20 f0       	brcs	.+8      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 83e:	62 1b       	sub	r22, r18
 840:	73 0b       	sbc	r23, r19
 842:	84 0b       	sbc	r24, r20
 844:	ba 0b       	sbc	r27, r26
 846:	ee 1f       	adc	r30, r30
 848:	88 f7       	brcc	.-30     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 84a:	e0 95       	com	r30
 84c:	08 95       	ret

0000084e <__fixsfsi>:
 84e:	0e 94 2e 04 	call	0x85c	; 0x85c <__fixunssfsi>
 852:	68 94       	set
 854:	b1 11       	cpse	r27, r1
 856:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_szero>
 85a:	08 95       	ret

0000085c <__fixunssfsi>:
 85c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__fp_splitA>
 860:	88 f0       	brcs	.+34     	; 0x884 <__fixunssfsi+0x28>
 862:	9f 57       	subi	r25, 0x7F	; 127
 864:	98 f0       	brcs	.+38     	; 0x88c <__fixunssfsi+0x30>
 866:	b9 2f       	mov	r27, r25
 868:	99 27       	eor	r25, r25
 86a:	b7 51       	subi	r27, 0x17	; 23
 86c:	b0 f0       	brcs	.+44     	; 0x89a <__fixunssfsi+0x3e>
 86e:	e1 f0       	breq	.+56     	; 0x8a8 <__fixunssfsi+0x4c>
 870:	66 0f       	add	r22, r22
 872:	77 1f       	adc	r23, r23
 874:	88 1f       	adc	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	1a f0       	brmi	.+6      	; 0x880 <__fixunssfsi+0x24>
 87a:	ba 95       	dec	r27
 87c:	c9 f7       	brne	.-14     	; 0x870 <__fixunssfsi+0x14>
 87e:	14 c0       	rjmp	.+40     	; 0x8a8 <__fixunssfsi+0x4c>
 880:	b1 30       	cpi	r27, 0x01	; 1
 882:	91 f0       	breq	.+36     	; 0x8a8 <__fixunssfsi+0x4c>
 884:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_zero>
 888:	b1 e0       	ldi	r27, 0x01	; 1
 88a:	08 95       	ret
 88c:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_zero>
 890:	67 2f       	mov	r22, r23
 892:	78 2f       	mov	r23, r24
 894:	88 27       	eor	r24, r24
 896:	b8 5f       	subi	r27, 0xF8	; 248
 898:	39 f0       	breq	.+14     	; 0x8a8 <__fixunssfsi+0x4c>
 89a:	b9 3f       	cpi	r27, 0xF9	; 249
 89c:	cc f3       	brlt	.-14     	; 0x890 <__fixunssfsi+0x34>
 89e:	86 95       	lsr	r24
 8a0:	77 95       	ror	r23
 8a2:	67 95       	ror	r22
 8a4:	b3 95       	inc	r27
 8a6:	d9 f7       	brne	.-10     	; 0x89e <__fixunssfsi+0x42>
 8a8:	3e f4       	brtc	.+14     	; 0x8b8 <__fixunssfsi+0x5c>
 8aa:	90 95       	com	r25
 8ac:	80 95       	com	r24
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	08 95       	ret

000008ba <__floatunsisf>:
 8ba:	e8 94       	clt
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <__floatsisf+0x12>

000008be <__floatsisf>:
 8be:	97 fb       	bst	r25, 7
 8c0:	3e f4       	brtc	.+14     	; 0x8d0 <__floatsisf+0x12>
 8c2:	90 95       	com	r25
 8c4:	80 95       	com	r24
 8c6:	70 95       	com	r23
 8c8:	61 95       	neg	r22
 8ca:	7f 4f       	sbci	r23, 0xFF	; 255
 8cc:	8f 4f       	sbci	r24, 0xFF	; 255
 8ce:	9f 4f       	sbci	r25, 0xFF	; 255
 8d0:	99 23       	and	r25, r25
 8d2:	a9 f0       	breq	.+42     	; 0x8fe <__floatsisf+0x40>
 8d4:	f9 2f       	mov	r31, r25
 8d6:	96 e9       	ldi	r25, 0x96	; 150
 8d8:	bb 27       	eor	r27, r27
 8da:	93 95       	inc	r25
 8dc:	f6 95       	lsr	r31
 8de:	87 95       	ror	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	b7 95       	ror	r27
 8e6:	f1 11       	cpse	r31, r1
 8e8:	f8 cf       	rjmp	.-16     	; 0x8da <__floatsisf+0x1c>
 8ea:	fa f4       	brpl	.+62     	; 0x92a <__stack+0x2b>
 8ec:	bb 0f       	add	r27, r27
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__floatsisf+0x36>
 8f0:	60 ff       	sbrs	r22, 0
 8f2:	1b c0       	rjmp	.+54     	; 0x92a <__stack+0x2b>
 8f4:	6f 5f       	subi	r22, 0xFF	; 255
 8f6:	7f 4f       	sbci	r23, 0xFF	; 255
 8f8:	8f 4f       	sbci	r24, 0xFF	; 255
 8fa:	9f 4f       	sbci	r25, 0xFF	; 255
 8fc:	16 c0       	rjmp	.+44     	; 0x92a <__stack+0x2b>
 8fe:	88 23       	and	r24, r24
 900:	11 f0       	breq	.+4      	; 0x906 <__stack+0x7>
 902:	96 e9       	ldi	r25, 0x96	; 150
 904:	11 c0       	rjmp	.+34     	; 0x928 <__stack+0x29>
 906:	77 23       	and	r23, r23
 908:	21 f0       	breq	.+8      	; 0x912 <__stack+0x13>
 90a:	9e e8       	ldi	r25, 0x8E	; 142
 90c:	87 2f       	mov	r24, r23
 90e:	76 2f       	mov	r23, r22
 910:	05 c0       	rjmp	.+10     	; 0x91c <__stack+0x1d>
 912:	66 23       	and	r22, r22
 914:	71 f0       	breq	.+28     	; 0x932 <__stack+0x33>
 916:	96 e8       	ldi	r25, 0x86	; 134
 918:	86 2f       	mov	r24, r22
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	60 e0       	ldi	r22, 0x00	; 0
 91e:	2a f0       	brmi	.+10     	; 0x92a <__stack+0x2b>
 920:	9a 95       	dec	r25
 922:	66 0f       	add	r22, r22
 924:	77 1f       	adc	r23, r23
 926:	88 1f       	adc	r24, r24
 928:	da f7       	brpl	.-10     	; 0x920 <__stack+0x21>
 92a:	88 0f       	add	r24, r24
 92c:	96 95       	lsr	r25
 92e:	87 95       	ror	r24
 930:	97 f9       	bld	r25, 7
 932:	08 95       	ret

00000934 <__fp_cmp>:
 934:	99 0f       	add	r25, r25
 936:	00 08       	sbc	r0, r0
 938:	55 0f       	add	r21, r21
 93a:	aa 0b       	sbc	r26, r26
 93c:	e0 e8       	ldi	r30, 0x80	; 128
 93e:	fe ef       	ldi	r31, 0xFE	; 254
 940:	16 16       	cp	r1, r22
 942:	17 06       	cpc	r1, r23
 944:	e8 07       	cpc	r30, r24
 946:	f9 07       	cpc	r31, r25
 948:	c0 f0       	brcs	.+48     	; 0x97a <__fp_cmp+0x46>
 94a:	12 16       	cp	r1, r18
 94c:	13 06       	cpc	r1, r19
 94e:	e4 07       	cpc	r30, r20
 950:	f5 07       	cpc	r31, r21
 952:	98 f0       	brcs	.+38     	; 0x97a <__fp_cmp+0x46>
 954:	62 1b       	sub	r22, r18
 956:	73 0b       	sbc	r23, r19
 958:	84 0b       	sbc	r24, r20
 95a:	95 0b       	sbc	r25, r21
 95c:	39 f4       	brne	.+14     	; 0x96c <__fp_cmp+0x38>
 95e:	0a 26       	eor	r0, r26
 960:	61 f0       	breq	.+24     	; 0x97a <__fp_cmp+0x46>
 962:	23 2b       	or	r18, r19
 964:	24 2b       	or	r18, r20
 966:	25 2b       	or	r18, r21
 968:	21 f4       	brne	.+8      	; 0x972 <__fp_cmp+0x3e>
 96a:	08 95       	ret
 96c:	0a 26       	eor	r0, r26
 96e:	09 f4       	brne	.+2      	; 0x972 <__fp_cmp+0x3e>
 970:	a1 40       	sbci	r26, 0x01	; 1
 972:	a6 95       	lsr	r26
 974:	8f ef       	ldi	r24, 0xFF	; 255
 976:	81 1d       	adc	r24, r1
 978:	81 1d       	adc	r24, r1
 97a:	08 95       	ret

0000097c <__fp_inf>:
 97c:	97 f9       	bld	r25, 7
 97e:	9f 67       	ori	r25, 0x7F	; 127
 980:	80 e8       	ldi	r24, 0x80	; 128
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	60 e0       	ldi	r22, 0x00	; 0
 986:	08 95       	ret

00000988 <__fp_nan>:
 988:	9f ef       	ldi	r25, 0xFF	; 255
 98a:	80 ec       	ldi	r24, 0xC0	; 192
 98c:	08 95       	ret

0000098e <__fp_pscA>:
 98e:	00 24       	eor	r0, r0
 990:	0a 94       	dec	r0
 992:	16 16       	cp	r1, r22
 994:	17 06       	cpc	r1, r23
 996:	18 06       	cpc	r1, r24
 998:	09 06       	cpc	r0, r25
 99a:	08 95       	ret

0000099c <__fp_pscB>:
 99c:	00 24       	eor	r0, r0
 99e:	0a 94       	dec	r0
 9a0:	12 16       	cp	r1, r18
 9a2:	13 06       	cpc	r1, r19
 9a4:	14 06       	cpc	r1, r20
 9a6:	05 06       	cpc	r0, r21
 9a8:	08 95       	ret

000009aa <__fp_round>:
 9aa:	09 2e       	mov	r0, r25
 9ac:	03 94       	inc	r0
 9ae:	00 0c       	add	r0, r0
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <__fp_round+0xc>
 9b2:	88 23       	and	r24, r24
 9b4:	52 f0       	brmi	.+20     	; 0x9ca <__fp_round+0x20>
 9b6:	bb 0f       	add	r27, r27
 9b8:	40 f4       	brcc	.+16     	; 0x9ca <__fp_round+0x20>
 9ba:	bf 2b       	or	r27, r31
 9bc:	11 f4       	brne	.+4      	; 0x9c2 <__fp_round+0x18>
 9be:	60 ff       	sbrs	r22, 0
 9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__fp_round+0x20>
 9c2:	6f 5f       	subi	r22, 0xFF	; 255
 9c4:	7f 4f       	sbci	r23, 0xFF	; 255
 9c6:	8f 4f       	sbci	r24, 0xFF	; 255
 9c8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ca:	08 95       	ret

000009cc <__fp_split3>:
 9cc:	57 fd       	sbrc	r21, 7
 9ce:	90 58       	subi	r25, 0x80	; 128
 9d0:	44 0f       	add	r20, r20
 9d2:	55 1f       	adc	r21, r21
 9d4:	59 f0       	breq	.+22     	; 0x9ec <__fp_splitA+0x10>
 9d6:	5f 3f       	cpi	r21, 0xFF	; 255
 9d8:	71 f0       	breq	.+28     	; 0x9f6 <__fp_splitA+0x1a>
 9da:	47 95       	ror	r20

000009dc <__fp_splitA>:
 9dc:	88 0f       	add	r24, r24
 9de:	97 fb       	bst	r25, 7
 9e0:	99 1f       	adc	r25, r25
 9e2:	61 f0       	breq	.+24     	; 0x9fc <__fp_splitA+0x20>
 9e4:	9f 3f       	cpi	r25, 0xFF	; 255
 9e6:	79 f0       	breq	.+30     	; 0xa06 <__fp_splitA+0x2a>
 9e8:	87 95       	ror	r24
 9ea:	08 95       	ret
 9ec:	12 16       	cp	r1, r18
 9ee:	13 06       	cpc	r1, r19
 9f0:	14 06       	cpc	r1, r20
 9f2:	55 1f       	adc	r21, r21
 9f4:	f2 cf       	rjmp	.-28     	; 0x9da <__fp_split3+0xe>
 9f6:	46 95       	lsr	r20
 9f8:	f1 df       	rcall	.-30     	; 0x9dc <__fp_splitA>
 9fa:	08 c0       	rjmp	.+16     	; 0xa0c <__fp_splitA+0x30>
 9fc:	16 16       	cp	r1, r22
 9fe:	17 06       	cpc	r1, r23
 a00:	18 06       	cpc	r1, r24
 a02:	99 1f       	adc	r25, r25
 a04:	f1 cf       	rjmp	.-30     	; 0x9e8 <__fp_splitA+0xc>
 a06:	86 95       	lsr	r24
 a08:	71 05       	cpc	r23, r1
 a0a:	61 05       	cpc	r22, r1
 a0c:	08 94       	sec
 a0e:	08 95       	ret

00000a10 <__fp_zero>:
 a10:	e8 94       	clt

00000a12 <__fp_szero>:
 a12:	bb 27       	eor	r27, r27
 a14:	66 27       	eor	r22, r22
 a16:	77 27       	eor	r23, r23
 a18:	cb 01       	movw	r24, r22
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <__gesf2>:
 a1e:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_cmp>
 a22:	08 f4       	brcc	.+2      	; 0xa26 <__gesf2+0x8>
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	08 95       	ret

00000a28 <__mulsf3>:
 a28:	0e 94 27 05 	call	0xa4e	; 0xa4e <__mulsf3x>
 a2c:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_round>
 a30:	0e 94 c7 04 	call	0x98e	; 0x98e <__fp_pscA>
 a34:	38 f0       	brcs	.+14     	; 0xa44 <__mulsf3+0x1c>
 a36:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_pscB>
 a3a:	20 f0       	brcs	.+8      	; 0xa44 <__mulsf3+0x1c>
 a3c:	95 23       	and	r25, r21
 a3e:	11 f0       	breq	.+4      	; 0xa44 <__mulsf3+0x1c>
 a40:	0c 94 be 04 	jmp	0x97c	; 0x97c <__fp_inf>
 a44:	0c 94 c4 04 	jmp	0x988	; 0x988 <__fp_nan>
 a48:	11 24       	eor	r1, r1
 a4a:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_szero>

00000a4e <__mulsf3x>:
 a4e:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__fp_split3>
 a52:	70 f3       	brcs	.-36     	; 0xa30 <__mulsf3+0x8>

00000a54 <__mulsf3_pse>:
 a54:	95 9f       	mul	r25, r21
 a56:	c1 f3       	breq	.-16     	; 0xa48 <__mulsf3+0x20>
 a58:	95 0f       	add	r25, r21
 a5a:	50 e0       	ldi	r21, 0x00	; 0
 a5c:	55 1f       	adc	r21, r21
 a5e:	62 9f       	mul	r22, r18
 a60:	f0 01       	movw	r30, r0
 a62:	72 9f       	mul	r23, r18
 a64:	bb 27       	eor	r27, r27
 a66:	f0 0d       	add	r31, r0
 a68:	b1 1d       	adc	r27, r1
 a6a:	63 9f       	mul	r22, r19
 a6c:	aa 27       	eor	r26, r26
 a6e:	f0 0d       	add	r31, r0
 a70:	b1 1d       	adc	r27, r1
 a72:	aa 1f       	adc	r26, r26
 a74:	64 9f       	mul	r22, r20
 a76:	66 27       	eor	r22, r22
 a78:	b0 0d       	add	r27, r0
 a7a:	a1 1d       	adc	r26, r1
 a7c:	66 1f       	adc	r22, r22
 a7e:	82 9f       	mul	r24, r18
 a80:	22 27       	eor	r18, r18
 a82:	b0 0d       	add	r27, r0
 a84:	a1 1d       	adc	r26, r1
 a86:	62 1f       	adc	r22, r18
 a88:	73 9f       	mul	r23, r19
 a8a:	b0 0d       	add	r27, r0
 a8c:	a1 1d       	adc	r26, r1
 a8e:	62 1f       	adc	r22, r18
 a90:	83 9f       	mul	r24, r19
 a92:	a0 0d       	add	r26, r0
 a94:	61 1d       	adc	r22, r1
 a96:	22 1f       	adc	r18, r18
 a98:	74 9f       	mul	r23, r20
 a9a:	33 27       	eor	r19, r19
 a9c:	a0 0d       	add	r26, r0
 a9e:	61 1d       	adc	r22, r1
 aa0:	23 1f       	adc	r18, r19
 aa2:	84 9f       	mul	r24, r20
 aa4:	60 0d       	add	r22, r0
 aa6:	21 1d       	adc	r18, r1
 aa8:	82 2f       	mov	r24, r18
 aaa:	76 2f       	mov	r23, r22
 aac:	6a 2f       	mov	r22, r26
 aae:	11 24       	eor	r1, r1
 ab0:	9f 57       	subi	r25, 0x7F	; 127
 ab2:	50 40       	sbci	r21, 0x00	; 0
 ab4:	9a f0       	brmi	.+38     	; 0xadc <__mulsf3_pse+0x88>
 ab6:	f1 f0       	breq	.+60     	; 0xaf4 <__mulsf3_pse+0xa0>
 ab8:	88 23       	and	r24, r24
 aba:	4a f0       	brmi	.+18     	; 0xace <__mulsf3_pse+0x7a>
 abc:	ee 0f       	add	r30, r30
 abe:	ff 1f       	adc	r31, r31
 ac0:	bb 1f       	adc	r27, r27
 ac2:	66 1f       	adc	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	91 50       	subi	r25, 0x01	; 1
 aca:	50 40       	sbci	r21, 0x00	; 0
 acc:	a9 f7       	brne	.-22     	; 0xab8 <__mulsf3_pse+0x64>
 ace:	9e 3f       	cpi	r25, 0xFE	; 254
 ad0:	51 05       	cpc	r21, r1
 ad2:	80 f0       	brcs	.+32     	; 0xaf4 <__mulsf3_pse+0xa0>
 ad4:	0c 94 be 04 	jmp	0x97c	; 0x97c <__fp_inf>
 ad8:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_szero>
 adc:	5f 3f       	cpi	r21, 0xFF	; 255
 ade:	e4 f3       	brlt	.-8      	; 0xad8 <__mulsf3_pse+0x84>
 ae0:	98 3e       	cpi	r25, 0xE8	; 232
 ae2:	d4 f3       	brlt	.-12     	; 0xad8 <__mulsf3_pse+0x84>
 ae4:	86 95       	lsr	r24
 ae6:	77 95       	ror	r23
 ae8:	67 95       	ror	r22
 aea:	b7 95       	ror	r27
 aec:	f7 95       	ror	r31
 aee:	e7 95       	ror	r30
 af0:	9f 5f       	subi	r25, 0xFF	; 255
 af2:	c1 f7       	brne	.-16     	; 0xae4 <__mulsf3_pse+0x90>
 af4:	fe 2b       	or	r31, r30
 af6:	88 0f       	add	r24, r24
 af8:	91 1d       	adc	r25, r1
 afa:	96 95       	lsr	r25
 afc:	87 95       	ror	r24
 afe:	97 f9       	bld	r25, 7
 b00:	08 95       	ret

00000b02 <__divmodhi4>:
 b02:	97 fb       	bst	r25, 7
 b04:	07 2e       	mov	r0, r23
 b06:	16 f4       	brtc	.+4      	; 0xb0c <__divmodhi4+0xa>
 b08:	00 94       	com	r0
 b0a:	07 d0       	rcall	.+14     	; 0xb1a <__divmodhi4_neg1>
 b0c:	77 fd       	sbrc	r23, 7
 b0e:	09 d0       	rcall	.+18     	; 0xb22 <__divmodhi4_neg2>
 b10:	0e 94 b4 05 	call	0xb68	; 0xb68 <__udivmodhi4>
 b14:	07 fc       	sbrc	r0, 7
 b16:	05 d0       	rcall	.+10     	; 0xb22 <__divmodhi4_neg2>
 b18:	3e f4       	brtc	.+14     	; 0xb28 <__divmodhi4_exit>

00000b1a <__divmodhi4_neg1>:
 b1a:	90 95       	com	r25
 b1c:	81 95       	neg	r24
 b1e:	9f 4f       	sbci	r25, 0xFF	; 255
 b20:	08 95       	ret

00000b22 <__divmodhi4_neg2>:
 b22:	70 95       	com	r23
 b24:	61 95       	neg	r22
 b26:	7f 4f       	sbci	r23, 0xFF	; 255

00000b28 <__divmodhi4_exit>:
 b28:	08 95       	ret

00000b2a <__divmodsi4>:
 b2a:	05 2e       	mov	r0, r21
 b2c:	97 fb       	bst	r25, 7
 b2e:	1e f4       	brtc	.+6      	; 0xb36 <__divmodsi4+0xc>
 b30:	00 94       	com	r0
 b32:	0e 94 ac 05 	call	0xb58	; 0xb58 <__negsi2>
 b36:	57 fd       	sbrc	r21, 7
 b38:	07 d0       	rcall	.+14     	; 0xb48 <__divmodsi4_neg2>
 b3a:	0e 94 c8 05 	call	0xb90	; 0xb90 <__udivmodsi4>
 b3e:	07 fc       	sbrc	r0, 7
 b40:	03 d0       	rcall	.+6      	; 0xb48 <__divmodsi4_neg2>
 b42:	4e f4       	brtc	.+18     	; 0xb56 <__divmodsi4_exit>
 b44:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__negsi2>

00000b48 <__divmodsi4_neg2>:
 b48:	50 95       	com	r21
 b4a:	40 95       	com	r20
 b4c:	30 95       	com	r19
 b4e:	21 95       	neg	r18
 b50:	3f 4f       	sbci	r19, 0xFF	; 255
 b52:	4f 4f       	sbci	r20, 0xFF	; 255
 b54:	5f 4f       	sbci	r21, 0xFF	; 255

00000b56 <__divmodsi4_exit>:
 b56:	08 95       	ret

00000b58 <__negsi2>:
 b58:	90 95       	com	r25
 b5a:	80 95       	com	r24
 b5c:	70 95       	com	r23
 b5e:	61 95       	neg	r22
 b60:	7f 4f       	sbci	r23, 0xFF	; 255
 b62:	8f 4f       	sbci	r24, 0xFF	; 255
 b64:	9f 4f       	sbci	r25, 0xFF	; 255
 b66:	08 95       	ret

00000b68 <__udivmodhi4>:
 b68:	aa 1b       	sub	r26, r26
 b6a:	bb 1b       	sub	r27, r27
 b6c:	51 e1       	ldi	r21, 0x11	; 17
 b6e:	07 c0       	rjmp	.+14     	; 0xb7e <__udivmodhi4_ep>

00000b70 <__udivmodhi4_loop>:
 b70:	aa 1f       	adc	r26, r26
 b72:	bb 1f       	adc	r27, r27
 b74:	a6 17       	cp	r26, r22
 b76:	b7 07       	cpc	r27, r23
 b78:	10 f0       	brcs	.+4      	; 0xb7e <__udivmodhi4_ep>
 b7a:	a6 1b       	sub	r26, r22
 b7c:	b7 0b       	sbc	r27, r23

00000b7e <__udivmodhi4_ep>:
 b7e:	88 1f       	adc	r24, r24
 b80:	99 1f       	adc	r25, r25
 b82:	5a 95       	dec	r21
 b84:	a9 f7       	brne	.-22     	; 0xb70 <__udivmodhi4_loop>
 b86:	80 95       	com	r24
 b88:	90 95       	com	r25
 b8a:	bc 01       	movw	r22, r24
 b8c:	cd 01       	movw	r24, r26
 b8e:	08 95       	ret

00000b90 <__udivmodsi4>:
 b90:	a1 e2       	ldi	r26, 0x21	; 33
 b92:	1a 2e       	mov	r1, r26
 b94:	aa 1b       	sub	r26, r26
 b96:	bb 1b       	sub	r27, r27
 b98:	fd 01       	movw	r30, r26
 b9a:	0d c0       	rjmp	.+26     	; 0xbb6 <__udivmodsi4_ep>

00000b9c <__udivmodsi4_loop>:
 b9c:	aa 1f       	adc	r26, r26
 b9e:	bb 1f       	adc	r27, r27
 ba0:	ee 1f       	adc	r30, r30
 ba2:	ff 1f       	adc	r31, r31
 ba4:	a2 17       	cp	r26, r18
 ba6:	b3 07       	cpc	r27, r19
 ba8:	e4 07       	cpc	r30, r20
 baa:	f5 07       	cpc	r31, r21
 bac:	20 f0       	brcs	.+8      	; 0xbb6 <__udivmodsi4_ep>
 bae:	a2 1b       	sub	r26, r18
 bb0:	b3 0b       	sbc	r27, r19
 bb2:	e4 0b       	sbc	r30, r20
 bb4:	f5 0b       	sbc	r31, r21

00000bb6 <__udivmodsi4_ep>:
 bb6:	66 1f       	adc	r22, r22
 bb8:	77 1f       	adc	r23, r23
 bba:	88 1f       	adc	r24, r24
 bbc:	99 1f       	adc	r25, r25
 bbe:	1a 94       	dec	r1
 bc0:	69 f7       	brne	.-38     	; 0xb9c <__udivmodsi4_loop>
 bc2:	60 95       	com	r22
 bc4:	70 95       	com	r23
 bc6:	80 95       	com	r24
 bc8:	90 95       	com	r25
 bca:	9b 01       	movw	r18, r22
 bcc:	ac 01       	movw	r20, r24
 bce:	bd 01       	movw	r22, r26
 bd0:	cf 01       	movw	r24, r30
 bd2:	08 95       	ret

00000bd4 <_exit>:
 bd4:	f8 94       	cli

00000bd6 <__stop_program>:
 bd6:	ff cf       	rjmp	.-2      	; 0xbd6 <__stop_program>
